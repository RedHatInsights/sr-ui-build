{"version":3,"file":"776.bundle.9fb7fc0a4518c6221a3d.js","mappings":"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","sources":["webpack://@apicurio/registry-ui/./src/app/pages/roles/components/empty/empty.tsx","webpack://@apicurio/registry-ui/./src/app/pages/roles/components/empty/index.ts","webpack://@apicurio/registry-ui/./src/app/pages/roles/components/modals/grantAccessModal.tsx","webpack://@apicurio/registry-ui/./src/app/pages/roles/components/modals/index.ts","webpack://@apicurio/registry-ui/./src/app/pages/roles/components/roleList/roleList.tsx","webpack://@apicurio/registry-ui/./src/app/pages/roles/components/roleList/index.ts","webpack://@apicurio/registry-ui/./src/app/pages/roles/roles.tsx"],"sourcesContent":["/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport {Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title} from '@patternfly/react-core';\nimport {PlusCircleIcon} from \"@patternfly/react-icons\";\nimport {PureComponent, PureComponentProps, PureComponentState} from \"../../../../components\";\nimport {If} from \"../../../../components/common/if\";\n\n/**\n * Properties\n */\nexport interface RoleMappingsEmptyStateProps extends PureComponentProps {\n    isFiltered?: boolean;\n    onCreateRoleMapping?: ()=>void;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface RoleMappingsEmptyStateState extends PureComponentState {\n}\n\n\n/**\n * Models the empty state for the Artifacts page (when there are no artifacts).\n */\nexport class RoleMappingsEmptyState extends PureComponent<RoleMappingsEmptyStateProps, RoleMappingsEmptyStateState> {\n\n    constructor(props: Readonly<RoleMappingsEmptyStateProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <EmptyState variant={EmptyStateVariant.full}>\n                <EmptyStateIcon icon={PlusCircleIcon}/>\n                <Title headingLevel=\"h5\" size=\"lg\">\n                    No Role Mappings\n                </Title>\n                <If condition={() => this.props.isFiltered === true}>\n                    <EmptyStateBody>\n                        No role mappings match your filter settings.  Change your filter or perhaps create a new\n                        role mapping.\n                    </EmptyStateBody>\n                </If>\n                <If condition={() => !this.props.isFiltered}>\n                    <EmptyStateBody>\n                        There are currently no role mappings configured for the registry.  Click the \"Grant Access\"\n                        button above to grant access to a user.\n                    </EmptyStateBody>\n                    <Button variant=\"primary\" data-testid=\"btn-grant-access\" onClick={this.props.onCreateRoleMapping}>Grant Access</Button>\n                </If>\n            </EmptyState>\n        );\n    }\n\n    protected initializeState(): RoleMappingsEmptyStateState {\n        return {};\n    }\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from \"./empty\"","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport { Button, \n    DescriptionList, \n    DescriptionListGroup, \n    DescriptionListTerm, \n    DescriptionListDescription, \n    Form, \n    FormGroup, \n    Modal,\n    Radio, \n    Select, SelectOption, SelectOptionObject, SelectVariant,\n    TextInput,\n    Tooltip } from '@patternfly/react-core';\nimport { PureComponent, PureComponentProps, PureComponentState } from \"../../../../components\";\nimport { RoleTypes, RoleMapping } from \"../../../../../models\";\nimport {OutlinedQuestionCircleIcon} from '@patternfly/react-icons'\nimport \"./grantAccessModal.css\";\n\n/**\n * Properties\n */\nexport interface GrantAccessModalProps extends PureComponentProps {\n    isOpen: boolean;\n    isUpdateAccess: boolean;\n    serviceRegistryInstance?: string;\n    accountId?: string;\n    roles: null | RoleMapping[];\n    defaultRole?: RoleMapping;\n    onClose: () => void;\n    onGrant: (accountId: string, role: string, isUpdate: boolean) => void;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface GrantAccessModalState extends PureComponentState {\n    isAccountIDSelectOpen: boolean;\n    isValid: boolean;\n    accountId: string | undefined;\n    role: string | undefined;\n}\n\n\n/**\n * Models the modal dialog for granting access to a user.\n */\nexport class GrantAccessModal extends PureComponent<GrantAccessModalProps, GrantAccessModalState> {\n\n    constructor(props: Readonly<GrantAccessModalProps>) {\n        super(props);\n    }\n    componentDidUpdate(prevProps: GrantAccessModalProps) {\n        if (this.props.defaultRole !== prevProps.defaultRole) {\n            if (this.props.defaultRole) {\n                this.setMultiState({\n                    accountId: this.props.defaultRole.principalId,\n                    role: this.props.defaultRole.role\n                })\n            } else {\n                this.setMultiState({\n                    accountId: \"\",\n                    role: undefined\n                })\n            }\n        }\n        // Typical usage (don't forget to compare props):\n        // if (this.props.userID !== prevProps.userID) {\n        //   this.fetchData(this.props.userID);\n        // }\n      }\n\n    public render(): React.ReactElement {\n        return (\n            <Modal\n                title=\"Manage Permissions\"\n                description=\"Manage access to resources in this Service Registry instance by assigning permissions to an account.\"\n                variant=\"medium\"\n                isOpen={this.props.isOpen}\n                onClose={this.props.onClose}\n                className=\"grant-access-modal pf-m-redhat-font\"\n                actions={[\n                    <Button key=\"grant\" variant=\"primary\" data-testid=\"modal-btn-grant\" onClick={this.doGrantAccess} isDisabled={!this.state.isValid}>{this.props.isUpdateAccess ? \"Update\" : \"Create\"}</Button>,\n                    <Button key=\"cancel\" variant=\"link\" data-testid=\"modal-btn-cancel\" onClick={this.props.onClose}>Cancel</Button>\n                ]}\n            >\n\n\n                <Form>\n                    {this.props.serviceRegistryInstance !== undefined ? (<DescriptionList>\n                        <DescriptionListGroup>\n                            <DescriptionListTerm>Service Registry instance</DescriptionListTerm>\n                            <DescriptionListDescription>{this.props.serviceRegistryInstance}</DescriptionListDescription>\n                        </DescriptionListGroup>\n                    </DescriptionList>\n                    ) : undefined}\n\n                    <FormGroup\n                        label=\"Account ID\"\n                        labelIcon={<Tooltip\n                            position=\"top\"\n                            content={\n                              <div>A service account enables your application or tool to connect securely to your resources. A user account enables users in your organization to access resources.</div>\n                            }\n                          >\n                            <OutlinedQuestionCircleIcon/>\n                          </Tooltip>}\n                        isRequired\n                        fieldId=\"grant-access-account-id\"\n                    >\n                        {this.props.roles !== null ?\n                        <Select\n                            id=\"grant-access-principal\"\n                            name=\"grant-access-principal\"\n                            variant={SelectVariant.typeahead}\n                            typeAheadAriaLabel=\"Select an account ID\"\n                            onToggle={this.onAccountIDToggle}\n                            onSelect={this.onAccountIDSelect}\n                            onClear={this.onAccountIDClearSelection}\n                            selections={this.state.accountId}\n                            isOpen={this.state.isAccountIDSelectOpen}\n                            isInputValuePersisted={true}\n                            placeholderText={this.props.isUpdateAccess ? this.props.defaultRole?.principalId : \"Select an account ID\"}\n                            maxHeight = {'100px'}\n                            isDisabled={this.props.isUpdateAccess}\n                        >\n                            {this.props.roles.map((option, index) => (\n                                <SelectOption\n                                    key={index}\n                                    value={option.principalId}\n                                    \n                                />\n                            ))}\n                        </Select> :   \n                           <TextInput\n                           isRequired\n                           type=\"text\"\n                           id=\"grant-access-principal\"\n                           name=\"grant-access-principal\"\n                           aria-describedby=\"grant-access-principal-helper\"\n                           onChange={this.handlePrincipalChange}\n                       /> }\n                    </FormGroup>\n                    <FormGroup\n                        label=\"Role\"\n                        isRequired\n                        fieldId=\"grant-access-role\"\n                    >\n                        <Radio id=\"grant-access-role\"\n                            className = \"grant-access-radio-button\"\n                            name=\"grant-access-role\"\n                            label=\"Administrator\" \n                            description=\"Give roles to other principals on this Service Registry instance, configure global rules, and access data import and export features.\"\n                            value={RoleTypes.ADMIN}\n                            onChange={this.handleRoleChange}\n                            isChecked={this.state.role == RoleTypes.ADMIN}\n                        />\n\n                        <Radio id=\"grant-access-role\"\n                            className = \"grant-access-radio-button\"\n                            name=\"grant-access-role\"\n                            label=\"Manager\" \n                            description=\"Read and write artifacts on this Service Registry instance.\"\n                            value={RoleTypes.DEVELOPER}\n                            onChange={this.handleRoleChange}\n                            isChecked={this.state.role == RoleTypes.DEVELOPER} />\n\n                        <Radio id=\"grant-access-role\"\n                            className = \"grant-access-radio-button\"\n                            name=\"grant-access-role\"\n                            label=\"Viewer\" \n                            description=\"Read artifacts on this Service Registry instance.\"\n                            value={RoleTypes.READ_ONLY}\n                            onChange={this.handleRoleChange} \n                            isChecked={this.state.role == RoleTypes.READ_ONLY}/>\n                    </FormGroup>\n                </Form>\n\n            </Modal>\n        );\n    }\n\n    protected initializeState(): GrantAccessModalState {\n        return {\n            isAccountIDSelectOpen: false,\n            isValid: false,\n            accountId: this.props.isUpdateAccess && this.props.roles ? this.props.roles[0].principalId : \"\",\n            role: undefined\n        };\n    }\n\n    public reset(): void {\n        this.setMultiState(this.initializeState());\n    }\n\n    private onAccountIDClearSelection = () => {\n        this.setMultiState({\n          accountID: \"\",\n          isAccountIDSelectOpen: false\n        });\n      };\n\n    private handlePrincipalChange = (value: string): void => {\n        this.setMultiState({\n            accountId: value,\n            isValid: this.checkValid(value, this.state.role)\n        })\n    };\n\n    private onAccountIDSelect = (_event: any, selection: string | SelectOptionObject, isPlaceholder: boolean | undefined) => {\n        if (isPlaceholder) this.onAccountIDClearSelection();\n        else {\n          this.setMultiState({\n            accountId: selection,\n            isValid: this.checkValid(selection, this.state.role),\n            isAccountIDSelectOpen: false\n          });\n          console.log('selected:', selection);\n        }\n      };\n\n    private onAccountIDToggle = (isOpen: boolean) => {\n        this.setSingleState(\"isAccountIDSelectOpen\", isOpen);\n      };\n\n    private handleRoleChange = (_isChecked: boolean, event: any): void => {\n        this.setMultiState({\n            role: event.target.value,\n            isValid: this.checkValid(this.state.accountId, event.target.value)\n        })\n    };\n\n    private doGrantAccess = (): void => {\n        this.props.onGrant(this.state.accountId as string, \n            this.state.role as string,\n            this.props.roles?.find(role => role.principalId == this.state.accountId) !== undefined);\n        this.reset();\n    }\n\n    private checkValid(accountId: SelectOptionObject | string | undefined, role: string | undefined): boolean {\n        if (!accountId) {\n            return false;\n        }\n        if (!role) {\n            return false;\n        }\n        return true;\n    }\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from \"./grantAccessModal\"\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport \"./roleList.css\";\nimport {\n    Button,\n    Modal\n} from '@patternfly/react-core';\nimport { TableComposable, Thead, Tbody, Tr, Th, Td } from '@patternfly/react-table';\nimport { PureComponent, PureComponentProps, PureComponentState } from \"../../../../components\";\nimport { RoleMapping, RoleTypes } from \"../../../../../models\";\nimport { RoleMappingsEmptyState } from '../empty';\n\n/**\n * Properties\n */\nexport interface RoleListProps extends PureComponentProps {\n    roles: RoleMapping[];\n    roleFilter: RoleMapping;\n    onRevoke: (principalId: string) => void;\n    onEditRoleMapping: (role: RoleMapping) => void;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface RoleListState extends PureComponentState {\n    isRevokeModalOpen: boolean;\n    revokingPrincipalId: string;\n    currentRole: RoleMapping;\n}\n\n/**\n * Models the list of roles.\n */\nexport class RoleList extends PureComponent<RoleListProps, RoleListState> {\n\n    constructor(props: Readonly<RoleListProps>) {\n        super(props);\n    }\n  \n    public render(): React.ReactElement {\n\n        const roleActions = (role: RoleMapping) => [\n            {\n                title: 'Edit',\n                onClick: () => { this.props.onEditRoleMapping(role)}\n            },\n            {\n                title: 'Revoke Access',\n                onClick: () => {this.onRevokeRoleMapping(role.principalId)}\n            }\n        ];\n\n        let filteredRoles = this.props.roles.sort((rm1, rm2) => {\n            return rm1.principalId.localeCompare(rm2.principalId);\n        }).filter((role: RoleMapping)=>{\n            if(this.props.roleFilter.principalId.length > 0) {\n                return role.principalId.includes(this.props.roleFilter.principalId);\n            } \n            return true;\n        }).filter((role: RoleMapping)=>{\n            if (this.props.roleFilter.role.length > 0) {\n                switch (role.role) {\n                    case RoleTypes.DEVELOPER:\n                        return \"Manager\".includes(this.props.roleFilter.role);\n                    case RoleTypes.ADMIN:\n                        return \"Admin\".includes(this.props.roleFilter.role);\n                    case RoleTypes.READ_ONLY:\n                        return \"Viewer\".includes(this.props.roleFilter.role);\n                }\n            }\n            return true;\n        });\n        return (\n            filteredRoles.length === 0 ?\n                <RoleMappingsEmptyState isFiltered={true}/> :\n            <React.Fragment>\n                <TableComposable>\n                    <Thead>\n                        <Tr>\n                            {/* <Th\n                            /> */}\n                            <Th>Account</Th>\n                            <Th>Role</Th>\n                        </Tr>\n                    </Thead>\n                    <Tbody>\n                        {filteredRoles.map((role, rowIndex) =>\n\n                            <Tr key={rowIndex}>\n                                {/* Disable for now until we want to support multi-select.\n                                <Td\n                                    key={`${rowIndex}_0`}\n                                    select={{\n                                        rowIndex,\n                                        onSelect: this.onSelect,\n                                        isSelected: false,\n                                    }}\n                                /> */}\n                                <Td>{role.principalId}</Td>\n                                <Td>{this.roleName(role.role)}</Td>\n                                <Td className = \"role-list-action-column\"\n                                    key={`${rowIndex}_2`}\n                                    actions={{\n                                        items: roleActions(role)\n                                    }}\n                                />\n                            </Tr>\n                        )\n                        }\n                    </Tbody>\n                </TableComposable>\n                <Modal\n                    title=\"Revoke Access\"\n                    variant=\"small\"\n                    isOpen={this.state.isRevokeModalOpen}\n                    onClose={this.onRevokeModalClose}\n                    className=\"revoke-access-modal pf-m-redhat-font\"\n                    actions={[\n                        <Button key=\"revoke\" variant=\"primary\" data-testid=\"modal-btn-revoke\" onClick={this.doRevokeAccess}>Revoke</Button>,\n                        <Button key=\"cancel\" variant=\"link\" data-testid=\"modal-btn-cancel\" onClick={this.onRevokeModalClose}>Cancel</Button>\n                    ]}\n                >\n                    <p>Do you really want to revoke {this.state.revokingPrincipalId}'s access?</p>\n                </Modal>\n            </React.Fragment>\n        );\n    }\n\n    protected initializeState(): RoleListState {\n        return {\n            isRevokeModalOpen: false,\n            revokingPrincipalId: \"\",\n            currentRole: this.props.roles[0],\n        };\n    }\n\n    private roleName(role: string): string {\n        switch (role) {\n            case RoleTypes.DEVELOPER:\n                return \"Manager\";\n            case RoleTypes.ADMIN:\n                return \"Admin\";\n            case RoleTypes.READ_ONLY:\n                return \"Viewer\";\n        }\n        return role;\n    }\n\n    private onRevokeRoleMapping = (principalId: string) => {\n        this.setMultiState({\n            isRevokeModalOpen: true,\n            revokingPrincipalId: principalId\n        });    \n    };\n\n    private onRevokeModalClose = (): void => {\n        this.setSingleState(\"isRevokeModalOpen\", false);\n    };\n\n    private doRevokeAccess = (): void => {\n        this.onRevokeModalClose();\n        this.props.onRevoke(this.state.revokingPrincipalId);\n    }\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport * from \"./roleList\";\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./roles.css\";\nimport {\n    Button,\n    ButtonVariant,\n    Flex,\n    FlexItem,\n    InputGroup,\n    PageSection,\n    PageSectionVariants,\n    Select,\n    SelectOption,\n    SelectOptionObject,\n    SelectVariant,\n    TextContent,\n    TextInput,\n    Toolbar,\n    ToolbarContent,\n    ToolbarFilter,\n    ToolbarGroup,\n    ToolbarItem\n} from '@patternfly/react-core';\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport {PageComponent, PageProps, PageState} from \"../basePage\";\nimport {RoleMapping} from \"../../../models\";\nimport {Services} from \"../../../services\";\nimport {GrantAccessModal, RoleList, RoleMappingsEmptyState} from \"./components\";\nimport {PleaseWaitModal, RootPageHeader} from \"../../components\";\n\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface RolesPageProps extends PageProps {\n\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface RolesPageState extends PageState {\n    isCreateRoleMappingModalOpen: boolean;\n    isRoleMappingUpdate: boolean;\n    roles: RoleMapping[];\n    roleFilter: RoleMapping;\n    roleListFilterOpened: boolean;\n    roleFilterSelected: string;\n    roleFilterTextInputValue: string;\n    selectedRole: RoleMapping | undefined;\n    isPleaseWaitModalOpen: boolean;\n    pleaseWaitMessage: string;\n}\n\nconst roleFilterOptions = ['Account', 'Role'];\n/**\n * The global roles page.\n */\nexport class RolesPage extends PageComponent<RolesPageProps, RolesPageState> {\n\n\n    constructor(props: Readonly<RolesPageProps>) {\n        super(props);\n    }\n\n    public renderPage(): React.ReactElement {\n        return (\n            <React.Fragment>\n                <PageSection className=\"ps_roles-header\" variant={PageSectionVariants.light} padding={{ default : \"noPadding\" }}>\n                    <RootPageHeader tabKey={2} />\n                </PageSection>\n                <PageSection className=\"ps_roles-description\" variant={PageSectionVariants.light}>\n                    <Flex>\n                        <FlexItem>\n                            <TextContent>\n                                Manage access to the registry by granting/revoking roles to specific users.\n                            </TextContent>\n                        </FlexItem>\n                    </Flex>\n                </PageSection>\n                <PageSection variant={PageSectionVariants.default} isFilled={true} className=\"ps_role-section\">\n                    {\n                        this.state.roles.length === 0 ?\n                            <RoleMappingsEmptyState onCreateRoleMapping={this.onCreateRoleMapping}/>\n                            :\n                            <>\n                                <Toolbar id=\"toolbar\" clearAllFilters={() => {\n                                    this.setSingleState(\"roleFilter\", {\n                                        principalId: \"\",\n                                        role: \"\"\n                                    });\n                                }}>\n                                    <ToolbarContent>\n                                        <ToolbarGroup>\n                                            <ToolbarItem className=\"ps_role-filter-select-toolbar-item\">\n                                                <Select\n                                                    variant={SelectVariant.single}\n                                                    aria-label=\"Filter On\"\n                                                    onToggle={this.onRoleFilterToggle}\n                                                    onSelect={this.onRoleFilterSelect}\n                                                    selections={this.state.roleFilterSelected}\n                                                    isOpen={this.state.roleListFilterOpened}\n                                                >\n                                                    {roleFilterOptions.map((option, index) => (\n                                                        <SelectOption key={index} value={option} />\n                                                    ))}\n                                                </Select>\n                                            </ToolbarItem>\n                                            <ToolbarItem>\n                                                <InputGroup>\n                                                    <TextInput value={this.state.roleFilterTextInputValue} name=\"roleFilterInput\" id=\"roleFilterInput\" type=\"search\" aria-label=\"role filter input\" onChange={this.onRoleFilterInputChange} />\n                                                    <Button variant={ButtonVariant.control} aria-label=\"search button for search input\" onClick={this.onRoleFilterApplyClick}>\n                                                        <SearchIcon />\n                                                    </Button>\n                                                </InputGroup>\n                                            </ToolbarItem>\n                                            <ToolbarItem>\n                                                <Button variant=\"primary\" data-testid=\"btn-grant-access\" onClick={this.onCreateRoleMapping}>Grant Access</Button>\n                                            </ToolbarItem>\n                                            <ToolbarFilter chips={this.state.roleFilter.principalId.length > 0 ? [this.state.roleFilter.principalId] : undefined}\n                                                deleteChip={() => {\n                                                    this.setSingleState(\"roleFilter\", {\n                                                        principalId: \"\",\n                                                        role: this.state.roleFilter.role\n                                                    });\n                                                }}\n                                                categoryName=\"Account\"> </ToolbarFilter>\n                                            <ToolbarFilter chips={this.state.roleFilter.role.length > 0 ? [this.state.roleFilter.role] : undefined}\n                                                deleteChip={() => {\n                                                    this.setSingleState(\"roleFilter\", {\n                                                        principalId: this.state.roleFilter.principalId,\n                                                        role: \"\"\n                                                    });\n                                                }}\n                                                categoryName=\"Role\"> </ToolbarFilter>\n\n                                        </ToolbarGroup>\n                                    </ToolbarContent>\n                                </Toolbar>\n                                <RoleList roles={this.state.roles} roleFilter={this.state.roleFilter} onRevoke={this.onRevokeRoleMapping} onEditRoleMapping={this.onEditRoleMapping}></RoleList>\n                            </>}\n                </PageSection>\n                <GrantAccessModal isOpen={this.state.isCreateRoleMappingModalOpen}\n                    isUpdateAccess={this.state.isRoleMappingUpdate}\n                    onClose={this.closeRoleMappingModal}\n                    onGrant={this.createRoleMapping}\n                    roles={this.state.isRoleMappingUpdate ? this.state.roles : null}\n                    defaultRole={this.state.selectedRole} />\n                {this.state.isPleaseWaitModalOpen ? <PleaseWaitModal message={this.state.pleaseWaitMessage}\n                    isOpen={this.state.isPleaseWaitModalOpen} /> : <></>}\n            </React.Fragment>\n        );\n    }\n\n    protected initializePageState(): RolesPageState {\n        return {\n            isCreateRoleMappingModalOpen: false,\n            isPleaseWaitModalOpen: false,\n            isRoleMappingUpdate: false,\n            pleaseWaitMessage: \"\",\n            isLoading: true,\n            selectedRole: undefined,\n            roles: [],\n            roleFilter: { principalId: \"\", role: \"\" },\n            roleListFilterOpened: false,\n            roleFilterSelected: roleFilterOptions[0],\n            roleFilterTextInputValue: \"\"\n        };\n    }\n\n    // @ts-ignore\n    protected createLoaders(): Promise {\n        return Services.getAdminService().getRoleMappings().then(roles => {\n            this.setMultiState({\n                isLoading: false,\n                roles\n            });\n        });\n    }\n\n    private onRoleFilterToggle = (isExpanded: boolean): void => {\n        this.setSingleState(\"roleListFilterOpened\", isExpanded)\n    }\n\n    private onRoleFilterSelect = (_event: any, selection: string | SelectOptionObject, isPlaceholder: boolean | undefined) => {\n        this.setMultiState({\n            roleFilterSelected: selection,\n            roleListFilterOpened: false\n        });\n    };\n\n    private onRoleFilterInputChange = (value: string) => {\n        this.setSingleState(\"roleFilterTextInputValue\", value)\n    }\n    private onRoleFilterApplyClick = () => {\n        let newRoleMappingFilter: RoleMapping = {\n            principalId: this.state.roleFilterSelected == roleFilterOptions[0] ? this.state.roleFilterTextInputValue : this.state.roleFilter?.principalId,\n            role: this.state.roleFilterSelected == roleFilterOptions[1] ? this.state.roleFilterTextInputValue : this.state.roleFilter.role\n        }\n        this.setSingleState(\"roleFilter\", newRoleMappingFilter);\n    }\n    private onCreateRoleMapping = (): void => {\n        this.setSingleState(\"isCreateRoleMappingModalOpen\", true);\n    };\n\n    private closeRoleMappingModal = (): void => {\n        this.setMultiState({\n            selectedRole: undefined,\n            isRoleMappingUpdate: false,\n            isCreateRoleMappingModalOpen: false\n        });\n    };\n\n    private onEditRoleMapping = (role: RoleMapping) => {\n        this.setMultiState({\n            selectedRole: role,\n            isRoleMappingUpdate: true\n        })\n        this.onCreateRoleMapping();\n    }\n\n    private onUpdateRoleMapping = (principalId: string, role: string): void => {\n        this.pleaseWait(true, \"Granting access, please wait...\");\n        Services.getAdminService().updateRoleMapping(principalId, role).then((mapping) => {\n            let currentRoleMappings = this.state.roles;\n            currentRoleMappings.map((role, index) => {\n                if (role.principalId == mapping.principalId) {\n                    currentRoleMappings[index] = mapping;\n                    console.log(\"found role\")\n                }\n            })\n\n            this.pleaseWait(false, \"\");\n            this.setSingleState(\"roles\", [\n                ...currentRoleMappings\n            ]);\n        }).catch(e => this.handleServerError(e, \"Error updating access.\"));\n    };\n\n    private createRoleMapping = (principalId: string, role: string, isUpdate: boolean): void => {\n        this.closeRoleMappingModal();\n        if (isUpdate) {\n            this.onUpdateRoleMapping(principalId, role);\n        } else {\n            this.pleaseWait(true, \"Granting access, please wait...\");\n            Services.getAdminService().createRoleMapping(principalId, role).then((mapping) => {\n                this.pleaseWait(false, \"\");\n                this.setSingleState(\"roles\", [\n                    mapping, ...this.state.roles\n                ]);\n            }).catch(e => this.handleServerError(e, \"Error granting access.\"));\n        }\n    };\n\n    private onRevokeRoleMapping = (principalId: string): void => {\n        this.pleaseWait(true, `Revoking access for ${principalId}, please wait...`);\n        Services.getAdminService().deleteRoleMapping(principalId).then(() => {\n            this.pleaseWait(false, \"\");\n            this.removeMapping(principalId);\n        }).catch(e => this.handleServerError(e, \"Error revoking access.\"));\n    };\n\n    private pleaseWait = (isOpen: boolean, message: string): void => {\n        this.setMultiState({\n            isPleaseWaitModalOpen: isOpen,\n            pleaseWaitMessage: message\n        });\n    };\n\n    private removeMapping(principalId: string): void {\n        const newRoles: RoleMapping[] =\n            this.state.roles.filter(rm => {\n                return rm.principalId !== principalId;\n            });\n        this.setSingleState(\"roles\", newRoles);\n    }\n\n}\n"],"names":[],"sourceRoot":""}