{"version":3,"file":"9896.8ba27c97.js","mappings":"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","sources":["webpack://@apicurio/registry-ui/./src/app/pages/artifactVersion/components/modals/changeOwnerModal.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifactVersion/artifactVersion.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifactVersion/components/modals/editMetaDataModal.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifactVersion/components/modals/propertiesFormGroup.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifactVersion/components/pageheader/pageheader.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifactVersion/components/pageheader/version-selector.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifactVersion/components/tabs/content.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifactVersion/components/tabs/documentation.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifactVersion/components/tabs/errorTab.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifactVersion/components/tabs/info.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifactVersion/components/uploadForm/uploadForm.tsx"],"sourcesContent":["import React, { FunctionComponent, useEffect, useState } from \"react\";\nimport \"./editMetaDataModal.css\";\nimport { Button, Form, FormGroup, Modal, Text, TextInput } from \"@patternfly/react-core\";\nimport { Principal, Services } from \"../../../../../services\";\nimport { SelectPrincipalAccount } from \"../../../roles\";\n\n\n/**\n * Properties\n */\nexport type ChangeOwnerModalProps = {\n    isOpen: boolean;\n    currentOwner: string;\n    onClose: () => void;\n    onChangeOwner: (newOwner: string) => void;\n};\n\nexport const ChangeOwnerModal: FunctionComponent<ChangeOwnerModalProps> = (\n    { isOpen, onClose, currentOwner, onChangeOwner }: ChangeOwnerModalProps) => {\n\n    const [isValid, setValid] = useState(false);\n    const [newOwner, setNewOwner] = useState<string>();\n    const [isAccountToggled, setAccountToggled] = useState(false);\n    const principals: Principal[] | (() => Principal[]) | undefined = Services.getConfigService().principals();\n    const getPrincipals: () => Principal[] = (typeof principals === \"function\") ? (principals as () => Principal[]) : () => {\n        return principals || [];\n    };\n\n    // Validate the inputs.\n    useEffect(() => {\n        if (newOwner && newOwner.trim().length > 0 && newOwner !== currentOwner) {\n            setValid(true);\n        } else {\n            setValid(false);\n        }\n    }, [isOpen, newOwner]);\n\n    const onEscapePressed = () => {\n        if (!isAccountToggled) {\n            onClose();\n        }\n    };\n\n    return (\n        <Modal\n            title=\"Change owner\"\n            variant=\"medium\"\n            isOpen={isOpen}\n            onClose={onClose}\n            onEscapePress={onEscapePressed}\n            className=\"change-owner pf-m-redhat-font\"\n            actions={[\n                <Button key=\"edit\" variant=\"primary\" data-testid=\"modal-btn-edit\" onClick={() => { onChangeOwner(newOwner || \"\"); }} isDisabled={!isValid}>Change owner</Button>,\n                <Button key=\"cancel\" variant=\"link\" data-testid=\"modal-btn-cancel\" onClick={onClose}>Cancel</Button>\n            ]}\n        >\n            <Form>\n                <FormGroup label=\"Current owner\" fieldId=\"form-current-owner\">\n                    <Text>{ currentOwner }</Text>\n                </FormGroup>\n                <FormGroup label=\"New owner\" fieldId=\"form-new-owner\" isRequired={true}>\n                    {\n                        principals ?\n                            <SelectPrincipalAccount\n                                id={newOwner}\n                                onToggle={(isToggled) => {\n                                    setAccountToggled(isToggled);\n                                }}\n                                onIdUpdate={(id: string) => {\n                                    console.debug(\"=====> ID update: \", id);\n                                    setNewOwner(id);\n                                }}\n                                isUsersOnly={false}\n                                initialOptions={getPrincipals}\n                                isUpdateAccess={false}\n                            />:\n                            <TextInput\n                                isRequired={true}\n                                type=\"text\"\n                                id=\"form-new-owner\"\n                                data-testid=\"form-new-owner\"\n                                name=\"form-new-owner\"\n                                aria-describedby=\"form-new-owner-helper\"\n                                value={newOwner}\n                                onChange={setNewOwner}\n                            />\n                    }\n                </FormGroup>\n            </Form>\n        </Modal>\n    );\n\n};\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport \"./artifactVersion.css\";\nimport {\n    Breadcrumb,\n    BreadcrumbItem,\n    Button,\n    Modal,\n    PageSection,\n    PageSectionVariants,\n    Tab,\n    Tabs\n} from \"@patternfly/react-core\";\nimport { PageComponent, PageProps, PageState } from \"../basePage\";\nimport { ContentTabContent, DocumentationTabContent, InfoTabContent } from \"./components/tabs\";\nimport { ArtifactVersionPageHeader } from \"./components/pageheader\";\nimport { UploadVersionForm } from \"./components/uploadForm\";\nimport { Link } from \"react-router-dom\";\nimport { EditMetaDataModal } from \"./components/modals\";\nimport { InvalidContentModal } from \"../../components/modals\";\nimport { IfFeature } from \"../../components\";\nimport { ArtifactMetaData, ArtifactTypes, ContentTypes, Rule, SearchedVersion } from \"../../../models\";\nimport { CreateVersionData, EditableMetaData, Services } from \"../../../services\";\nimport { PleaseWaitModal } from \"../../components/modals/pleaseWaitModal\";\nimport { ChangeOwnerModal } from \"./components/modals/changeOwnerModal\";\n\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface ArtifactVersionPageProps extends PageProps {\n}\n\n/**\n * State\n */\nexport interface ArtifactVersionPageState extends PageState {\n    activeTabKey: number;\n    artifact: ArtifactMetaData | null;\n    artifactContent: string;\n    artifactIsText: boolean;\n    isInvalidContentModalOpen: boolean;\n    isUploadFormValid: boolean;\n    isUploadModalOpen: boolean;\n    isDeleteModalOpen: boolean;\n    isEditModalOpen: boolean;\n    isChangeOwnerModalOpen: boolean;\n    isPleaseWaitModalOpen: boolean;\n    pleaseWaitMessage: string;\n    rules: Rule[] | null;\n    uploadFormData: string | null;\n    versions: SearchedVersion[] | null;\n    invalidContentError: any | null;\n}\n\nfunction is404(e: any) {\n    if (typeof e === \"string\") {\n        try {\n            const eo: any = JSON.parse(e);\n            if (eo && eo.error_code && eo.error_code === 404) {\n                return true;\n            }\n        } catch (e) {\n            // Do nothing\n        }\n    }\n    return false;\n}\n\n/**\n * The artifact version page.\n */\nexport class ArtifactVersionPage extends PageComponent<ArtifactVersionPageProps, ArtifactVersionPageState> {\n\n    constructor(props: Readonly<ArtifactVersionPageProps>) {\n        super(props);\n    }\n\n    public renderPage(): React.ReactElement {\n        const artifact: ArtifactMetaData = this.state.artifact ? this.state.artifact : new ArtifactMetaData();\n        const tabs: React.ReactNode[] = [\n            <Tab eventKey={0} title=\"Overview\" key=\"overview\" tabContentId=\"tab-info\">\n                <InfoTabContent artifact={artifact}\n                                isLatest={this.versionParam() === \"latest\"}\n                                rules={this.rules()}\n                                onEnableRule={this.doEnableRule}\n                                onDisableRule={this.doDisableRule}\n                                onConfigureRule={this.doConfigureRule}\n                                onDownloadArtifact={this.doDownloadArtifact}\n                                onEditMetaData={this.openEditMetaDataModal}\n                                onChangeOwner={this.openChangeOwnerModal}\n                />\n            </Tab>,\n            <Tab eventKey={1} title=\"Documentation\" key=\"documentation\">\n                <DocumentationTabContent artifactContent={this.state.artifactContent} artifactType={artifact.type} />\n            </Tab>,\n            <Tab eventKey={2} title=\"Content\" key=\"content\">\n                <ContentTabContent artifactContent={this.state.artifactContent} artifactType={artifact.type} />\n            </Tab>,\n        ];\n        if (!this.showDocumentationTab()) {\n            tabs.splice(1, 1);\n        }\n\n        let groupId: string = this.groupIdParam();\n        let hasGroup: boolean = groupId != \"default\";\n        let breadcrumbs = (\n            <Breadcrumb>\n                <BreadcrumbItem><Link to={this.linkTo(\"/artifacts\")} data-testid=\"breadcrumb-lnk-artifacts\">Artifacts</Link></BreadcrumbItem>\n                <BreadcrumbItem><Link to={this.linkTo(`/artifacts?group=${ encodeURIComponent(groupId) }`)}\n                                      data-testid=\"breadcrumb-lnk-group\">{ groupId }</Link></BreadcrumbItem>\n                <BreadcrumbItem isActive={true}>{ this.artifactId() }</BreadcrumbItem>\n            </Breadcrumb>\n        );\n        if (!hasGroup) {\n            breadcrumbs = (\n                <Breadcrumb>\n                    <BreadcrumbItem><Link to=\"/artifacts\" data-testid=\"breadcrumb-lnk-artifacts\">Artifacts</Link></BreadcrumbItem>\n                    <BreadcrumbItem isActive={true}>{ this.artifactId() }</BreadcrumbItem>\n                </Breadcrumb>\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <IfFeature feature=\"breadcrumbs\" is={true}>\n                    <PageSection className=\"ps_header-breadcrumbs\" variant={PageSectionVariants.light} children={breadcrumbs} />\n                </IfFeature>\n                <PageSection className=\"ps_artifact-version-header\" variant={PageSectionVariants.light}>\n                    <ArtifactVersionPageHeader title={this.nameOrId()}\n                                               versions={this.versions()}\n                                               version={this.versionParam()}\n                                               onUploadVersion={this.onUploadVersion}\n                                               onDeleteArtifact={this.onDeleteArtifact}\n                                               groupId={groupId}\n                                               artifactId={this.artifactId()} />\n                </PageSection>\n                <PageSection variant={PageSectionVariants.light} isFilled={true} padding={{default : \"noPadding\"}} className=\"artifact-details-main\">\n                    <Tabs className=\"artifact-page-tabs\"\n                          id=\"artifact-page-tabs\"\n                          unmountOnExit={true}\n                          isFilled={false}\n                          activeKey={this.state.activeTabKey}\n                          children={tabs}\n                          onSelect={this.handleTabClick}\n                    />\n                </PageSection>\n                <Modal\n                    title=\"Upload Artifact Version\"\n                    variant=\"large\"\n                    isOpen={this.state.isUploadModalOpen}\n                    onClose={this.onUploadModalClose}\n                    className=\"upload-artifact-modal pf-m-redhat-font\"\n                    actions={[\n                        <Button key=\"upload\" variant=\"primary\" data-testid=\"modal-btn-upload\" onClick={this.doUploadArtifactVersion} isDisabled={!this.state.isUploadFormValid}>Upload</Button>,\n                        <Button key=\"cancel\" variant=\"link\" data-testid=\"modal-btn-cancel\" onClick={this.onUploadModalClose}>Cancel</Button>\n                    ]}\n                >\n                    <UploadVersionForm onChange={this.onUploadFormChange} onValid={this.onUploadFormValid} />\n                </Modal>\n                <Modal\n                    title=\"Delete Artifact\"\n                    variant=\"small\"\n                    isOpen={this.state.isDeleteModalOpen}\n                    onClose={this.onDeleteModalClose}\n                    className=\"delete-artifact-modal pf-m-redhat-font\"\n                    actions={[\n                        <Button key=\"delete\" variant=\"primary\" data-testid=\"modal-btn-delete\" onClick={this.doDeleteArtifact}>Delete</Button>,\n                        <Button key=\"cancel\" variant=\"link\" data-testid=\"modal-btn-cancel\" onClick={this.onDeleteModalClose}>Cancel</Button>\n                    ]}\n                >\n                    <p>Do you want to delete this artifact and all of its versions?  This action cannot be undone.</p>\n                </Modal>\n                <EditMetaDataModal name={this.artifactName()}\n                                   description={this.artifactDescription()}\n                                   labels={this.artifactLabels()}\n                                   properties={this.artifactProperties()}\n                                   isOpen={this.state.isEditModalOpen}\n                                   onClose={this.onEditModalClose}\n                                   onEditMetaData={this.doEditMetaData}\n                />\n                <ChangeOwnerModal isOpen={this.state.isChangeOwnerModalOpen}\n                                  onClose={this.onChangeOwnerModalClose}\n                                  currentOwner={this.state.artifact?.createdBy || \"\"}\n                                  onChangeOwner={this.doChangeOwner}\n                />\n                <InvalidContentModal error={this.state.invalidContentError}\n                                     isOpen={this.state.isInvalidContentModalOpen}\n                                     onClose={this.closeInvalidContentModal} />\n                <PleaseWaitModal message={this.state.pleaseWaitMessage}\n                                 isOpen={this.state.isPleaseWaitModalOpen} />\n            </React.Fragment>\n        );\n    }\n\n    protected initializePageState(): ArtifactVersionPageState {\n        return {\n            activeTabKey: 0,\n            artifact: null,\n            artifactContent: \"\",\n            artifactIsText: true,\n            invalidContentError: null,\n            isDeleteModalOpen: false,\n            isEditModalOpen: false,\n            isChangeOwnerModalOpen: false,\n            isInvalidContentModalOpen: false,\n            isPleaseWaitModalOpen: false,\n            isUploadFormValid: false,\n            isUploadModalOpen: false,\n            pleaseWaitMessage: \"\",\n            rules: null,\n            uploadFormData: null,\n            versions: null\n        };\n    }\n\n    protected groupIdParam(): string {\n        return this.getPathParam(\"groupId\");\n    }\n\n    protected artifactIdParam(): string {\n        return this.getPathParam(\"artifactId\");\n    }\n\n    protected versionParam(): string {\n        return this.getPathParam(\"version\");\n    }\n\n    // @ts-ignore\n    protected createLoaders(): Promise[] | null {\n        let groupId: string|null = this.groupIdParam();\n        if (groupId == \"default\") {\n            groupId = null;\n        }\n        const artifactId: string = this.artifactIdParam();\n        Services.getLoggerService().info(\"Loading data for artifact: \", artifactId);\n        return [\n            Services.getGroupsService().getArtifactMetaData(groupId, artifactId, this.versionParam()).then(md => this.setSingleState(\"artifact\", md)),\n            Services.getGroupsService().getArtifactContent(groupId, artifactId, this.versionParam())\n                .then(content => this.setSingleState(\"artifactContent\", content))\n                .catch(e => {\n                    Services.getLoggerService().warn(\"Failed to get artifact content: \", e);\n                    if (is404(e)) {\n                        this.setSingleState(\"artifactContent\", \"Artifact version content not available (404 Not Found).\");\n                    } else {\n                        throw e;\n                    }\n                }\n            ),\n            Services.getGroupsService().getArtifactRules(groupId, artifactId).then(rules => this.setSingleState(\"rules\", rules)),\n            Services.getGroupsService().getArtifactVersions(groupId, artifactId).then(versions => this.setSingleState(\"versions\", versions.reverse()))\n        ];\n    }\n\n    private handleTabClick = (event: any, tabIndex: any): void => {\n        this.setSingleState(\"activeTabKey\", tabIndex);\n    };\n\n    private onUploadVersion = (): void => {\n        this.setSingleState(\"isUploadModalOpen\", true);\n    };\n\n    private onDeleteArtifact = (): void => {\n        this.setSingleState(\"isDeleteModalOpen\", true);\n    };\n\n    private showDocumentationTab(): boolean {\n        if (this.state.artifact) {\n            return (this.state.artifact.type === \"OPENAPI\" || this.state.artifact.type === \"ASYNCAPI\") && this.state.artifact.state !== \"DISABLED\";\n        } else {\n            return false;\n        }\n    }\n\n    private rules(): Rule[] {\n        return this.state.rules ? this.state.rules : [];\n    }\n\n    private doEnableRule = (ruleType: string): void => {\n        Services.getLoggerService().debug(\"[ArtifactVersionPage] Enabling rule:\", ruleType);\n        let config: string = \"FULL\";\n        if (ruleType === \"COMPATIBILITY\") {\n            config = \"BACKWARD\";\n        }\n        Services.getGroupsService().createArtifactRule(this.groupId(), this.artifactId(), ruleType, config).catch(error => {\n            this.handleServerError(error, `Error enabling \"${ ruleType }\" artifact rule.`);\n        });\n        this.setSingleState(\"rules\", [...this.rules(), {config, type: ruleType}]);\n    };\n\n    private doDisableRule = (ruleType: string): void => {\n        Services.getLoggerService().debug(\"[ArtifactVersionPage] Disabling rule:\", ruleType);\n        Services.getGroupsService().deleteArtifactRule(this.groupId(), this.artifactId(), ruleType).catch(error => {\n            this.handleServerError(error, `Error disabling \"${ ruleType }\" artifact rule.`);\n        });\n        this.setSingleState(\"rules\", this.rules().filter(r => r.type !== ruleType));\n    };\n\n    private doConfigureRule = (ruleType: string, config: string): void => {\n        Services.getLoggerService().debug(\"[ArtifactVersionPage] Configuring rule:\", ruleType, config);\n        Services.getGroupsService().updateArtifactRule(this.groupId(), this.artifactId(), ruleType, config).catch(error => {\n            this.handleServerError(error, `Error configuring \"${ ruleType }\" artifact rule.`);\n        });\n        this.setSingleState(\"rules\", this.rules().map(r => {\n            if (r.type === ruleType) {\n                return {config, type: r.type};\n            } else {\n                return r;\n            }\n        }));\n    };\n\n    private doDownloadArtifact = (): void => {\n        const content: string = this.state.artifactContent;\n\n        let contentType: string = ContentTypes.APPLICATION_JSON;\n        let fext: string = \"json\";\n        if (this.state.artifact?.type === ArtifactTypes.PROTOBUF) {\n            contentType = ContentTypes.APPLICATION_PROTOBUF;\n            fext = \"proto\";\n        }\n        if (this.state.artifact?.type === ArtifactTypes.WSDL) {\n            contentType = ContentTypes.APPLICATION_XML;\n            fext = \"wsdl\";\n        }\n        if (this.state.artifact?.type === ArtifactTypes.XSD) {\n            contentType = ContentTypes.APPLICATION_XML;\n            fext = \"xsd\";\n        }\n        if (this.state.artifact?.type === ArtifactTypes.XML) {\n            contentType = ContentTypes.APPLICATION_XML;\n            fext = \"xml\";\n        }\n        if (this.state.artifact?.type === ArtifactTypes.GRAPHQL) {\n            contentType = ContentTypes.APPLICATION_JSON;\n            fext = \"graphql\";\n        }\n\n        const fname: string = this.artifactNameOrId() + \".\" + fext;\n        Services.getDownloaderService().downloadToFS(content, contentType, fname);\n    };\n\n    private nameOrId(): string {\n        if (!this.state.artifact) {\n            return \"\";\n        }\n        return this.state.artifact.name ? this.state.artifact.name : this.state.artifact.id;\n    }\n\n    private versions(): SearchedVersion[] {\n        return this.state.versions ? this.state.versions : [];\n    }\n\n    private artifactId(): string {\n        return this.state.artifact ? this.state.artifact.id : \"\";\n    }\n\n    private groupId(): string|null {\n        return this.state.artifact ? this.state.artifact.groupId : null;\n    }\n\n    private artifactType(): string {\n        return this.state.artifact ? this.state.artifact.type : \"\";\n    }\n\n    private artifactNameOrId(): string {\n        return this.state.artifact ? (\n            this.state.artifact.name ? this.state.artifact.name : this.state.artifact.id\n        ) : \"\";\n    }\n\n    private artifactName(): string {\n        return this.state.artifact ? (\n            this.state.artifact.name ? this.state.artifact.name : \"\"\n        ) : \"\";\n    }\n\n    private artifactDescription(): string {\n        return this.state.artifact ? (\n            this.state.artifact.description ? this.state.artifact.description : \"\"\n        ) : \"\";\n    }\n\n    private artifactLabels(): string[] {\n        return this.state.artifact ? (\n            this.state.artifact.labels ? this.state.artifact.labels : []\n        ) : [];\n    }\n\n    private artifactProperties(): { [key: string]: string } {\n        return this.state.artifact?.properties || {};\n    }\n\n    private onUploadFormValid = (isValid: boolean): void => {\n        this.setSingleState(\"isUploadFormValid\", isValid);\n    };\n\n    private onUploadFormChange = (data: string): void => {\n        this.setSingleState(\"uploadFormData\", data);\n    };\n\n    private onUploadModalClose = (): void => {\n        this.setSingleState(\"isUploadModalOpen\", false);\n    };\n\n    private onDeleteModalClose = (): void => {\n        this.setSingleState(\"isDeleteModalOpen\", false);\n    };\n\n    private doUploadArtifactVersion = (): void => {\n        this.onUploadModalClose();\n        this.pleaseWait(true, \"Uploading new version, please wait...\");\n        if (this.state.uploadFormData !== null) {\n            const data: CreateVersionData = {\n                content: this.state.uploadFormData,\n                type: this.artifactType()\n            };\n            Services.getGroupsService().createArtifactVersion(this.groupId(), this.artifactId(), data).then(versionMetaData => {\n                const groupId: string = versionMetaData.groupId ? versionMetaData.groupId : \"default\";\n                const artifactVersionLocation: string = `/artifacts/${ encodeURIComponent(groupId) }/${ encodeURIComponent(versionMetaData.id) }/versions/${versionMetaData.version}`;\n                Services.getLoggerService().info(\"[ArtifactVersionPage] Artifact version successfully uploaded.  Redirecting to details: \", artifactVersionLocation);\n                this.navigateTo(this.linkTo(artifactVersionLocation))();\n            }).catch( error => {\n                this.pleaseWait(false, \"\");\n                if (error && (error.error_code === 400 || error.error_code === 409)) {\n                    this.handleInvalidContentError(error);\n                } else {\n                    this.handleServerError(error, \"Error uploading artifact version.\");\n                }\n                this.setMultiState({uploadFormData: null, isUploadFormValid: false});\n            });\n        }\n    };\n\n    private doDeleteArtifact = (): void => {\n        this.onDeleteModalClose();\n        this.pleaseWait(true, \"Deleting artifact, please wait...\");\n        Services.getGroupsService().deleteArtifact(this.groupId(), this.artifactId()).then( () => {\n            this.pleaseWait(false, \"\");\n            this.navigateTo(this.linkTo(\"/artifacts\"))();\n        });\n    };\n\n    private openEditMetaDataModal = (): void => {\n        this.setSingleState(\"isEditModalOpen\", true);\n    };\n\n    private openChangeOwnerModal = (): void => {\n        this.setSingleState(\"isChangeOwnerModalOpen\", true);\n    };\n\n    private onEditModalClose = (): void => {\n        this.setSingleState(\"isEditModalOpen\", false);\n    };\n\n    private onChangeOwnerModalClose = (): void => {\n        this.setSingleState(\"isChangeOwnerModalOpen\", false);\n    };\n\n    private doEditMetaData = (metaData: EditableMetaData): void => {\n        Services.getGroupsService().updateArtifactMetaData(this.groupId(), this.artifactId(), this.versionParam(), metaData).then( () => {\n            if (this.state.artifact) {\n                this.setSingleState(\"artifact\", {\n                    ...this.state.artifact,\n                    ...metaData\n                });\n            }\n        }).catch( error => {\n            this.handleServerError(error, \"Error editing artifact metadata.\");\n        });\n        this.onEditModalClose();\n    };\n\n    private doChangeOwner = (newOwner: string): void => {\n        Services.getGroupsService().updateArtifactOwner(this.groupId(), this.artifactId(), newOwner).then( () => {\n            if (this.state.artifact) {\n                this.setSingleState(\"artifact\", {\n                    ...this.state.artifact,\n                    createdBy: newOwner\n                });\n            }\n        }).catch( error => {\n            this.handleServerError(error, \"Error changing artifact ownership.\");\n        });\n        this.onChangeOwnerModalClose();\n    };\n\n    private closeInvalidContentModal = (): void => {\n        this.setSingleState(\"isInvalidContentModalOpen\", false);\n    };\n\n    private pleaseWait = (isOpen: boolean, message: string): void => {\n        this.setMultiState({\n            isPleaseWaitModalOpen: isOpen,\n            pleaseWaitMessage: message\n        });\n    };\n\n    private handleInvalidContentError(error: any): void {\n        Services.getLoggerService().info(\"INVALID CONTENT ERROR\", error);\n        this.setMultiState({\n            invalidContentError: error,\n            isInvalidContentModalOpen: true\n        });\n    }\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport \"./editMetaDataModal.css\";\nimport { PureComponent, PureComponentProps, PureComponentState } from \"../../../../components\";\nimport { Button, Form, FormGroup, Grid, GridItem, Modal, TextArea, TextInput } from \"@patternfly/react-core\";\nimport { EditableMetaData } from \"../../../../../services\";\nimport { ArtifactProperty, listToProperties, PropertiesFormGroup, propertiesToList } from \"./propertiesFormGroup\";\n\n\n/**\n * Properties\n */\nexport interface EditMetaDataModalProps extends PureComponentProps {\n    name: string;\n    description: string;\n    labels: string[];\n    properties: { [key: string]: string|undefined };\n    isOpen: boolean;\n    onClose: () => void;\n    onEditMetaData: (metaData: EditableMetaData) => void;\n}\n\n/**\n * State\n */\nexport interface EditMetaDataModalState extends PureComponentState {\n    labels: string;\n    properties: ArtifactProperty[];\n    metaData: EditableMetaData;\n    isValid: boolean;\n}\n\n/**\n * Models the toolbar for the Artifacts page.\n */\nexport class EditMetaDataModal extends PureComponent<EditMetaDataModalProps, EditMetaDataModalState> {\n\n    constructor(props: Readonly<EditMetaDataModalProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <Modal\n                title=\"Edit version metadata\"\n                variant=\"large\"\n                isOpen={this.props.isOpen}\n                onClose={this.props.onClose}\n                className=\"edit-artifact-metaData pf-m-redhat-font\"\n                actions={[\n                    <Button key=\"edit\" variant=\"primary\" data-testid=\"modal-btn-edit\" onClick={this.doEdit} isDisabled={!this.state.isValid}>Save</Button>,\n                    <Button key=\"cancel\" variant=\"link\" data-testid=\"modal-btn-cancel\" onClick={this.props.onClose}>Cancel</Button>\n                ]}\n            >\n                <Form>\n                    <Grid hasGutter md={6}>\n                        <GridItem span={12}>\n                            <FormGroup\n                                label=\"Name\"\n                                fieldId=\"form-name\"\n                            >\n                                <TextInput\n                                    isRequired={false}\n                                    type=\"text\"\n                                    id=\"form-name\"\n                                    data-testid=\"form-name\"\n                                    name=\"form-name\"\n                                    aria-describedby=\"form-name-helper\"\n                                    value={this.state.metaData.name}\n                                    placeholder=\"Name of the artifact\"\n                                    onChange={this.onNameChange}\n                                />\n                            </FormGroup>\n                        </GridItem>\n\n                        <GridItem span={12}>\n                            <FormGroup\n                                label=\"Description\"\n                                fieldId=\"form-description\"\n                            >\n                                <TextArea\n                                    isRequired={false}\n                                    id=\"form-description\"\n                                    data-testid=\"form-description\"\n                                    name=\"form-description\"\n                                    aria-describedby=\"form-description-helper\"\n                                    value={this.state.metaData.description}\n                                    placeholder=\"Description of the artifact\"\n                                    onChange={this.onDescriptionChange}\n                                />\n                            </FormGroup>\n                        </GridItem>\n\n                        <GridItem span={12}>\n                            <FormGroup\n                                label=\"Labels\"\n                                fieldId=\"form-labels\"\n                                helperText=\"A comma-separated list of labels to apply to the artifact.\"\n                            >\n                                <TextInput\n                                    isRequired={false}\n                                    type=\"text\"\n                                    id=\"form-labels\"\n                                    data-testid=\"form-labels\"\n                                    name=\"form-labels\"\n                                    aria-describedby=\"form-labels-helper\"\n                                    value={this.state.labels}\n                                    placeholder=\"Artifact labels\"\n                                    onChange={this.onLabelsChange}\n                                />\n                            </FormGroup>\n                        </GridItem>\n                        <PropertiesFormGroup properties={this.state.properties}\n                                             onChange={this.onPropertiesChange} />\n                    </Grid>\n                </Form>\n            </Modal>\n        );\n    }\n\n    public componentDidUpdate(prevProps: Readonly<EditMetaDataModalProps>): void {\n        if (this.props.isOpen && !prevProps.isOpen) {\n            this.setMultiState({\n                labels: this.props.labels.join(\", \"),\n                properties: propertiesToList(this.props.properties),\n                metaData: {\n                    description: this.props.description,\n                    labels: this.props.labels,\n                    properties: this.props.properties,\n                    name: this.props.name\n                },\n                isValid: true\n            });\n        }\n    }\n\n    protected initializeState(): EditMetaDataModalState {\n        return {\n            labels: \"\",\n            properties: [],\n            isValid: true,\n            metaData: {\n                description: \"\",\n                labels: [],\n                properties: {},\n                name: \"\"\n            }\n        };\n    }\n\n    private doEdit = (): void => {\n        const metaData: EditableMetaData = {\n            ...this.state.metaData,\n            properties: listToProperties(this.state.properties)\n        }\n        this.props.onEditMetaData(metaData);\n    };\n\n    private onNameChange = (value: string): void => {\n        this.setSingleState(\"metaData\", {\n            ...this.state.metaData,\n            name: value\n        }, () => {\n            this.validate();\n        });\n    };\n\n    private onLabelsChange = (value: string): void => {\n        let labels: string[] = [];\n        if (value && value.trim().length > 0) {\n            labels = value.trim().split(\",\").map(item => item.trim());\n        }\n        this.setMultiState({\n            labels: value,\n            metaData: {\n                ...this.state.metaData,\n                labels\n            }\n        }, () => {\n            this.validate();\n        });\n    };\n\n    private onDescriptionChange = (value: string): void => {\n        this.setSingleState(\"metaData\", {\n            ...this.state.metaData,\n            description: value\n        }, () => {\n            this.validate();\n        });\n    };\n\n    private onPropertiesChange = (properties: ArtifactProperty[]): void => {\n        this.setSingleState(\"properties\", properties, () => {\n            this.validate();\n        });\n    };\n\n    private validate = (): void => {\n        const properties: ArtifactProperty[] = [...this.state.properties];\n        let isValid: boolean = true;\n        if (properties) {\n            let propertyKeys: string[] = [];\n            properties.forEach(property => {\n                property.nameValidated = \"default\";\n                if ((property.name === \"\" || property.name === undefined) && property.value !== \"\") {\n                    property.nameValidated = \"error\";\n                    isValid = false;\n                } else if (property.name !== \"\" && property.name !== undefined) {\n                    if (propertyKeys.includes(property.name)) {\n                        property.nameValidated = \"error\";\n                        isValid = false;\n                    }\n                    propertyKeys.push(property.name);\n                }\n            });\n        }\n        this.setMultiState({\n            isValid,\n            properties\n        });\n    };\n\n}\n","import React, { FunctionComponent } from \"react\";\nimport { Button, FormGroup, GridItem, TextInput } from \"@patternfly/react-core\";\nimport { MinusCircleIcon, PlusCircleIcon } from \"@patternfly/react-icons\";\n\nexport type ArtifactProperty = {\n    name: string;\n    value: string | undefined;\n    nameValidated: 'success' | 'warning' | 'error' | 'default';\n    valueValidated: 'success' | 'warning' | 'error' | 'default';\n}\n\n/**\n * Properties\n */\nexport type PropertiesFormGroupProps = {\n    properties: ArtifactProperty[];\n    onChange: (properties: ArtifactProperty[]) => void;\n};\n\n\nexport function propertiesToList(properties: { [key: string]: string|undefined }): ArtifactProperty[] {\n    const rval: ArtifactProperty[] = Object.keys(properties).filter((key) => key !== undefined).map(key => {\n        return {\n            name: key,\n            value: properties[key],\n            nameValidated: \"default\",\n            valueValidated: \"default\"\n        };\n    });\n    return rval;\n}\n\nexport function listToProperties(properties: ArtifactProperty[]): { [key: string]: string|undefined } {\n    const rval: { [key: string]: string|undefined } = {};\n    properties.forEach(property => {\n        if (property.name) {\n            rval[property.name] = property.value;\n        }\n    });\n    return rval;\n}\n\nexport const PropertiesFormGroup: FunctionComponent<PropertiesFormGroupProps> = ({properties, onChange}: PropertiesFormGroupProps) => {\n\n    const addArtifactProperty = (): void => {\n        const newProps: ArtifactProperty[] = [...properties, {\n            name: \"\",\n            value: \"\",\n            nameValidated: \"default\",\n            valueValidated: \"default\"\n        }];\n        onChange(newProps);\n    };\n\n    const removeProperty = (propertyToRemove: ArtifactProperty): void => {\n        const newProps: ArtifactProperty[] = properties.filter(property => property !== propertyToRemove);\n        onChange(newProps);\n    };\n\n    return (\n        <React.Fragment>\n            <GridItem span={12}>\n                <label className=\"pf-c-form__label\"><span className=\"pf-c-form__label-text\">Properties</span></label>\n            </GridItem>\n            {\n                properties.map((property, idx) => (\n                    <React.Fragment key={idx}>\n                        <FormGroup\n                            fieldId={`form-properties-key-${idx}`}\n                            isRequired={true}\n                            label={idx === 0 ? \"Key\" : \"\"}>\n                            <TextInput\n                                type=\"text\"\n                                placeholder=\"Enter key\"\n                                id={`form-properties-key-${idx}`}\n                                name={`form-properties-key-${idx}`}\n                                validated={property.nameValidated}\n                                value={property.name}\n                                onChange={(newVal) => {\n                                    property.name = newVal;\n                                    onChange([...properties]);\n                                }}\n                            />\n                        </FormGroup>\n                        <FormGroup\n                            fieldId={`form-properties-value-${idx}`}\n                            label={idx === 0 ? \"Value\" : \"\"}\n                            validated={property.valueValidated}\n                            helperTextInvalid={\"\"}>\n                            <div className=\"prop-value-group\">\n                                <TextInput\n                                    type=\"text\"\n                                    id={`form-properties-value-${idx}`}\n                                    placeholder=\"Enter value\"\n                                    name={`form-properties-value-${idx}`}\n                                    validated={property.valueValidated}\n                                    value={property.value}\n                                    onChange={(newVal) => {\n                                        property.value = newVal;\n                                        onChange([...properties]);\n                                    }}\n                                />\n                                <Button key={\"remove-button-new\"} variant=\"link\"\n                                        icon={<MinusCircleIcon />} iconPosition=\"right\"\n                                        className=\"pf-m-plain\" onClick={() => {\n                                            removeProperty(property)\n                                        }} />\n                            </div>\n                        </FormGroup>\n                    </React.Fragment>\n                ))\n            }\n            <GridItem span={12}>\n                <Button variant=\"link\" icon={<PlusCircleIcon />} className=\"add-property-button\" onClick={() => addArtifactProperty()}>\n                    Add property\n                </Button>{\" \"}\n            </GridItem>\n        </React.Fragment>\n    );\n};\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./pageheader.css\";\nimport { Button, Flex, FlexItem, Text, TextContent, TextVariants } from \"@patternfly/react-core\";\nimport { IfAuth, PureComponent, PureComponentProps, PureComponentState } from \"../../../../components\";\nimport { VersionSelector } from \"./version-selector\";\nimport { IfFeature } from \"../../../../components/common/ifFeature\";\nimport { SearchedVersion } from \"../../../../../models\";\n\n\n/**\n * Properties\n */\nexport interface ArtifactVersionPageHeaderProps extends PureComponentProps {\n    title: string;\n    groupId: string;\n    artifactId: string;\n    onDeleteArtifact: () => void;\n    onUploadVersion: () => void;\n    version: string;\n    versions: SearchedVersion[];\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface ArtifactVersionPageHeaderState extends PureComponentState {\n}\n\n\n/**\n * Models the page header for the Artifact page.\n */\nexport class ArtifactVersionPageHeader extends PureComponent<ArtifactVersionPageHeaderProps, ArtifactVersionPageHeaderState> {\n\n    constructor(props: Readonly<ArtifactVersionPageHeaderProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <Flex className=\"example-border\">\n                <FlexItem>\n                    <TextContent>\n                        <Text component={TextVariants.h1}>{ this.props.title }</Text>\n                    </TextContent>\n                </FlexItem>\n                <FlexItem align={{ default : 'alignRight' }}>\n                    <VersionSelector version={this.props.version} versions={this.props.versions}\n                                     groupId={this.props.groupId} artifactId={this.props.artifactId} />\n                    <IfAuth isDeveloper={true}>\n                        <IfFeature feature=\"readOnly\" isNot={true}>\n                            <Button id=\"delete-artifact-button\" variant=\"secondary\" data-testid=\"header-btn-delete\" onClick={this.props.onDeleteArtifact}>Delete</Button>\n                            <Button id=\"upload-version-button\" variant=\"primary\" data-testid=\"header-btn-upload-version\" onClick={this.props.onUploadVersion}>Upload new version</Button>\n                        </IfFeature>\n                    </IfAuth>\n                </FlexItem>\n            </Flex>\n        );\n    }\n\n    protected initializeState(): ArtifactVersionPageHeaderState {\n        return {};\n    }\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./version-selector.css\";\nimport { Button, ButtonVariant, Dropdown, DropdownToggle, InputGroup, TextInput } from \"@patternfly/react-core\";\nimport { PureComponent, PureComponentProps, PureComponentState } from \"../../../../components\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport Moment from \"react-moment\";\nimport { Link } from \"react-router-dom\";\nimport { SearchedVersion } from \"../../../../../models\";\nimport { Services } from \"../../../../../services\";\n\n\n/**\n * Properties\n */\nexport interface VersionSelectorProps extends PureComponentProps {\n    groupId: string;\n    artifactId: string;\n    version: string;\n    versions: SearchedVersion[];\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface VersionSelectorState extends PureComponentState {\n    isOpen: boolean;\n}\n\n\n/**\n * Models the page header for the Artifact page.\n */\nexport class VersionSelector extends PureComponent<VersionSelectorProps, VersionSelectorState> {\n\n    constructor(props: Readonly<VersionSelectorProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <Dropdown\n                className={this.dropdownClasses()}\n                toggle={<DropdownToggle data-testid=\"versions-toggle\" onToggle={this.onToggle}>Version: { this.props.version }</DropdownToggle>}\n                isOpen={this.state.isOpen}\n            >\n                <div className=\"version-filter\" style={{display: \"none\"}}>\n                    <InputGroup>\n                        <TextInput name=\"filter\" id=\"versionFilter\" type=\"search\" data-testid=\"versions-form-filter\" aria-label=\"Version filter\" />\n                        <Button variant={ButtonVariant.control} data-testid=\"versions-form-btn-search\" aria-label=\"search button for search input\">\n                            <SearchIcon />\n                        </Button>\n                    </InputGroup>\n                </div>\n                <div className=\"version-header\">\n                    <div className=\"version-item\">\n                        <span className=\"name\">Version</span>\n                        <span className=\"date\">Created On</span>\n                    </div>\n                </div>\n                <div className=\"version-list\">\n                    <Link key=\"latest\"\n                          data-testid=\"versions-lnk-latest\"\n                          to={this.linkTo(`/artifacts/${encodeURIComponent(this.props.groupId)}/${encodeURIComponent(this.props.artifactId)}/versions/latest`)}\n                          className=\"version-item latest\">\n                        <span className=\"name\">latest</span>\n                        <span className=\"date\" />\n                    </Link>\n                    {\n                        this.props.versions.map((v, idx) =>\n                            <Link key={v.version}\n                                  data-testid={`versions-lnk-${idx}`}\n                                  to={this.linkTo(`/artifacts/${encodeURIComponent(this.props.groupId)}/${encodeURIComponent(this.props.artifactId)}/versions/${v.version}`)}\n                                  className=\"version-item\">\n                                <span className=\"name\">{ v.version }</span>\n                                <span className=\"date\"><Moment date={v.createdOn} fromNow={true} /></span>\n                            </Link>\n                        )\n                    }\n                </div>\n            </Dropdown>\n        );\n    }\n\n    protected initializeState(): VersionSelectorState {\n        return {\n            isOpen: false\n        };\n    }\n\n    private dropdownClasses(): string {\n        const classes: string[] = [ \"version-selector-dropdown\" ];\n        if (Services.getConfigService().featureReadOnly()) {\n            classes.push(\"dropdown-align-right\");\n        }\n        return classes.join(' ');\n    }\n\n    private onToggle = (isOpen: boolean): void => {\n        this.setSingleState(\"isOpen\", isOpen);\n    };\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./content.css\";\nimport { PureComponent, PureComponentProps, PureComponentState } from \"../../../../components\";\nimport { ToggleGroup, ToggleGroupItem } from \"@patternfly/react-core\";\nimport { Services } from \"../../../../../services\";\nimport AceEditor from \"react-ace\";\nimport \"ace-builds/src-noconflict/mode-json\";\nimport \"ace-builds/src-noconflict/mode-yaml\";\nimport \"ace-builds/src-noconflict/mode-protobuf\";\nimport \"ace-builds/src-noconflict/mode-xml\";\nimport \"ace-builds/src-noconflict/mode-graphqlschema\";\nimport \"ace-builds/src-noconflict/theme-monokai\";\nimport YAML from \"yaml\";\n\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface ContentTabContentProps extends PureComponentProps {\n    artifactContent: string;\n    artifactType: string;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface ContentTabContentState extends PureComponentState {\n    content: string;\n    editorMode: string;\n    editorWidth: string;\n    editorHeight: string;\n}\n\n\n/**\n * Models the content of the Artifact Info tab.\n */\nexport class ContentTabContent extends PureComponent<ContentTabContentProps, ContentTabContentState> {\n\n    constructor(props: Readonly<ContentTabContentProps>) {\n        super(props);\n    }\n\n    public componentDidMount(): void {\n        // TODO do this again whenever the browser is resized!\n        const elem: HTMLElement|null = document.getElementById(\"ace-wrapper\");\n        if (elem) {\n            const height: number|null = elem.clientHeight;\n            if (height) {\n                this.setSingleState(\"editorHeight\", height + \"px\");\n            }\n        }\n    }\n\n    public compactYamlJson(): boolean {\n        // TODO do this again whenever the browser is resized!\n        const elem: HTMLElement|null = document.getElementById(\"ace-wrapper\");\n        if (elem) {\n            const width: number|null = elem.clientWidth;\n            if (width && width > 500) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private switchJsonYaml = (mode: string): (() => void) => {\n        return () => {\n            if (mode === this.state.editorMode) {\n                return;\n            } else {\n                let content: string = `Error formatting code to: ${mode}`;\n                try {\n                    if (mode === \"yaml\") {\n                        content = YAML.stringify(JSON.parse(this.props.artifactContent), null, 4);\n                    } else {\n                        content = JSON.stringify(YAML.parse(this.props.artifactContent), null, 2);\n                    }\n                } catch (e) {\n                    this.handleInvalidContentError(e);\n                }\n                this.setState({\n                    editorMode: mode,\n                    content: content\n                });\n            }\n        };\n    };\n\n    private handleInvalidContentError(error: any): void {\n        Services.getLoggerService().info(\"[Content] Invalid content error:\", error);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <div className=\"ace-wrapper\" id=\"ace-wrapper\">\n                { !(this.state.editorMode === \"json\" || this.state.editorMode === \"yaml\") ? null :\n                    <ToggleGroup aria-label=\"Switch Json to Yaml\" isCompact={this.compactYamlJson()} className=\"formatting-buttons\">\n                        <ToggleGroupItem\n                            text=\"JSON\"\n                            buttonId=\"json\"\n                            isSelected={this.state.editorMode === \"json\"}\n                            onChange={this.switchJsonYaml(\"json\")}\n                            isDisabled={this.state.editorMode === \"json\"}\n                        />\n                        <ToggleGroupItem\n                            text=\"YAML\"\n                            buttonId=\"yaml\"\n                            isSelected={this.state.editorMode === \"yaml\"}\n                            onChange={this.switchJsonYaml(\"yaml\")}\n                            isDisabled={this.state.editorMode === \"yaml\"}\n                        />\n                    </ToggleGroup>\n                }\n                <AceEditor\n                    data-testid=\"ace-content\"\n                    mode={this.state.editorMode}\n                    theme=\"monokai\"\n                    name=\"artifactContent\"\n                    className=\"artifactContent\"\n                    width={this.state.editorWidth}\n                    height={this.state.editorHeight}\n                    fontSize={14}\n                    showPrintMargin={false}\n                    showGutter={true}\n                    highlightActiveLine={false}\n                    value={this.state.content}\n                    readOnly={true}\n                    setOptions={{\n                        enableBasicAutocompletion: false,\n                        enableLiveAutocompletion: false,\n                        enableSnippets: false,\n                        showLineNumbers: true,\n                        tabSize: 2,\n                        useWorker: false\n                    }}\n                />\n            </div>\n        );\n    }\n\n    protected initializeState(): ContentTabContentState {\n        return {\n            content: this.formatContent(),\n            editorMode: this.editorMode(),\n            editorHeight: \"500px\",\n            editorWidth: \"100%\"\n        };\n    }\n\n    private editorMode(): string {\n        if (this.props.artifactType === \"PROTOBUF\") {\n            return \"protobuf\";\n        }\n        if (this.props.artifactType === \"WSDL\" || this.props.artifactType === \"XSD\" || this.props.artifactType === \"XML\") {\n            return \"xml\";\n        }\n        if (this.props.artifactType === \"GRAPHQL\") {\n            return \"graphqlschema\";\n        }\n        return \"json\";\n    }\n\n    private formatContent(): string {\n        try {\n            const pval: any = JSON.parse(this.props.artifactContent);\n            if (pval) {\n                return JSON.stringify(pval, null, 2);\n            }\n        } catch (e) {\n            // Do nothing\n        }\n        return this.props.artifactContent;\n    }\n\n}\n\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./documentation.css\";\nimport \"@asyncapi/react-component/styles/default.css\";\nimport { PureComponent, PureComponentProps, PureComponentState } from \"../../../../components\";\nimport { RedocStandalone } from \"redoc\";\nimport AsyncApiComponent, { ConfigInterface } from \"@asyncapi/react-component\";\nimport { ErrorTabContent } from \"./errorTab\";\nimport { Services } from \"src/services\";\n\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface DocumentationTabContentProps extends PureComponentProps {\n    artifactContent: string;\n    artifactType: string;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface DocumentationTabContentState extends PureComponentState {\n    parsedContent: any | undefined;\n    error: any | undefined\n}\n\n\n/**\n * Models the content of the Artifact Info tab.\n */\nexport class DocumentationTabContent extends PureComponent<DocumentationTabContentProps, DocumentationTabContentState> {\n\n    constructor(props: Readonly<DocumentationTabContentProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        if (this.isError()){\n            return <ErrorTabContent error={{errorMessage: \"Artifact isn't a valid OpenAPI structure\", error: this.state.error}}/>\n        }\n\n        let visualizer: React.ReactElement | null = null;\n        if (this.props.artifactType === \"OPENAPI\") {\n            visualizer = <RedocStandalone spec={this.state.parsedContent} />;\n        }\n\n        if(this.props.artifactType === \"ASYNCAPI\") {\n            const config: ConfigInterface = {\n                show: {\n                    sidebar: false\n                }\n            };\n            visualizer = <AsyncApiComponent schema={this.state.parsedContent} config={config} />;\n        }\n\n        if (visualizer !== null) {\n            return visualizer;\n        } else {\n            return <h1>Unsupported Type: { this.props.artifactType }</h1>\n        }\n    }\n\n    protected initializeState(): DocumentationTabContentState {\n        try {\n            return {\n                parsedContent: JSON.parse(this.props.artifactContent),\n                error: undefined\n            };\n        } catch(ex) {\n            Services.getLoggerService().warn(\"Failed to parse content:\");\n            Services.getLoggerService().error(ex);\n            return {\n                parsedContent: undefined,\n                error: ex\n            };\n        }\n\n    }\n\n    private isError() : boolean {\n        if(this.state.error){\n            return true;\n        }else{\n            return false;\n        }\n    }\n}\n","import React, { ReactNode } from \"react\";\nimport { PureComponent, PureComponentProps, PureComponentState } from \"../../../../components\";\nimport AceEditor from \"react-ace\";\nimport \"ace-builds/src-noconflict/mode-text\";\nimport \"ace-builds/src-noconflict/theme-tomorrow\";\nimport {\n    Button,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateSecondaryActions,\n    EmptyStateVariant,\n    Title\n} from \"@patternfly/react-core\";\nimport { ExclamationTriangleIcon } from \"@patternfly/react-icons\";\n\nexport interface TabError {\n    errorMessage: string,\n    error: any\n}\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface ErrorTabContentProps extends PureComponentProps {\n    error?: TabError | undefined\n    children?: ReactNode\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface ErrorTabContentState extends PureComponentState {\n    isShowDetails: boolean;\n    editorWidth: string;\n    editorHeight: string;\n}\n\n\nexport class ErrorTabContent extends PureComponent<ErrorTabContentProps, ErrorTabContentState> {\n\n    constructor(props: Readonly<ErrorTabContentProps>) {\n        super(props);\n    }\n\n    public render() {\n        return (\n            <div className=\"centerizer\">\n                    <EmptyState variant={EmptyStateVariant.large}>\n                            <EmptyStateIcon icon={ExclamationTriangleIcon} />\n                            <Title headingLevel=\"h5\" size=\"lg\">{ this.errorMessage() }</Title>\n                            <EmptyStateBody>\n                                { this.errorDescription() }\n                            </EmptyStateBody>\n                            <EmptyStateSecondaryActions>\n                                <Button variant=\"link\"\n                                        data-testid=\"error-btn-details\"\n                                        onClick={this.showDetails}>Show details</Button>\n                            </EmptyStateSecondaryActions>\n                        </EmptyState>\n                        <div className=\"separator\">&nbsp;</div>\n                        {\n                            this.state.isShowDetails ?\n                                <div className=\"ace-wrapper pf-c-empty-state pf-m-lg\" id=\"ace-wrapper\">\n                                    <AceEditor\n                                        data-testid=\"ace-details\"\n                                        mode=\"json\"\n                                        theme=\"tomorrow\"\n                                        name=\"errorDetail\"\n                                        className=\"errorDetail\"\n                                        width={this.state.editorWidth}\n                                        height={this.state.editorHeight}\n                                        fontSize={14}\n                                        showPrintMargin={false}\n                                        showGutter={false}\n                                        highlightActiveLine={false}\n                                        value={this.errorDetail()}\n                                        readOnly={true}\n                                        setOptions={{\n                                            enableBasicAutocompletion: false,\n                                            enableLiveAutocompletion: false,\n                                            enableSnippets: false,\n                                            showLineNumbers: true,\n                                            tabSize: 2,\n                                            useWorker: false\n                                        }}\n                                    />\n                                </div>\n                                :\n                                <div/>\n                        }\n            </div>\n        )\n    }\n\n    protected initializeState(): ErrorTabContentState {\n        return {\n            editorHeight: \"250px\",\n            editorWidth: \"100%\",\n            isShowDetails: false\n        };\n    }\n\n    private errorMessage(): string {\n        if (this.props.error) {\n            return this.props.error.errorMessage;\n        } else {\n            return \"Internal server error\";\n        }\n    }\n\n    // Error description can be in node children - if it is missing, default description is used\n    private errorDescription(): ReactNode {\n        if (this.props.children) {\n            return this.props.children;\n        } else {\n            return (\n                \"The content you are trying to visualize is not valid (we could not parse it).  If possible, we'll try to provide you with some more information about \" +\n                \"the problem (see below).\"\n            );\n        }\n    }\n\n    private errorDetail(): string {\n        if (this.props.error && this.props.error.error && this.props.error.error.detail) {\n            return this.props.error.error.detail;\n        }else if (this.props.error && this.props.error.error && this.props.error.error.message) {\n            return this.props.error.error.message;\n        } else if (this.props.error && this.props.error.error) {\n            return JSON.stringify(this.props.error.error, null, 3);\n        } else {\n            return \"Error info not available\";\n        }\n    }\n\n    private showDetails = (): void => {\n        this.setSingleState(\"isShowDetails\", true);\n    };\n\n}\n\n\n\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./info.css\";\nimport {\n    ArtifactTypeIcon,\n    IfAuth,\n    PureComponent,\n    PureComponentProps,\n    PureComponentState,\n    RuleList\n} from \"../../../../components\";\nimport {\n    Button,\n    Card,\n    CardBody,\n    CardTitle,\n    DescriptionList,\n    DescriptionListDescription,\n    DescriptionListGroup,\n    DescriptionListTerm,\n    Divider,\n    Label,\n    Split,\n    SplitItem,\n    Truncate\n} from \"@patternfly/react-core\";\nimport { DownloadIcon, PencilAltIcon } from \"@patternfly/react-icons\";\nimport Moment from \"react-moment\";\nimport { IfFeature } from \"../../../../components/common/ifFeature\";\nimport { ArtifactMetaData, Rule } from \"../../../../../models\";\nimport { If } from \"../../../../components/common/if\";\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface InfoTabContentProps extends PureComponentProps {\n    artifact: ArtifactMetaData;\n    isLatest: boolean;\n    rules: Rule[];\n    onEnableRule: (ruleType: string) => void;\n    onDisableRule: (ruleType: string) => void;\n    onConfigureRule: (ruleType: string, config: string) => void;\n    onDownloadArtifact: () => void;\n    onEditMetaData: () => void;\n    onChangeOwner: () => void;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface InfoTabContentState extends PureComponentState {\n}\n\n\n/**\n * Models the content of the Artifact Info tab.\n */\nexport class InfoTabContent extends PureComponent<InfoTabContentProps, InfoTabContentState> {\n\n    constructor(props: Readonly<InfoTabContentProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <div className=\"artifact-tab-content\">\n                <div className=\"artifact-basics\">\n                    <Card>\n                        <CardTitle>\n                            <div className=\"title-and-type\">\n                                <Split>\n                                    <SplitItem className=\"type\"><ArtifactTypeIcon type={this.props.artifact.type} /></SplitItem>\n                                    <SplitItem className=\"title\" isFilled={true}>Version metadata</SplitItem>\n                                    <SplitItem className=\"actions\">\n                                        <IfAuth isDeveloper={true}>\n                                            <IfFeature feature=\"readOnly\" isNot={true}>\n                                                <Button id=\"edit-action\"\n                                                        data-testid=\"artifact-btn-edit\"\n                                                        onClick={this.props.onEditMetaData}\n                                                        variant=\"link\"><PencilAltIcon />{\" \"}Edit</Button>\n                                            </IfFeature>\n                                        </IfAuth>\n                                    </SplitItem>\n                                </Split>\n                            </div>\n                        </CardTitle>\n                        <Divider />\n                        <CardBody>\n                            <DescriptionList className=\"metaData\" isCompact={true}>\n                                <DescriptionListGroup>\n                                    <DescriptionListTerm>Name</DescriptionListTerm>\n                                    <DescriptionListDescription className={!this.props.artifact.name ? \"empty-state-text\" : \"\"}>{this.artifactName()}</DescriptionListDescription>\n                                </DescriptionListGroup>\n                                <DescriptionListGroup>\n                                    <DescriptionListTerm>ID</DescriptionListTerm>\n                                    <DescriptionListDescription>{this.props.artifact.id}</DescriptionListDescription>\n                                </DescriptionListGroup>\n                                <DescriptionListGroup>\n                                    <DescriptionListTerm>Description</DescriptionListTerm>\n                                    <DescriptionListDescription className={!this.props.artifact.description ? \"empty-state-text\" : \"\"}>{this.description()}</DescriptionListDescription>\n                                </DescriptionListGroup>\n                                <DescriptionListGroup>\n                                    <DescriptionListTerm>Status</DescriptionListTerm>\n                                    <DescriptionListDescription>{this.props.artifact.state}</DescriptionListDescription>\n                                </DescriptionListGroup>\n                                <DescriptionListGroup>\n                                    <DescriptionListTerm>Created</DescriptionListTerm>\n                                    <DescriptionListDescription><Moment date={this.props.artifact.createdOn} fromNow={true} /></DescriptionListDescription>\n                                </DescriptionListGroup>\n                                <If condition={this.props.artifact.createdBy !== undefined && this.props.artifact.createdBy !== \"\"}>\n                                    <DescriptionListGroup>\n                                        <DescriptionListTerm>Owner</DescriptionListTerm>\n                                        <DescriptionListDescription>\n                                            <span>{this.props.artifact.createdBy}</span>\n                                            <span>\n                                                <IfAuth isAdminOrOwner={true} owner={this.props.artifact.createdBy}>\n                                                    <IfFeature feature=\"readOnly\" isNot={true}>\n                                                        <Button id=\"edit-action\"\n                                                                data-testid=\"artifact-btn-edit\"\n                                                                onClick={this.props.onChangeOwner}\n                                                                variant=\"link\"><PencilAltIcon /></Button>\n                                                    </IfFeature>\n                                                </IfAuth>\n                                            </span>\n                                        </DescriptionListDescription>\n                                    </DescriptionListGroup>\n                                </If>\n                                <DescriptionListGroup>\n                                    <DescriptionListTerm>Modified</DescriptionListTerm>\n                                    <DescriptionListDescription>{<Moment date={this.props.artifact.modifiedOn} fromNow={true} />}</DescriptionListDescription>\n                                </DescriptionListGroup>\n                                <DescriptionListGroup>\n                                    <DescriptionListTerm>Global ID</DescriptionListTerm>\n                                    <DescriptionListDescription>{this.props.artifact.globalId}</DescriptionListDescription>\n                                </DescriptionListGroup>\n                                <DescriptionListGroup>\n                                    <DescriptionListTerm>Content ID</DescriptionListTerm>\n                                    <DescriptionListDescription>{this.props.artifact.contentId}</DescriptionListDescription>\n                                </DescriptionListGroup>\n                                <DescriptionListGroup>\n                                    <DescriptionListTerm>Labels</DescriptionListTerm>\n                                    {this.labels().length ?\n                                        <DescriptionListDescription>{\n                                            this.labels().map((label) =>\n                                                <Label key={`label-${label}`} color=\"blue\" style={{marginBottom: \"2px\", marginLeft: \"5px\"}}>\n                                                    <Truncate className=\"label-truncate\" content={label} />\n                                                </Label>\n                                            )\n                                        }</DescriptionListDescription> :\n                                        <DescriptionListDescription className=\"empty-state-text\">No labels</DescriptionListDescription>\n                                    }\n\n                                </DescriptionListGroup>\n                                <DescriptionListGroup>\n                                    <DescriptionListTerm>Properties</DescriptionListTerm>\n                                    {!this.props.artifact.properties || !Object.keys(this.props.artifact.properties).length ?\n                                        <DescriptionListDescription className=\"empty-state-text\">No properties</DescriptionListDescription> :\n                                        <DescriptionListDescription>{Object.entries(this.props.artifact.properties).map(([key, value]) =>\n                                            <Label key={`property-${key}`} color=\"purple\" style={{marginBottom: \"2px\", marginLeft: \"5px\"}}>\n                                                <Truncate className=\"property-truncate\" content={`${key}=${value}`} />\n                                            </Label>\n                                        )}</DescriptionListDescription>\n                                    }\n                                </DescriptionListGroup>\n                            </DescriptionList>\n                            <div className=\"actions\">\n                                <Button id=\"download-action\"\n                                        data-testid=\"artifact-btn-download\"\n                                        title=\"Download artifact content\"\n                                        onClick={this.props.onDownloadArtifact}\n                                        variant=\"secondary\"><DownloadIcon /> Download</Button>\n                            </div>\n                        </CardBody>\n                    </Card>\n                </div>\n                <div className=\"artifact-rules\">\n                    <Card>\n                        <CardTitle>\n                            <div className=\"rules-label\">Content rules</div>\n                        </CardTitle>\n                        <Divider />\n                        <CardBody>\n                            <RuleList rules={this.props.rules}\n                                      onEnableRule={this.props.onEnableRule}\n                                      onDisableRule={this.props.onDisableRule}\n                                      onConfigureRule={this.props.onConfigureRule}\n                            />\n                        </CardBody>\n                    </Card>\n                </div>\n            </div>\n        );\n    }\n\n    protected initializeState(): InfoTabContentState {\n        return {};\n    }\n\n    private nameOrId(): string {\n        return this.props.artifact.name ? this.props.artifact.name : this.props.artifact.id;\n    }\n\n    private labels(): string[] {\n        return this.props.artifact.labels || [];\n    }\n\n    private description(): string {\n        return this.props.artifact.description || \"No description\";\n    }\n\n    private artifactName(): string {\n        return this.props.artifact.name || \"No name\";\n    }\n\n    private isArtifactInGroup = (): boolean => {\n        const groupId: string | null = this.props.artifact.groupId;\n        return groupId != null && groupId !== \"default\";\n    };\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport \"./uploadForm.css\";\nimport { PureComponent, PureComponentProps, PureComponentState } from \"../../../../components\";\nimport { FileUpload, Form, FormGroup } from \"@patternfly/react-core\";\n\n\n/**\n * Properties\n */\nexport interface UploadVersionFormProps extends PureComponentProps {\n    onValid: (valid: boolean) => void;\n    onChange: (data: string) => void;\n}\n\n/**\n * State\n */\nexport interface UploadVersionFormState extends PureComponentState {\n    content: string;\n    contentFilename: string;\n    contentIsLoading: boolean;\n    valid: boolean;\n}\n\n/**\n * Models the toolbar for the Artifacts page.\n */\nexport class UploadVersionForm extends PureComponent<UploadVersionFormProps, UploadVersionFormState> {\n\n    constructor(props: Readonly<UploadVersionFormProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <Form>\n                <FormGroup\n                    label=\"Artifact\"\n                    isRequired={true}\n                    fieldId=\"form-artifact\"\n                >\n                    <FileUpload\n                        id=\"artifact-content\"\n                        data-testid=\"form-upload\"\n                        type=\"text\"\n                        filename={this.state.contentFilename}\n                        value={this.state.content}\n                        isRequired={true}\n                        allowEditingUploadedText={true}\n                        onChange={this.onContentChange}\n                        onReadStarted={this.onFileReadStarted}\n                        onReadFinished={this.onFileReadFinished}\n                        isLoading={this.state.contentIsLoading}\n                    />\n                </FormGroup>\n            </Form>\n        );\n    }\n\n    protected initializeState(): UploadVersionFormState {\n        return {\n            content: \"\",\n            contentFilename: \"\",\n            contentIsLoading: false,\n            valid: false\n        };\n    }\n\n    private onContentChange = (value: any, filename: string, event: any): void => {\n        this.setSingleState(\"content\", value, () => {\n            this.fireOnChange();\n            this.checkValid();\n        });\n    };\n\n    private onFileReadStarted = (): void => {\n        this.setSingleState(\"contentIsLoading\", true);\n    };\n\n    private onFileReadFinished = (): void => {\n        this.setSingleState(\"contentIsLoading\", false);\n    };\n\n    private checkValid(): void {\n        const data: string = this.currentData();\n        const oldValid: boolean = this.state.valid;\n        const newValid: boolean = this.isValid(data);\n        const validityChanged: boolean = oldValid !== newValid;\n        this.setState({\n            valid: newValid\n        }, () => {\n            if (validityChanged) {\n                this.fireOnValid();\n            }\n        });\n    }\n\n    private isValid(data: string): boolean {\n        return !!data;\n    }\n\n    private currentData(): string {\n        return this.state.content;\n    }\n\n    private fireOnChange(): void {\n        if (this.props.onChange) {\n            this.props.onChange(this.currentData());\n        }\n    }\n\n    private fireOnValid(): void {\n        if (this.props.onValid) {\n            this.props.onValid(this.state.valid);\n        }\n    }\n\n}\n"],"names":["ChangeOwnerModal","isOpen","onClose","currentOwner","onChangeOwner","useState","isValid","setValid","newOwner","setNewOwner","isAccountToggled","setAccountToggled","principals","getPrincipals","useEffect","trim","length","Modal","title","variant","onEscapePress","className","actions","Button","key","onClick","isDisabled","Form","FormGroup","label","fieldId","Text","isRequired","id","onToggle","isToggled","onIdUpdate","console","debug","isUsersOnly","initialOptions","isUpdateAccess","TextInput","type","name","value","onChange","props","handleTabClick","event","tabIndex","setSingleState","onUploadVersion","onDeleteArtifact","doEnableRule","ruleType","config","createArtifactRule","groupId","artifactId","catch","error","handleServerError","rules","doDisableRule","deleteArtifactRule","filter","r","doConfigureRule","updateArtifactRule","map","doDownloadArtifact","content","state","artifactContent","contentType","ContentTypes","fext","artifact","ArtifactTypes","fname","artifactNameOrId","downloadToFS","onUploadFormValid","onUploadFormChange","data","onUploadModalClose","onDeleteModalClose","doUploadArtifactVersion","pleaseWait","uploadFormData","artifactType","createArtifactVersion","then","versionMetaData","artifactVersionLocation","encodeURIComponent","version","info","navigateTo","linkTo","error_code","handleInvalidContentError","setMultiState","isUploadFormValid","doDeleteArtifact","deleteArtifact","openEditMetaDataModal","openChangeOwnerModal","onEditModalClose","onChangeOwnerModalClose","doEditMetaData","metaData","updateArtifactMetaData","versionParam","doChangeOwner","updateArtifactOwner","createdBy","closeInvalidContentModal","message","isPleaseWaitModalOpen","pleaseWaitMessage","renderPage","this","ArtifactMetaData","tabs","Tab","eventKey","tabContentId","isLatest","onEnableRule","onDisableRule","onConfigureRule","onDownloadArtifact","onEditMetaData","showDocumentationTab","splice","groupIdParam","hasGroup","breadcrumbs","Breadcrumb","BreadcrumbItem","Link","to","isActive","feature","is","PageSection","PageSectionVariants","children","nameOrId","versions","isFilled","padding","default","Tabs","unmountOnExit","activeKey","activeTabKey","onSelect","isUploadModalOpen","onValid","isDeleteModalOpen","artifactName","description","artifactDescription","labels","artifactLabels","properties","artifactProperties","isEditModalOpen","isChangeOwnerModalOpen","invalidContentError","isInvalidContentModalOpen","initializePageState","artifactIsText","getPathParam","artifactIdParam","createLoaders","getArtifactMetaData","md","getArtifactContent","e","warn","eo","JSON","parse","is404","getArtifactRules","getArtifactVersions","reverse","doEdit","onNameChange","validate","onLabelsChange","split","item","onDescriptionChange","onPropertiesChange","forEach","property","nameValidated","undefined","includes","push","render","Grid","hasGutter","GridItem","span","placeholder","TextArea","helperText","componentDidUpdate","prevProps","join","initializeState","propertiesToList","Object","keys","valueValidated","listToProperties","rval","PropertiesFormGroup","idx","validated","newVal","helperTextInvalid","icon","MinusCircleIcon","iconPosition","propertyToRemove","newProps","PlusCircleIcon","Flex","FlexItem","TextContent","component","TextVariants","align","isDeveloper","isNot","Dropdown","dropdownClasses","toggle","DropdownToggle","style","display","InputGroup","ButtonVariant","SearchIcon","v","date","createdOn","fromNow","classes","featureReadOnly","switchJsonYaml","mode","editorMode","stringify","setState","componentDidMount","elem","document","getElementById","height","clientHeight","compactYamlJson","width","clientWidth","ToggleGroup","isCompact","ToggleGroupItem","text","buttonId","isSelected","theme","editorWidth","editorHeight","fontSize","showPrintMargin","showGutter","highlightActiveLine","readOnly","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","useWorker","formatContent","pval","isError","errorMessage","visualizer","RedocStandalone","spec","parsedContent","schema","show","sidebar","ex","showDetails","EmptyState","EmptyStateVariant","EmptyStateIcon","ExclamationTriangleIcon","Title","headingLevel","size","EmptyStateBody","errorDescription","EmptyStateSecondaryActions","isShowDetails","errorDetail","detail","isArtifactInGroup","Card","CardTitle","Split","SplitItem","PencilAltIcon","Divider","CardBody","DescriptionList","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","If","condition","isAdminOrOwner","owner","modifiedOn","globalId","contentId","Label","color","marginBottom","marginLeft","Truncate","entries","DownloadIcon","onContentChange","filename","fireOnChange","checkValid","onFileReadStarted","onFileReadFinished","FileUpload","contentFilename","allowEditingUploadedText","onReadStarted","onReadFinished","isLoading","contentIsLoading","valid","currentData","oldValid","newValid","validityChanged","fireOnValid"],"sourceRoot":""}