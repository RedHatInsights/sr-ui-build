{"version":3,"file":"9683.2d6512fc.js","mappings":"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","sources":["webpack://@apicurio/registry-ui/./src/app/components/common/ifAuth.tsx","webpack://@apicurio/registry-ui/./src/app/components/common/ifFeature.tsx","webpack://@apicurio/registry-ui/./src/app/components/common/ifNotEmpty.tsx","webpack://@apicurio/registry-ui/./src/app/components/header/header.tsx","webpack://@apicurio/registry-ui/./src/app/components/header/pageheader.tsx","webpack://@apicurio/registry-ui/./src/app/components/schemaMapping/schemaMapping.federated.tsx","webpack://@apicurio/registry-ui/./src/app/pages/basePage.tsx","webpack://@apicurio/registry-ui/./src/app/components/errorPage/accessErrorPage.tsx","webpack://@apicurio/registry-ui/./src/app/components/errorPage/rateLimitErrorPage.tsx","webpack://@apicurio/registry-ui/./src/app/pages/settings/components/propertyInput.tsx","webpack://@apicurio/registry-ui/./src/app/pages/settings/components/configProperty.tsx","webpack://@apicurio/registry-ui/./src/app/pages/settings/settings.tsx","webpack://@apicurio/registry-ui/./src/app/pages/settings/settings.federated.tsx","webpack://@apicurio/registry-ui/./src/models/artifactMetaData.model.ts","webpack://@apicurio/registry-ui/./src/models/artifactTypes.model.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport { PureComponent, PureComponentProps, PureComponentState } from \"../baseComponent\";\nimport { Services } from \"../../../services\";\nimport { AuthService } from \"../../../services/auth\";\n\n/**\n * Properties\n */\nexport interface IfAuthProps extends PureComponentProps {\n    enabled?: boolean;\n    isAuthenticated?: boolean;\n    isAdmin?: boolean;\n    isDeveloper?: boolean;\n    isOwner?: boolean;\n    isAdminOrOwner?: boolean;\n    owner?: string;\n    children?: React.ReactNode;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface IfAuthState extends PureComponentState {\n}\n\n\n/**\n * Wrapper around a set of arbitrary child elements and displays them only if the\n * indicated authentication parameters are true.\n */\nexport class IfAuth extends PureComponent<IfAuthProps, IfAuthState> {\n\n    constructor(props: Readonly<IfAuthProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        if (this.accept()) {\n            return <React.Fragment children={this.props.children} />\n        } else {\n            return <React.Fragment />\n        }\n    }\n\n    protected initializeState(): IfAuthState {\n        return {};\n    }\n\n    private accept(): boolean {\n        const auth: AuthService = Services.getAuthService();\n        let rval: boolean = true;\n        if (this.props.enabled !== undefined) {\n            rval = rval && (auth.isAuthenticationEnabled() === this.props.enabled);\n        }\n        if (this.props.isAuthenticated !== undefined) {\n            rval = rval && (auth.isAuthenticated() === this.props.isAuthenticated);\n        }\n        if (this.props.isAdmin !== undefined) {\n            rval = rval && (auth.isUserAdmin() === this.props.isAdmin);\n        }\n        if (this.props.isDeveloper !== undefined) {\n            rval = rval && (auth.isUserDeveloper(this.props.owner) === this.props.isDeveloper);\n        }\n        if (this.props.isOwner !== undefined && this.props.owner) {\n            if (this.props.isOwner) {\n                rval = rval && (auth.isUserId(this.props.owner));\n            } else {\n                rval = rval && (!auth.isUserId(this.props.owner));\n            }\n        }\n        if (this.props.isAdminOrOwner === true && this.props.owner) {\n            rval = rval && (\n                auth.isUserAdmin() === true ||\n                auth.isUserId(this.props.owner)\n            );\n        }\n        return rval;\n    }\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport { PureComponent, PureComponentProps, PureComponentState } from \"../baseComponent\";\nimport { Services } from \"../../../services\";\n\n/**\n * Properties\n */\nexport interface IfFeatureProps extends PureComponentProps {\n    feature: string;\n    is?: any;\n    isNot?: any;\n    children?: React.ReactNode;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface IfFeatureState extends PureComponentState {\n}\n\n\n/**\n * Wrapper around a set of arbitrary child elements and displays them only if the\n * indicated feature matches the given criteria.  Use this if you want to show/hide\n * UI elements based on the configured application feature set.\n */\nexport class IfFeature extends PureComponent<IfFeatureProps, IfFeatureState> {\n\n    constructor(props: Readonly<IfFeatureProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        if (this.accept()) {\n            return <React.Fragment children={this.props.children} />\n        } else {\n            return <React.Fragment />\n        }\n    }\n\n    protected initializeState(): IfFeatureState {\n        return {};\n    }\n\n    private accept(): boolean {\n        const features: any = Services.getConfigService().features();\n        const featureValue: any = features[this.props.feature];\n        if (this.props.is !== undefined) {\n            return featureValue === this.props.is;\n        } else if (this.props.isNot !== undefined) {\n            return featureValue !== this.props.isNot;\n        } else {\n            return featureValue !== undefined;\n        }\n    }\n\n}\n","import React, { FunctionComponent } from \"react\";\nimport { EmptyState, EmptyStateBody, EmptyStateVariant, Title } from \"@patternfly/react-core\";\n\n/**\n * Properties\n */\nexport interface IfNotEmptyProps {\n    collection?: any[] | undefined;\n    emptyState?: React.ReactNode;\n    emptyStateTitle?: string;\n    emptyStateMessage?: string;\n    children?: React.ReactNode;\n}\n\n/**\n * Wrapper around a set of arbitrary child elements and displays them only if the\n * provided collection is not empty.  If the provided collection is empty, then\n * an empty state control is displayed instead.\n */\nexport const IfNotEmpty: FunctionComponent<IfNotEmptyProps> = ({collection, emptyState, emptyStateTitle, emptyStateMessage, children}: IfNotEmptyProps) => {\n    const isEmpty = () => {\n        return !collection || collection.length === 0;\n    };\n\n    const empty: React.ReactNode = emptyState || (\n        <EmptyState variant={EmptyStateVariant.xs}>\n            <Title headingLevel=\"h4\" size=\"md\">{emptyStateTitle || \"None found\"}</Title>\n            <EmptyStateBody>{emptyStateMessage || \"No items found.\"}</EmptyStateBody>\n        </EmptyState>\n    );\n\n    return isEmpty() ?\n        <React.Fragment children={empty}/> :\n        <React.Fragment children={children} />\n};\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./header.css\";\nimport { Brand, PageHeader, PageHeaderTools, PageHeaderToolsGroup, PageHeaderToolsItem } from \"@patternfly/react-core\";\nimport brandImg from \"./apicurio_logo_darkbkg_350px.png\";\nimport { PureComponent, PureComponentProps, PureComponentState } from \"../baseComponent\";\nimport { IfAuth } from \"../common/ifAuth\";\nimport { AvatarDropdown } from \"./avatarDropdown\";\n\n\n// tslint:disable-next-line:no-empty-interface\nexport interface AppHeaderProps extends PureComponentProps {\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface AppHeaderState extends PureComponentState {\n}\n\n\nexport class AppHeader extends PureComponent<AppHeaderProps, AppHeaderState> {\n\n    constructor(props: Readonly<AppHeaderProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        let pageToolbar: React.ReactElement;\n        pageToolbar = (\n            <PageHeaderTools className=\"header-toolbar\">\n                <PageHeaderToolsGroup>\n                    <PageHeaderToolsItem id=\"avatar\">\n                        <IfAuth enabled={true}>\n                            <AvatarDropdown />\n                        </IfAuth>\n                    </PageHeaderToolsItem>\n                </PageHeaderToolsGroup>\n            </PageHeaderTools>\n        );\n\n        return (<PageHeader\n            logo={<Brand onClick={this.navigateTo(this.linkTo(\"/artifacts\"))} src={brandImg} alt=\"Apicurio Registry\"/>}\n            showNavToggle={false}\n            headerTools={pageToolbar}\n        />);\n    }\n\n    protected initializeState(): AppHeaderState {\n        return {};\n    }\n\n}\n","/**\n * @license\n * Copyright 2021 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport { Tab, Tabs, TabTitleText } from \"@patternfly/react-core\";\nimport \"./pageheader.css\";\nimport { PureComponent, PureComponentProps, PureComponentState } from \"../baseComponent\";\nimport { IfAuth } from \"../common\";\nimport { Services } from \"../../../services\";\n\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface RootPageHeaderProps extends PureComponentProps {\n    tabKey: number;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface RootPageHeaderState extends PureComponentState {\n}\n\n\n/**\n * Models the page header for the Artifacts page.\n */\nexport class RootPageHeader extends PureComponent<RootPageHeaderProps, RootPageHeaderState> {\n\n    constructor(props: Readonly<RootPageHeaderProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        const tabs: any[] = [\n            <Tab key={0} eventKey={0} title={<TabTitleText>Artifacts</TabTitleText>} />,\n            <Tab key={1} eventKey={1} title={<TabTitleText>Global rules</TabTitleText>} />\n        ];\n        if (Services.getConfigService().featureRoleManagement()) {\n            tabs.push(\n                <Tab key={2} eventKey={2} title={<TabTitleText>Access</TabTitleText>} />\n            );\n        }\n        if (Services.getConfigService().featureSettings()) {\n            tabs.push(\n                <Tab key={3} eventKey={3} title={<TabTitleText>Settings</TabTitleText>} />\n            );\n        }\n        return (\n            <div>\n                <IfAuth isAdmin={true}>\n                    <Tabs activeKey={this.props.tabKey} onSelect={this.handleTabClick} children={tabs} />\n                </IfAuth>\n            </div>\n        );\n    }\n\n    protected initializeState(): RootPageHeaderState {\n        return {};\n    }\n\n    private handleTabClick = (event: React.MouseEvent<HTMLElement, MouseEvent>, eventKey: number | string): void => {\n        if (eventKey !== this.props.tabKey) {\n            if (eventKey === 0) {\n                // navigate to artifacts\n                this.navigateTo(this.linkTo(\"/artifacts\"))();\n            }\n            if (eventKey === 1) {\n                // navigate to global rules\n                this.navigateTo(this.linkTo(\"/rules\"))();\n            }\n            if (eventKey === 2) {\n                // navigate to permissions page\n                this.navigateTo(this.linkTo(\"/roles\"))();\n            }\n            if (eventKey === 3) {\n                // navigate to settings page\n                this.navigateTo(this.linkTo(\"/settings\"))();\n            }\n        }\n    }\n}\n","/**\n * @license\n * Copyright 2021 Red Hat\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SchemaMapping, SchemaMappingProps } from \"./schemaMapping\";\nimport { FederatedComponentProps, FederatedUtils } from \"../../federated\";\n\nexport interface FederatedSchemaMappingProps extends SchemaMappingProps, FederatedComponentProps {\n}\n\nexport default class FederatedSchemaMapping extends SchemaMapping {\n\n    constructor(props: Readonly<FederatedSchemaMappingProps>) {\n        super(props);\n    }\n\n    protected postConstruct(): void {\n        FederatedUtils.updateConfiguration(this.props as FederatedSchemaMappingProps);\n        super.postConstruct();\n    }\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport { ErrorPage, PageError, PureComponent, PureComponentProps, PureComponentState } from \"../components\";\nimport { Services } from \"../../services\";\nimport { Flex, FlexItem, PageSection, PageSectionVariants, Spinner } from \"@patternfly/react-core\";\nimport { AccessErrorPage } from \"../components/errorPage/accessErrorPage\";\nimport { RateLimitErrorPage } from \"../components/errorPage/rateLimitErrorPage\";\n\n// TODO this should be configurable via standard UI config settings\nconst MAX_RETRIES: number = 1;\n\nexport enum PageErrorType {\n    React, Server\n}\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface PageProps extends PureComponentProps {\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface PageState extends PureComponentState {\n    pageLoadRetries?: number;\n    isLoading?: boolean;\n    isError?: boolean;\n    error?: PageError;\n}\n\n\n/**\n * The artifacts page.\n */\nexport abstract class PageComponent<P extends PageProps, S extends PageState> extends PureComponent<P, S> {\n\n    protected constructor(props: Readonly<P>) {\n        super(props);\n        setTimeout(() => {\n            this.loadPageData();\n        }, 10);\n    }\n\n    protected initializeState(): S {\n        return {\n            ...this.initializePageState(),\n            isLoading: true\n        };\n    }\n\n    protected abstract initializePageState(): S;\n\n    public componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {\n        this.handleError(PageErrorType.React, error, errorInfo);\n    }\n\n    public render(): React.ReactElement {\n        if (this.isError()) {\n            if (this.is403Error()) {\n                return (\n                    <AccessErrorPage error={this.state.error}/>\n                );\n            } else if (this.is419Error()) {\n                return (\n                    <RateLimitErrorPage error={this.state.error}/>\n                );\n            } else {\n                return (\n                    <ErrorPage error={this.state.error}/>\n                );\n            }\n        } else if (this.isLoading()) {\n            return (\n                <React.Fragment>\n                    <PageSection variant={PageSectionVariants.default} isFilled={true}>\n                        <Flex>\n                            <FlexItem><Spinner size=\"lg\"/></FlexItem>\n                            <FlexItem><span>Loading...</span></FlexItem>\n                        </Flex>\n                    </PageSection>\n                </React.Fragment>\n            );\n        } else {\n            return this.renderPage();\n        }\n    }\n\n    /**\n     * Renders the page content.  Subclasses should implement this instead of render() so that\n     * errors are handled/displayed properly.\n     */\n    protected abstract renderPage(): React.ReactElement;\n\n    protected postConstruct(): void {\n        // @ts-ignore\n        PureComponent.setHistory(this.props.history);\n        super.postConstruct();\n    }\n\n    // @ts-ignore\n    protected createLoaders(): Promise | Promise[] | null {\n        return null;\n    }\n\n    protected handleServerError(error: any, errorMessage: string): void {\n        this.handleError(PageErrorType.Server, error, errorMessage);\n    }\n\n    protected getPathParam(paramName: string): string {\n        // @ts-ignore\n        const paramValue: string = this.props.match.params[paramName];\n        const paramValueDecoded: string = decodeURIComponent(paramValue);\n        return paramValueDecoded;\n    }\n\n    protected isLoading(): boolean {\n        return this.state.isLoading ? true : false;\n    }\n\n    private loadPageData(): void {\n        // @ts-ignore\n        let loaders: Promise | Promise[] | null = this.createLoaders();\n\n        // If not loading anything, convert from null to empty array\n        if (loaders == null) {\n            loaders = [];\n        }\n\n        // Convert to array if not already\n        if (!Array.isArray(loaders)) {\n            loaders = [ loaders ];\n        }\n\n        // Always add the \"update current user\" loader\n        loaders = [\n            Services.getUsersService().updateCurrentUser(),\n            ...loaders\n        ];\n\n        if (loaders.length === 0) {\n            this.setSingleState(\"isLoading\", false);\n        } else {\n            this.setSingleState(\"isLoading\", true);\n            Promise.all(loaders).then(() => {\n                this.setSingleState(\"isLoading\", false);\n            }).catch(error => {\n                Services.getLoggerService().debug(\"[PageComponent] Page data load failed, retrying.\");\n                const retries: number = this.getRetries();\n                if (retries < MAX_RETRIES) {\n                    this.incrementRetries();\n                    setTimeout(() => {\n                        this.loadPageData();\n                    }, Math.pow(2, retries) * 100);\n                } else {\n                    this.handleServerError(error, \"Error loading page data.\");\n                }\n            });\n        }\n    }\n\n    private getRetries(): number {\n        return this.state.pageLoadRetries !== undefined ? this.state.pageLoadRetries as number : 0;\n    }\n\n    private incrementRetries(): void {\n        const retries: number = this.getRetries() + 1;\n        this.setSingleState(\"pageLoadRetries\", retries);\n    }\n\n    private isError(): boolean {\n        return this.state.isError ? true : false;\n    }\n\n    private is403Error(): boolean {\n        return this.state.error && this.state.error.error.status && (this.state.error.error.status == 403);\n    }\n\n    private is419Error(): boolean {\n        return this.state.error && this.state.error.error.status && (this.state.error.error.status == 419);\n    }\n\n    private handleError(errorType: PageErrorType, error: any, errorMessage: any): void {\n        Services.getLoggerService().error(\"[PageComponent] Handling an error of type: \", errorType);\n        Services.getLoggerService().error(\"[PageComponent] \", errorMessage);\n        Services.getLoggerService().error(\"[PageComponent] \", error);\n        this.setMultiState({\n            error: {\n                error,\n                errorMessage,\n                type: errorType\n            },\n            isError: true\n        });\n    }\n}\n","/**\n * @license\n * Copyright 2021 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./errorPage.css\";\nimport {\n    Button,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateSecondaryActions,\n    EmptyStateVariant,\n    PageSection,\n    PageSectionVariants,\n    Title\n} from \"@patternfly/react-core\";\nimport { LockedIcon } from \"@patternfly/react-icons\";\nimport \"ace-builds/src-noconflict/mode-text\";\nimport \"ace-builds/src-noconflict/theme-tomorrow\";\nimport { ErrorPage, ErrorPageProps } from \"./errorPage\";\n\n\nexport class AccessErrorPage extends ErrorPage {\n\n    constructor(props: Readonly<ErrorPageProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <React.Fragment>\n                <PageSection className=\"ps_error\" variant={PageSectionVariants.light}>\n                    <div className=\"centerizer\">\n                        <EmptyState variant={EmptyStateVariant.large}>\n                            <EmptyStateIcon icon={LockedIcon} />\n                            <Title headingLevel=\"h5\" size=\"lg\">Access permissions needed</Title>\n                            <EmptyStateBody>\n                                To access this Service Registry instance, contact your organization administrators.\n                            </EmptyStateBody>\n                            <EmptyStateSecondaryActions>\n                                <Button variant=\"link\"\n                                        data-testid=\"error-btn-back\"\n                                        onClick={this.navigateBack}>Return to previous page</Button>\n                            </EmptyStateSecondaryActions>\n                        </EmptyState>\n                    </div>\n                </PageSection>\n            </React.Fragment>\n        );\n    }\n\n    protected navigateBack = (): void => {\n        window.history.back();\n    };\n\n}\n","/**\n * @license\n * Copyright 2022 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./errorPage.css\";\nimport {\n    Button,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateSecondaryActions,\n    EmptyStateVariant,\n    PageSection,\n    PageSectionVariants,\n    Title\n} from \"@patternfly/react-core\";\nimport { ExclamationCircleIcon } from \"@patternfly/react-icons\";\nimport \"ace-builds/src-noconflict/mode-text\";\nimport \"ace-builds/src-noconflict/theme-tomorrow\";\nimport { ErrorPage, ErrorPageProps } from \"./errorPage\";\n\n\nexport class RateLimitErrorPage extends ErrorPage {\n\n    constructor(props: Readonly<ErrorPageProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <React.Fragment>\n                <PageSection className=\"ps_error\" variant={PageSectionVariants.light}>\n                    <div className=\"centerizer\">\n                        <EmptyState variant={EmptyStateVariant.large}>\n                            <EmptyStateIcon icon={ExclamationCircleIcon} />\n                            <Title headingLevel=\"h5\" size=\"lg\">Current usage is too high</Title>\n                            <EmptyStateBody>\n                                This Service Registry instance is throttled due to a high request rate. Ensure\n                                that existing applications are properly configured to cache the schemas.\n                            </EmptyStateBody>\n                            <EmptyStateSecondaryActions>\n                                <Button variant=\"link\"\n                                        data-testid=\"error-btn-back\"\n                                        onClick={this.navigateBack}>Return to previous page</Button>\n                            </EmptyStateSecondaryActions>\n                        </EmptyState>\n                    </div>\n                </PageSection>\n            </React.Fragment>\n        );\n    }\n\n    protected navigateBack = (): void => {\n        window.history.back();\n    };\n\n}\n","/**\n * @license\n * Copyright 2022 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport \"./configProperty.css\";\nimport { InputGroup, TextInput } from \"@patternfly/react-core\";\nimport { PureComponent, PureComponentProps, PureComponentState } from \"../../../components\";\n\n/**\n * Properties\n */\nexport interface PropertyInputProps extends PureComponentProps {\n    name: string;\n    value: string;\n    type:\n        | 'text'\n        | 'number'\n        ;\n    onChange: (newValue: string) => void;\n    onValid: (valid: boolean) => void;\n    onCancel: () => void;\n    onSave: () => void;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface PropertyInputState extends PureComponentState {\n    currentValue: string;\n    isValid: boolean;\n    isDirty: boolean;\n}\n\n/**\n * Models a single editable config property.\n */\nexport class PropertyInput extends PureComponent<PropertyInputProps, PropertyInputState> {\n\n    constructor(props: Readonly<PropertyInputProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return <InputGroup>\n            <TextInput name={ this.props.name }\n                       value={ this.state.currentValue }\n                       validated={ this.validated() }\n                       onChange={ this.handleInputChange }\n                       onKeyDown={ this.handleKeyPress }\n                       aria-label=\"configuration property input\"/>\n        </InputGroup>\n    }\n\n    protected initializeState(): PropertyInputState {\n        return {\n            currentValue: this.props.value,\n            isDirty: false,\n            isValid: true\n        };\n    }\n\n    private validated(): 'success' | 'warning' | 'error' | 'default' {\n        return this.state.isValid ? \"default\" : \"error\";\n    }\n\n    private handleInputChange = (value: string): void => {\n        const oldValid: boolean = this.state.isValid;\n        const isValid: boolean = this.validate(value);\n        this.setMultiState({\n            currentValue: value,\n            isDirty: value !== this.props.value,\n            isValid\n        }, () => {\n            if (oldValid !== isValid) {\n                this.props.onValid(isValid);\n            }\n            this.props.onChange(value);\n        });\n    };\n\n    private validate(value: string): boolean {\n        if (this.props.type === \"text\") {\n            return value.trim().length > 0;\n        } else if (this.props.type === \"number\") {\n            if (value.trim().length === 0) {\n                return false;\n            }\n            const num: number = Number(value);\n            return Number.isInteger(num);\n        }\n        return true;\n    }\n\n    private handleKeyPress = (event: any): void => {\n        if (event.code === \"Escape\") {\n            this.props.onCancel();\n        }\n        if (event.code === \"Enter\" && this.state.isDirty && this.state.isValid) {\n            this.props.onSave();\n        }\n    };\n\n}\n","/**\n * @license\n * Copyright 2022 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React, { FunctionComponent, useState } from \"react\";\nimport \"./configProperty.css\";\nimport { Button, Flex, FlexItem, Switch } from \"@patternfly/react-core\";\nimport { ConfigurationProperty } from \"../../../../models/configurationProperty.model\";\nimport { PropertyInput } from \"./propertyInput\";\nimport { If } from \"../../../components/common/if\";\nimport { CheckIcon, CloseIcon, PencilAltIcon } from \"@patternfly/react-icons\";\n\n/**\n * Properties\n */\nexport interface ConfigPropertyProps {\n    property: ConfigurationProperty;\n    onChange: (property: ConfigurationProperty, newValue: string) => void;\n    onReset: (property: ConfigurationProperty) => void;\n}\n\n\nexport const ConfigProperty: FunctionComponent<ConfigPropertyProps> = ({property, onChange, onReset}: ConfigPropertyProps) => {\n    const [ isEditing, setEditing ] = useState(false);\n    const [ newPropertyValue, setNewPropertyValue ] = useState(property.value);\n    const [ isValid, setValid ] = useState(true);\n\n    const onCheckboxChange = (checked: boolean): void => {\n        const newValue: string = checked ? \"true\" : \"false\";\n        onChange(property, newValue);\n    };\n\n    const onPropertyValueChange = (newValue: string): void => {\n        setNewPropertyValue(newValue);\n    };\n\n    const onPropertyValueValid = (valid: boolean): void => {\n        setValid(valid);\n    };\n\n    const onCancelEdit = (): void => {\n        setNewPropertyValue(property.value);\n        setEditing(false);\n    };\n\n    const onStartEditing = (): void => {\n        setValid(true);\n        setEditing(true);\n    };\n\n    const onSavePropertyValue = (): void => {\n        onChange(property, newPropertyValue);\n        setEditing(false);\n    };\n\n    const renderBooleanProp = (): React.ReactElement => {\n        return (\n            <Flex className=\"configuration-property boolean-property\" flexWrap={{default: \"nowrap\"}}>\n                <FlexItem grow={{default: \"grow\"}}>\n                    <div className=\"property-name\">\n                        <span className=\"name\">{property.label}</span>\n                        <span className=\"sep\">:</span>\n                        <span className=\"value\">{property.value === \"true\" ? \"On\" : \"Off\"}</span>\n                    </div>\n                    <div className=\"property-description\">{property.description}</div>\n                </FlexItem>\n                <FlexItem className=\"actions\" align={{default: \"alignRight\"}}>\n                    <Switch id={property.name} aria-label={property.label}\n                            className=\"action\"\n                            isChecked={property.value === \"true\"}\n                            onChange={onCheckboxChange} />\n                </FlexItem>\n            </Flex>\n        );\n    };\n\n    const renderStringProp = (type: 'text' | 'number'): React.ReactElement => {\n        return (\n            <Flex className=\"configuration-property string-property\" flexWrap={{default: \"nowrap\"}}>\n                <FlexItem grow={{default: \"grow\"}}>\n                    <div className=\"property-name\">\n                        <span className=\"name\">{property.label}</span>\n                    </div>\n                    <div className=\"property-description\">{property.description}</div>\n                    <If condition={!isEditing}>\n                        <div className=\"property-value\">{property.value}</div>\n                    </If>\n                    <If condition={isEditing}>\n                        <div className=\"property-editor\">\n                            <PropertyInput name={ property.name }\n                                           value={ property.value }\n                                           type={ type }\n                                           onChange={ onPropertyValueChange }\n                                           onValid={ onPropertyValueValid }\n                                           onCancel={ onCancelEdit }\n                                           onSave={ onSavePropertyValue }\n                            />\n                        </div>\n                    </If>\n                </FlexItem>\n                <FlexItem className=\"actions\" align={{default: \"alignRight\"}}>\n                    <If condition={!isEditing}>\n                        <Button variant=\"plain\" className=\"action single\" onClick={onStartEditing}><PencilAltIcon /></Button>\n                    </If>\n                    <If condition={isEditing}>\n                        <Button variant=\"plain\" className=\"action\" onClick={onSavePropertyValue} isDisabled={!isValid}><CheckIcon /></Button>\n                        <Button variant=\"plain\" className=\"action\" onClick={onCancelEdit}><CloseIcon /></Button>\n                    </If>\n                </FlexItem>\n            </Flex>\n        );\n    }\n\n    if (property.type === \"java.lang.Boolean\") {\n        return renderBooleanProp();\n    } else if (property.type === \"java.lang.Integer\") {\n        return renderStringProp(\"number\");\n    } else if (property.type === \"java.lang.Long\") {\n        return renderStringProp(\"number\");\n    } else {\n        return renderStringProp(\"text\");\n    }\n\n}\n","/**\n * @license\n * Copyright 2022 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./settings.css\";\nimport {\n    Card,\n    CardBody,\n    CardTitle,\n    PageSection,\n    PageSectionVariants,\n    SearchInput,\n    TextContent\n} from \"@patternfly/react-core\";\nimport { PageComponent, PageProps, PageState } from \"../basePage\";\nimport { Services } from \"../../../services\";\nimport { IfNotEmpty, RootPageHeader } from \"../../components\";\nimport { ConfigurationProperty } from \"../../../models/configurationProperty.model\";\nimport { ConfigProperty } from \"./components\";\nimport { If } from \"../../components/common/if\";\n\n\ninterface PropertyGroup {\n    id: string,\n    label: string,\n    propertyNames: string[];\n    properties?: ConfigurationProperty[];\n}\n\nconst PROPERTY_GROUPS: PropertyGroup[] = [\n    {\n        id: \"authn\",\n        label: \"Authentication settings\",\n        propertyNames: [\n            \"registry.auth.basic-auth-client-credentials.enabled\",\n        ]\n    },\n    {\n        id: \"authz\",\n        label: \"Authorization settings\",\n        propertyNames: [\n            \"registry.auth.owner-only-authorization\",\n            \"registry.auth.owner-only-authorization.limit-group-access\",\n            \"registry.auth.anonymous-read-access.enabled\",\n            \"registry.auth.authenticated-read-access.enabled\",\n        ]\n    },\n    {\n        id: \"compatibility\",\n        label: \"Compatibility settings\",\n        propertyNames: [\n            \"registry.ccompat.legacy-id-mode.enabled\",\n        ]\n    },\n    {\n        id: \"console\",\n        label: \"Web console settings\",\n        propertyNames: [\n            \"registry.download.href.ttl\",\n            \"registry.ui.features.readOnly\"\n        ]\n    },\n];\n\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface SettingsPageProps extends PageProps {\n\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface SettingsPageState extends PageState {\n    properties?: ConfigurationProperty[];\n    searchedProperties?: ConfigurationProperty[];\n    searchCriteria: string;\n}\n\n/**\n * The settings page.\n */\nexport class SettingsPage extends PageComponent<SettingsPageProps, SettingsPageState> {\n\n    constructor(props: Readonly<SettingsPageProps>) {\n        super(props);\n    }\n\n    public renderPage(): React.ReactElement {\n        return (\n            <React.Fragment>\n                <PageSection className=\"ps_settings-header\" variant={PageSectionVariants.light} padding={{ default : \"noPadding\" }}>\n                    <RootPageHeader tabKey={3} />\n                </PageSection>\n                <PageSection className=\"ps_settings-description\" variant={PageSectionVariants.light}>\n                    <TextContent>\n                        Configure global settings for this Service Registry instance.\n                    </TextContent>\n                    <TextContent style={{marginTop: \"10px\", marginBottom: \"5px\", maxWidth: \"450px\"}}>\n                        <SearchInput placeholder={`Filter by keyword`}\n                                     aria-label=\"Filter by keyword\"\n                                     value={this.state.searchCriteria}\n                                     onChange={this.onSearchCriteria}\n                                     onSearch={this.onSearchSettings}\n                                     onClear={this.onSearchClear}\n                        />\n                    </TextContent>\n                </PageSection>\n                <PageSection variant={PageSectionVariants.default} isFilled={true}>\n                    <IfNotEmpty collection={this.state.searchedProperties} emptyStateMessage={`No settings found matching your search criteria.`}>\n                        {\n                            this.propertyGroups().map(group =>\n                                <If key={group.id} condition={group.properties !== undefined && group.properties.length > 0}>\n                                    <Card key={group.id} className=\"config-property-group\">\n                                        <CardTitle className=\"title\">{group.label}</CardTitle>\n                                        <CardBody className=\"config-properties\">\n                                            {\n                                                group.properties?.map(prop =>\n                                                    <ConfigProperty key={prop.name}\n                                                                    property={prop}\n                                                                    onChange={this.onPropertyChange}\n                                                                    onReset={this.onPropertyReset}\n                                                    />\n                                                )\n                                            }\n                                        </CardBody>\n                                    </Card>\n                                </If>\n                            )\n                        }\n                    </IfNotEmpty>\n                </PageSection>\n            </React.Fragment>\n        );\n    }\n\n    protected initializePageState(): SettingsPageState {\n        return {\n            searchCriteria: \"\"\n        };\n    }\n\n    // @ts-ignore\n    protected createLoaders(): Promise {\n        return Services.getAdminService().listConfigurationProperties().then( properties => {\n                this.setMultiState({\n                    isLoading: false,\n                    properties\n                });\n                this.filterProperties();\n            });\n    }\n\n    private groupFor(groups: PropertyGroup[], prop: ConfigurationProperty): PropertyGroup {\n        for (const group of groups) {\n            if (group.propertyNames.indexOf(prop.name) >= 0) {\n                return group;\n            }\n        }\n        // Default to the last group (additional properties).\n        return groups[groups.length - 1];\n    }\n\n    private propertyGroups(): PropertyGroup[] {\n        const groups: PropertyGroup[] = [...PROPERTY_GROUPS];\n        groups.forEach(group => group.properties = []);\n        const additionalGroup: PropertyGroup = {\n            id: \"additional\",\n            label: \"Additional properties\",\n            properties: [],\n            propertyNames: []\n        };\n        groups.push(additionalGroup);\n        this.state.searchedProperties?.forEach(prop => {\n            this.groupFor(groups, prop).properties?.push(prop);\n        });\n        groups.forEach(group => {\n            group.properties = group.properties?.sort(\n                (prop1, prop2) => prop1.label.localeCompare(prop2.label));\n        });\n        return groups;\n    }\n\n    private acceptProperty = (property: ConfigurationProperty): boolean => {\n        if (!this.state.searchCriteria || this.state.searchCriteria.trim().length === 0) {\n            return true;\n        }\n        const sc: string = this.state.searchCriteria.toLocaleLowerCase();\n        return property.label.toLocaleLowerCase().indexOf(sc) >= 0 ||\n            property.description.toLocaleLowerCase().indexOf(sc) >= 0;\n    };\n\n    private filterProperties(): void {\n        const filteredProperties: ConfigurationProperty[] | undefined = this.state.properties?.filter(this.acceptProperty);\n        this.setSingleState(\"searchedProperties\", filteredProperties);\n    }\n\n    private onSearchCriteria = (criteria: string): void => {\n        this.setSingleState(\"searchCriteria\", criteria);\n    };\n\n    private onSearchSettings = (): void => {\n        this.filterProperties();\n    };\n\n    private onSearchClear = (): void => {\n        this.setMultiState({\n            searchCriteria: \"\"\n        }, this.onSearchSettings);\n    }\n\n    private onPropertyChange = (property: ConfigurationProperty, newValue: string): void => {\n        property.value = newValue;\n        Services.getAdminService().setConfigurationProperty(property.name, newValue).then(() => {\n            // The property was updated successfully.  Update the UI to display all config\n            // properties (the list may have changed by changing one of the values).\n            this.createLoaders();\n            Services.getAlertsService().settingChanged(property, newValue);\n        }).catch(error => {\n            // Failed to set the property... report the error somehow.\n            this.handleServerError(error, \"Error setting configuration property\");\n        });\n    };\n\n    private onPropertyReset = (property: ConfigurationProperty): void => {\n        Services.getAdminService().resetConfigurationProperty(property.name).then(() => {\n            // The property was updated successfully.  Update the UI to display all config\n            // properties (the list may have changed by changing one of the values).\n            this.createLoaders();\n        }).catch(error => {\n            // Failed to set the property... report the error somehow.\n            this.handleServerError(error, \"Error resetting configuration property\");\n        });\n    }\n\n}\n","/**\n * @license\n * Copyright 2022 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./settings.css\";\nimport { SettingsPage, SettingsPageProps } from \"./settings\";\nimport { FederatedComponentProps, FederatedUtils } from \"../../federated\";\n\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface FederatedSettingsPageProps extends SettingsPageProps, FederatedComponentProps {\n}\n\n/**\n * The settings page.\n */\nexport default class FederatedSettingsPage extends SettingsPage {\n\n    constructor(props: Readonly<FederatedSettingsPageProps>) {\n        super(props);\n    }\n\n    protected postConstruct(): void {\n        FederatedUtils.updateConfiguration(this.props as FederatedComponentProps);\n        super.postConstruct();\n    }\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nexport class ArtifactMetaData {\n\n    public groupId: string|null;\n    public id: string;\n    public name: string|null;\n    public description: string|null;\n    public labels: string[]|null;\n    public properties: { [key: string]: string };\n    public type: string;\n    public version: string;\n    public createdBy: string;\n    public createdOn: Date;\n    public modifiedBy: string;\n    public modifiedOn: Date;\n    public globalId: number;\n    public contentId: number|null;\n    public state: string;\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// tslint:disable-next-line:interface-name\nexport class ArtifactTypes {\n\n    public static AVRO: string = \"AVRO\";\n    public static PROTOBUF: string = \"PROTOBUF\";\n    public static JSON: string = \"JSON\";\n    public static OPENAPI: string = \"OPENAPI\";\n    public static ASYNCAPI: string = \"ASYNCAPI\";\n    public static GRAPHQL: string = \"GRAPHQL\";\n    public static KCONNECT: string = \"KCONNECT\";\n    public static WSDL: string = \"WSDL\";\n    public static XSD: string = \"XSD\";\n    public static XML: string = \"XML\";\n\n}\n"],"names":["props","render","this","accept","children","initializeState","auth","rval","undefined","enabled","isAuthenticationEnabled","isAuthenticated","isAdmin","isUserAdmin","isDeveloper","isUserDeveloper","owner","isOwner","isUserId","isAdminOrOwner","featureValue","features","feature","is","isNot","IfNotEmpty","collection","emptyState","emptyStateTitle","emptyStateMessage","empty","EmptyState","variant","EmptyStateVariant","Title","headingLevel","size","EmptyStateBody","length","pageToolbar","PageHeaderTools","className","PageHeaderToolsGroup","PageHeaderToolsItem","id","PageHeader","logo","Brand","onClick","navigateTo","linkTo","src","alt","showNavToggle","headerTools","handleTabClick","event","eventKey","tabKey","tabs","Tab","key","title","TabTitleText","featureRoleManagement","push","featureSettings","Tabs","activeKey","onSelect","postConstruct","PageErrorType","navigateBack","window","history","back","PageSection","PageSectionVariants","EmptyStateIcon","icon","LockedIcon","EmptyStateSecondaryActions","Button","ExclamationCircleIcon","setTimeout","loadPageData","initializePageState","isLoading","componentDidCatch","error","errorInfo","handleError","React","isError","is403Error","AccessErrorPage","state","is419Error","RateLimitErrorPage","isFilled","Flex","FlexItem","Spinner","renderPage","createLoaders","handleServerError","errorMessage","Server","getPathParam","paramName","paramValue","match","params","decodeURIComponent","loaders","Array","isArray","updateCurrentUser","setSingleState","Promise","all","then","catch","debug","retries","getRetries","incrementRetries","Math","pow","pageLoadRetries","status","errorType","setMultiState","type","handleInputChange","value","oldValid","isValid","validate","currentValue","isDirty","onValid","onChange","handleKeyPress","code","onCancel","onSave","InputGroup","TextInput","name","validated","onKeyDown","trim","num","Number","isInteger","ConfigProperty","property","useState","isEditing","setEditing","newPropertyValue","setNewPropertyValue","setValid","onCheckboxChange","checked","onPropertyValueChange","newValue","onPropertyValueValid","valid","onCancelEdit","onStartEditing","onSavePropertyValue","renderStringProp","flexWrap","default","grow","label","description","If","condition","PropertyInput","align","PencilAltIcon","isDisabled","CheckIcon","CloseIcon","Switch","isChecked","PROPERTY_GROUPS","propertyNames","acceptProperty","searchCriteria","sc","toLocaleLowerCase","indexOf","onSearchCriteria","criteria","onSearchSettings","filterProperties","onSearchClear","onPropertyChange","setConfigurationProperty","settingChanged","onPropertyReset","resetConfigurationProperty","padding","TextContent","style","marginTop","marginBottom","maxWidth","SearchInput","placeholder","onSearch","onClear","searchedProperties","propertyGroups","map","group","properties","Card","CardTitle","CardBody","prop","onReset","listConfigurationProperties","groupFor","groups","forEach","sort","prop1","prop2","localeCompare","filteredProperties","filter","SettingsPage","AVRO","PROTOBUF","JSON","OPENAPI","ASYNCAPI","GRAPHQL","KCONNECT","WSDL","XSD","XML"],"sourceRoot":""}