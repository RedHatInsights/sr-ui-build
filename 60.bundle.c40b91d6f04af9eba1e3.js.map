{"version":3,"file":"60.bundle.c40b91d6f04af9eba1e3.js","mappings":"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","sources":["webpack://@apicurio/registry-ui/./src/app/pages/roles/components/empty/empty.tsx","webpack://@apicurio/registry-ui/./src/app/pages/roles/components/modals/selectPrincipalAccount.tsx","webpack://@apicurio/registry-ui/./src/app/pages/roles/components/modals/grantAccessModal.tsx","webpack://@apicurio/registry-ui/./src/app/pages/roles/components/roleList/roleList.tsx","webpack://@apicurio/registry-ui/./src/app/pages/roles/roles.tsx"],"sourcesContent":["/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport {Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title} from '@patternfly/react-core';\nimport {PlusCircleIcon} from \"@patternfly/react-icons\";\nimport {PureComponent, PureComponentProps, PureComponentState} from \"../../../../components\";\nimport {If} from \"../../../../components/common/if\";\n\n/**\n * Properties\n */\nexport interface RoleMappingsEmptyStateProps extends PureComponentProps {\n    isFiltered?: boolean;\n    onCreateRoleMapping?: ()=>void;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface RoleMappingsEmptyStateState extends PureComponentState {\n}\n\n\n/**\n * Models the empty state for the Artifacts page (when there are no artifacts).\n */\nexport class RoleMappingsEmptyState extends PureComponent<RoleMappingsEmptyStateProps, RoleMappingsEmptyStateState> {\n\n    constructor(props: Readonly<RoleMappingsEmptyStateProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <EmptyState variant={EmptyStateVariant.full}>\n                <EmptyStateIcon icon={PlusCircleIcon}/>\n                <Title headingLevel=\"h5\" size=\"lg\">\n                    No Role Mappings\n                </Title>\n                <If condition={() => this.props.isFiltered === true}>\n                    <EmptyStateBody>\n                        No role mappings match your filter settings.  Change your filter or perhaps create a new\n                        role mapping.\n                    </EmptyStateBody>\n                </If>\n                <If condition={() => !this.props.isFiltered}>\n                    <EmptyStateBody>\n                        There are currently no role mappings configured for the registry.  Click the \"Grant Access\"\n                        button above to grant access to a user.\n                    </EmptyStateBody>\n                    <Button variant=\"primary\" data-testid=\"btn-grant-access\" onClick={this.props.onCreateRoleMapping}>Grant Access</Button>\n                </If>\n            </EmptyState>\n        );\n    }\n\n    protected initializeState(): RoleMappingsEmptyStateState {\n        return {};\n    }\n\n}\n","/**\n * @license\n * Copyright 2021 Red Hat\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from 'react';\nimport {Divider, Select, SelectGroup, SelectOption, SelectVariant,} from '@patternfly/react-core';\nimport {PureComponent, PureComponentProps, PureComponentState} from \"../../../../components\";\nimport {Principal} from '../../../../../services/config';\n\nexport interface SelectPrincipalAccountProps extends PureComponentProps{\n  id: string | undefined;\n  onIdUpdate: (id: string) => void;\n  initialOptions: Principal[];\n}\n\nexport interface SelectPrincipalAccountState extends PureComponentState{\n  id: string | undefined;\n  isOpen: boolean;\n}\n\nexport class SelectPrincipalAccount extends PureComponent<SelectPrincipalAccountProps, SelectPrincipalAccountState> {\n\n  constructor(props: Readonly<SelectPrincipalAccountProps>) {\n    super(props);\n}\n    private onToggle = (isOpen: boolean) => {\n      this.setSingleState(\"isOpen\", isOpen);\n    };\n\n    private clearSelection = () => {\n      this.reset();\n    };\n\n    private onSelect = (_event:any, selection:any, isPlaceholder:any) => {\n      if (isPlaceholder) {\n        this.clearSelection();\n      } else {\n        this.setMultiState({\n          id: selection,\n          isOpen: false\n        })\n      }\n      this.props.onIdUpdate(selection);\n    };\n\n  protected initializeState(): SelectPrincipalAccountState {\n    return {\n      id: \"\",\n      isOpen: false\n    };\n  }\n\n  public reset(): void {\n    this.setMultiState(this.initializeState());\n  }\n\n  public render(): React.ReactElement {\n    const { initialOptions,\n      id\n    } = this.props;\n\n    return (\n      <Select\n        variant={SelectVariant.typeahead}\n        typeAheadAriaLabel={\"Select an account\"}\n        onToggle={this.onToggle}\n        onSelect={this.onSelect}\n        onClear={this.clearSelection}\n        selections={id}\n        isOpen={this.state.isOpen}\n        isInputValuePersisted={true}\n        placeholderText={\"Select an account\"}\n        isCreatable={false}\n        maxHeight={400}\n        isGrouped={true}\n      >\n        {[\n          <SelectGroup\n            label={\"Service accounts\"}\n            key='service_accounts_group'\n          >\n            {\n            initialOptions\n              .filter(\n                (principal) =>\n                  principal.principalType === \"SERVICE_ACCOUNT\"\n              )\n              .map((principal, index) => (\n                <SelectOption\n                  key={index}\n                  value={principal.id}\n                  description={principal.displayName}\n                >\n                  {principal.id}\n                </SelectOption>\n              ))}\n          </SelectGroup>,\n          <Divider key='divider' />,\n          <SelectGroup\n            label={\"User accounts\"}\n            key='user_accounts_group'\n          >\n            {initialOptions\n              .filter(\n                (principal) =>\n                  principal.principalType === \"USER_ACCOUNT\"\n              )\n              .map((principal, index) => (\n                <SelectOption\n                  key={index}\n                  value={principal.id}\n                  description={principal.displayName}\n                >\n                  {principal.id}\n                </SelectOption>\n              ))}\n          </SelectGroup>,\n        ]}\n      </Select>\n    );\n  };\n}\n","/**\n * @license\n * Copyright 2021 Red Hat\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport {\n    Button,\n    DescriptionList,\n    DescriptionListDescription,\n    DescriptionListGroup,\n    DescriptionListTerm,\n    Form,\n    FormGroup,\n    Modal,\n    Radio,\n    Select,\n    SelectOption,\n    SelectOptionObject,\n    SelectVariant,\n    TextInput,\n    Tooltip\n} from '@patternfly/react-core';\nimport {Principal, Services} from \"../../../../../services\";\nimport {PureComponent, PureComponentProps, PureComponentState} from \"../../../../components\";\nimport {RoleMapping, RoleTypes} from \"../../../../../models\";\nimport {OutlinedQuestionCircleIcon} from '@patternfly/react-icons'\nimport {SelectPrincipalAccount} from \"./selectPrincipalAccount\";\nimport \"./grantAccessModal.css\";\n\n/**\n * Properties\n */\nexport interface GrantAccessModalProps extends PureComponentProps {\n    isOpen: boolean;\n    isUpdateAccess: boolean;\n    serviceRegistryInstance?: string;\n    accountId?: string;\n    roles: null | RoleMapping[];\n    defaultRole?: RoleMapping;\n    onClose: () => void;\n    onGrant: (accountId: string, role: string, isUpdate: boolean) => void;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface GrantAccessModalState extends PureComponentState {\n    isAccountIDSelectOpen: boolean;\n    isValid: boolean;\n    accountId: string | undefined;\n    role: string | undefined;\n}\n\n\n/**\n * Models the modal dialog for granting access to a user.\n */\nexport class GrantAccessModal extends PureComponent<GrantAccessModalProps, GrantAccessModalState> {\n\n    constructor(props: Readonly<GrantAccessModalProps>) {\n        super(props);\n    }\n    componentDidUpdate(prevProps: GrantAccessModalProps) {\n        if (this.props.defaultRole !== prevProps.defaultRole) {\n            if (this.props.defaultRole) {\n                this.setMultiState({\n                    accountId: this.props.defaultRole.principalId,\n                    role: this.props.defaultRole.role\n                });\n            } else {\n                this.setMultiState({\n                    accountId: \"\",\n                    role: undefined\n                });\n            }\n        }\n    }\n\n    public render(): React.ReactElement {\n        let principals: Principal[] | undefined = Services.getConfigService().principals();\n\n        return (\n            <Modal\n                title=\"Manage Permissions\"\n                description=\"Manage access to resources in this Service Registry instance by assigning permissions to an account.\"\n                variant=\"medium\"\n                isOpen={this.props.isOpen}\n                onClose={this.props.onClose}\n                className=\"grant-access-modal pf-m-redhat-font\"\n                actions={[\n                    <Button key=\"grant\" variant=\"primary\" data-testid=\"modal-btn-grant\" onClick={this.doGrantAccess} isDisabled={!this.state.isValid}>{this.props.isUpdateAccess ? \"Update\" : \"Create\"}</Button>,\n                    <Button key=\"cancel\" variant=\"link\" data-testid=\"modal-btn-cancel\" onClick={this.props.onClose}>Cancel</Button>\n                ]}\n            >\n\n\n                <Form>\n                    {this.props.serviceRegistryInstance !== undefined ? (<DescriptionList>\n                        <DescriptionListGroup>\n                            <DescriptionListTerm>Service Registry instance</DescriptionListTerm>\n                            <DescriptionListDescription>{this.props.serviceRegistryInstance}</DescriptionListDescription>\n                        </DescriptionListGroup>\n                    </DescriptionList>\n                    ) : undefined}\n\n                    <FormGroup\n                        label=\"Account ID\"\n                        labelIcon={<Tooltip\n                            position=\"top\"\n                            content={\n                              <div>A service account enables your application or tool to connect securely to your resources. A user account enables users in your organization to access resources.</div>\n                            }\n                          >\n                            <OutlinedQuestionCircleIcon/>\n                          </Tooltip>}\n                        isRequired\n                        fieldId=\"grant-access-account-id\"\n                    >\n                        {principals ? <SelectPrincipalAccount\n                            id={this.state.accountId}\n                            onIdUpdate={(id: string) => {\n                                this.setMultiState({\n                                    accountId: id,\n                                    isValid: this.checkValid(id, this.state.role),\n                                    isAccountIDSelectOpen: false\n                                  });\n                            }}\n                            initialOptions={principals? principals: []}/> :\n                            this.props.roles !== null ?\n                            <Select\n                                id=\"grant-access-principal\"\n                                name=\"grant-access-principal\"\n                                variant={SelectVariant.typeahead}\n                                typeAheadAriaLabel=\"Select an account ID\"\n                                onToggle={this.onAccountIDToggle}\n                                onSelect={this.onAccountIDSelect}\n                                onClear={this.onAccountIDClearSelection}\n                                selections={this.state.accountId}\n                                isOpen={this.state.isAccountIDSelectOpen}\n                                isInputValuePersisted={true}\n                                placeholderText={this.props.isUpdateAccess ? this.props.defaultRole?.principalId : \"Select an account ID\"}\n                                maxHeight = {'100px'}\n                                isDisabled={this.props.isUpdateAccess}\n                            >\n                                {this.props.roles.map((option, index) => (\n                                    <SelectOption\n                                        key={index}\n                                        value={option.principalId}\n\n                                    />\n                                ))}\n                            </Select> :\n                            <TextInput\n                                isRequired\n                                type=\"text\"\n                                id=\"grant-access-principal\"\n                                name=\"grant-access-principal\"\n                                aria-describedby=\"grant-access-principal-helper\"\n                                onChange={this.handlePrincipalChange}\n                            />\n                        }\n                    </FormGroup>\n                    <FormGroup\n                        label=\"Role\"\n                        isRequired\n                        fieldId=\"grant-access-role\"\n                    >\n                        <Radio id=\"grant-access-role-admin\"\n                            className=\"grant-access-radio-button\"\n                            name=\"grant-access-role\"\n                            label=\"Administrator\"\n                            description=\"Give roles to other principals on this Service Registry instance, configure global rules, and access data import and export features.\"\n                            value={RoleTypes.ADMIN}\n                            onChange={this.handleRoleChange}\n                            isChecked={this.state.role == RoleTypes.ADMIN}\n                        />\n\n                        <Radio id=\"grant-access-role-manager\"\n                            className=\"grant-access-radio-button\"\n                            name=\"grant-access-role\"\n                            label=\"Manager\"\n                            description=\"Read and write artifacts on this Service Registry instance.\"\n                            value={RoleTypes.DEVELOPER}\n                            onChange={this.handleRoleChange}\n                            isChecked={this.state.role == RoleTypes.DEVELOPER} />\n\n                        <Radio id=\"grant-access-role-viewer\"\n                            className=\"grant-access-radio-button\"\n                            name=\"grant-access-role\"\n                            label=\"Viewer\"\n                            description=\"Read artifacts on this Service Registry instance.\"\n                            value={RoleTypes.READ_ONLY}\n                            onChange={this.handleRoleChange}\n                            isChecked={this.state.role == RoleTypes.READ_ONLY}/>\n                    </FormGroup>\n                </Form>\n\n            </Modal>\n        );\n    }\n\n    protected initializeState(): GrantAccessModalState {\n        return {\n            isAccountIDSelectOpen: false,\n            isValid: false,\n            accountId: this.props.isUpdateAccess && this.props.roles ? this.props.roles[0].principalId : \"\",\n            role: undefined\n        };\n    }\n\n    public reset(): void {\n        this.setMultiState(this.initializeState());\n    }\n\n    private onAccountIDClearSelection = () => {\n        this.setMultiState({\n          accountID: \"\",\n          isAccountIDSelectOpen: false\n        });\n      };\n\n    private handlePrincipalChange = (value: string): void => {\n        this.setMultiState({\n            accountId: value,\n            isValid: this.checkValid(value, this.state.role)\n        })\n    };\n\n    private onAccountIDSelect = (_event: any, selection: string | SelectOptionObject, isPlaceholder: boolean | undefined) => {\n        if (isPlaceholder) this.onAccountIDClearSelection();\n        else {\n          this.setMultiState({\n            accountId: selection,\n            isValid: this.checkValid(selection, this.state.role),\n            isAccountIDSelectOpen: false\n          });\n          console.log('selected:', selection);\n        }\n      };\n\n    private onAccountIDToggle = (isOpen: boolean) => {\n        this.setSingleState(\"isAccountIDSelectOpen\", isOpen);\n      };\n\n    private handleRoleChange = (_isChecked: boolean, event: any): void => {\n        this.setMultiState({\n            role: event.target.value,\n            isValid: this.checkValid(this.state.accountId, event.target.value)\n        })\n    };\n\n    private doGrantAccess = (): void => {\n        this.props.onGrant(this.state.accountId as string,\n            this.state.role as string,\n            this.props.roles?.find(role => role.principalId == this.state.accountId) !== undefined);\n        this.reset();\n    }\n\n    private checkValid(accountId: SelectOptionObject | string | undefined, role: string | undefined): boolean {\n        if (!accountId) {\n            return false;\n        }\n        if (!role) {\n            return false;\n        }\n        return true;\n    }\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport \"./roleList.css\";\nimport {\n    Button,\n    Modal\n} from '@patternfly/react-core';\nimport { TableComposable, Thead, Tbody, Tr, Th, Td } from '@patternfly/react-table';\nimport { PureComponent, PureComponentProps, PureComponentState } from \"../../../../components\";\nimport { RoleMapping, RoleTypes } from \"../../../../../models\";\nimport { RoleMappingsEmptyState } from '../empty';\n\n/**\n * Properties\n */\nexport interface RoleListProps extends PureComponentProps {\n    roles: RoleMapping[];\n    roleFilter: RoleMapping;\n    onRevoke: (principalId: string) => void;\n    onEditRoleMapping: (role: RoleMapping) => void;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface RoleListState extends PureComponentState {\n    isRevokeModalOpen: boolean;\n    revokingPrincipalId: string;\n    currentRole: RoleMapping;\n}\n\n/**\n * Models the list of roles.\n */\nexport class RoleList extends PureComponent<RoleListProps, RoleListState> {\n\n    constructor(props: Readonly<RoleListProps>) {\n        super(props);\n    }\n  \n    public render(): React.ReactElement {\n\n        const roleActions = (role: RoleMapping) => [\n            {\n                title: 'Edit',\n                onClick: () => { this.props.onEditRoleMapping(role)}\n            },\n            {\n                title: 'Revoke Access',\n                onClick: () => {this.onRevokeRoleMapping(role.principalId)}\n            }\n        ];\n\n        let filteredRoles = this.props.roles.sort((rm1, rm2) => {\n            return rm1.principalId.localeCompare(rm2.principalId);\n        }).filter((role: RoleMapping)=>{\n            if(this.props.roleFilter.principalId.length > 0) {\n                return role.principalId.includes(this.props.roleFilter.principalId);\n            } \n            return true;\n        }).filter((role: RoleMapping)=>{\n            if (this.props.roleFilter.role.length > 0) {\n                switch (role.role) {\n                    case RoleTypes.DEVELOPER:\n                        return \"Manager\".includes(this.props.roleFilter.role);\n                    case RoleTypes.ADMIN:\n                        return \"Admin\".includes(this.props.roleFilter.role);\n                    case RoleTypes.READ_ONLY:\n                        return \"Viewer\".includes(this.props.roleFilter.role);\n                }\n            }\n            return true;\n        });\n        return (\n            filteredRoles.length === 0 ?\n                <RoleMappingsEmptyState isFiltered={true}/> :\n            <React.Fragment>\n                <TableComposable>\n                    <Thead>\n                        <Tr>\n                            {/* <Th\n                            /> */}\n                            <Th>Account</Th>\n                            <Th>Role</Th>\n                        </Tr>\n                    </Thead>\n                    <Tbody>\n                        {filteredRoles.map((role, rowIndex) =>\n\n                            <Tr key={rowIndex}>\n                                {/* Disable for now until we want to support multi-select.\n                                <Td\n                                    key={`${rowIndex}_0`}\n                                    select={{\n                                        rowIndex,\n                                        onSelect: this.onSelect,\n                                        isSelected: false,\n                                    }}\n                                /> */}\n                                <Td>{role.principalId}</Td>\n                                <Td>{this.roleName(role.role)}</Td>\n                                <Td className = \"role-list-action-column\"\n                                    key={`${rowIndex}_2`}\n                                    actions={{\n                                        items: roleActions(role)\n                                    }}\n                                />\n                            </Tr>\n                        )\n                        }\n                    </Tbody>\n                </TableComposable>\n                <Modal\n                    title=\"Revoke Access\"\n                    variant=\"small\"\n                    isOpen={this.state.isRevokeModalOpen}\n                    onClose={this.onRevokeModalClose}\n                    className=\"revoke-access-modal pf-m-redhat-font\"\n                    actions={[\n                        <Button key=\"revoke\" variant=\"primary\" data-testid=\"modal-btn-revoke\" onClick={this.doRevokeAccess}>Revoke</Button>,\n                        <Button key=\"cancel\" variant=\"link\" data-testid=\"modal-btn-cancel\" onClick={this.onRevokeModalClose}>Cancel</Button>\n                    ]}\n                >\n                    <p>Do you really want to revoke {this.state.revokingPrincipalId}'s access?</p>\n                </Modal>\n            </React.Fragment>\n        );\n    }\n\n    protected initializeState(): RoleListState {\n        return {\n            isRevokeModalOpen: false,\n            revokingPrincipalId: \"\",\n            currentRole: this.props.roles[0],\n        };\n    }\n\n    private roleName(role: string): string {\n        switch (role) {\n            case RoleTypes.DEVELOPER:\n                return \"Manager\";\n            case RoleTypes.ADMIN:\n                return \"Admin\";\n            case RoleTypes.READ_ONLY:\n                return \"Viewer\";\n        }\n        return role;\n    }\n\n    private onRevokeRoleMapping = (principalId: string) => {\n        this.setMultiState({\n            isRevokeModalOpen: true,\n            revokingPrincipalId: principalId\n        });    \n    };\n\n    private onRevokeModalClose = (): void => {\n        this.setSingleState(\"isRevokeModalOpen\", false);\n    };\n\n    private doRevokeAccess = (): void => {\n        this.onRevokeModalClose();\n        this.props.onRevoke(this.state.revokingPrincipalId);\n    }\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {ReactNode} from \"react\";\nimport \"./roles.css\";\nimport {\n    Button,\n    ButtonVariant,\n    InputGroup,\n    PageSection,\n    PageSectionVariants,\n    Select,\n    SelectOption,\n    SelectOptionObject,\n    SelectVariant,\n    TextInput,\n    Toolbar,\n    ToolbarContent,\n    ToolbarFilter,\n    ToolbarGroup,\n    ToolbarItem\n} from '@patternfly/react-core';\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport {PageComponent, PageProps, PageState} from \"../basePage\";\nimport {RoleMapping} from \"../../../models\";\nimport {Services} from \"../../../services\";\nimport {GrantAccessModal, RoleList, RoleMappingsEmptyState} from \"./components\";\nimport {PleaseWaitModal, RootPageHeader} from \"../../components\";\n\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface RolesPageProps extends PageProps {\n    principalSelect: any\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface RolesPageState extends PageState {\n    isCreateRoleMappingModalOpen: boolean;\n    isRoleMappingUpdate: boolean;\n    roles: RoleMapping[];\n    roleFilter: RoleMapping;\n    roleListFilterOpened: boolean;\n    roleFilterSelected: string;\n    roleFilterTextInputValue: string;\n    selectedRole: RoleMapping | undefined;\n    isPleaseWaitModalOpen: boolean;\n    pleaseWaitMessage: string;\n}\n\nconst roleFilterOptions = ['Account', 'Role'];\n/**\n * The global roles page.\n */\nexport class RolesPage extends PageComponent<RolesPageProps, RolesPageState> {\n\n    constructor(props: Readonly<RolesPageProps>) {\n        super(props);\n    }\n\n    public renderPage(): React.ReactElement {\n        return (\n            <React.Fragment>\n                <PageSection className=\"ps_roles-header\" variant={PageSectionVariants.light} padding={{ default : \"noPadding\" }}>\n                    <RootPageHeader tabKey={2} />\n                </PageSection>\n                <PageSection variant={PageSectionVariants.default} isFilled={true} className=\"ps_role-section\">\n                    {\n                        this.state.roles.length === 0 ?\n                            <RoleMappingsEmptyState onCreateRoleMapping={this.onCreateRoleMapping}/>\n                            :\n                            <>\n                                <Toolbar id=\"toolbar\" clearAllFilters={() => {\n                                    this.setSingleState(\"roleFilter\", {\n                                        principalId: \"\",\n                                        role: \"\"\n                                    });\n                                }}>\n                                    <ToolbarContent>\n                                        <ToolbarGroup>\n                                            <ToolbarItem className=\"ps_role-filter-select-toolbar-item\">\n                                                <Select\n                                                    variant={SelectVariant.single}\n                                                    aria-label=\"Filter On\"\n                                                    onToggle={this.onRoleFilterToggle}\n                                                    onSelect={this.onRoleFilterSelect}\n                                                    selections={this.state.roleFilterSelected}\n                                                    isOpen={this.state.roleListFilterOpened}\n                                                >\n                                                    {roleFilterOptions.map((option, index) => (\n                                                        <SelectOption key={index} value={option} />\n                                                    ))}\n                                                </Select>\n                                            </ToolbarItem>\n                                            <ToolbarItem>\n                                                <InputGroup>\n                                                    <TextInput value={this.state.roleFilterTextInputValue} name=\"roleFilterInput\" id=\"roleFilterInput\" type=\"search\" aria-label=\"role filter input\" onChange={this.onRoleFilterInputChange} />\n                                                    <Button variant={ButtonVariant.control} aria-label=\"search button for search input\" onClick={this.onRoleFilterApplyClick}>\n                                                        <SearchIcon />\n                                                    </Button>\n                                                </InputGroup>\n                                            </ToolbarItem>\n                                            <ToolbarItem>\n                                                <Button variant=\"primary\" data-testid=\"btn-grant-access\" onClick={this.onCreateRoleMapping}>Grant Access</Button>\n                                            </ToolbarItem>\n                                            <ToolbarFilter chips={this.state.roleFilter.principalId.length > 0 ? [this.state.roleFilter.principalId] : undefined}\n                                                deleteChip={() => {\n                                                    this.setSingleState(\"roleFilter\", {\n                                                        principalId: \"\",\n                                                        role: this.state.roleFilter.role\n                                                    });\n                                                }}\n                                                categoryName=\"Account\"> </ToolbarFilter>\n                                            <ToolbarFilter chips={this.state.roleFilter.role.length > 0 ? [this.state.roleFilter.role] : undefined}\n                                                deleteChip={() => {\n                                                    this.setSingleState(\"roleFilter\", {\n                                                        principalId: this.state.roleFilter.principalId,\n                                                        role: \"\"\n                                                    });\n                                                }}\n                                                categoryName=\"Role\"> </ToolbarFilter>\n\n                                        </ToolbarGroup>\n                                    </ToolbarContent>\n                                </Toolbar>\n                                <RoleList roles={this.state.roles} roleFilter={this.state.roleFilter} onRevoke={this.onRevokeRoleMapping} onEditRoleMapping={this.onEditRoleMapping}></RoleList>\n                            </>}\n                </PageSection>\n                <GrantAccessModal isOpen={this.state.isCreateRoleMappingModalOpen}\n                    isUpdateAccess={this.state.isRoleMappingUpdate}\n                    onClose={this.closeRoleMappingModal}\n                    onGrant={this.createRoleMapping}\n                    roles={this.state.isRoleMappingUpdate ? this.state.roles : null}\n                    defaultRole={this.state.selectedRole} />\n                <PleaseWaitModal message={this.state.pleaseWaitMessage}\n                                 isOpen={this.state.isPleaseWaitModalOpen} />\n            </React.Fragment>\n        );\n    }\n\n    protected initializePageState(): RolesPageState {\n        return {\n            isCreateRoleMappingModalOpen: false,\n            isPleaseWaitModalOpen: false,\n            isRoleMappingUpdate: false,\n            pleaseWaitMessage: \"\",\n            isLoading: true,\n            selectedRole: undefined,\n            roles: [],\n            roleFilter: { principalId: \"\", role: \"\" },\n            roleListFilterOpened: false,\n            roleFilterSelected: roleFilterOptions[0],\n            roleFilterTextInputValue: \"\"\n        };\n    }\n\n    // @ts-ignore\n    protected createLoaders(): Promise {\n        return Services.getAdminService().getRoleMappings().then(roles => {\n            this.setMultiState({\n                isLoading: false,\n                roles\n            });\n        });\n    }\n\n    private onRoleFilterToggle = (isExpanded: boolean): void => {\n        this.setSingleState(\"roleListFilterOpened\", isExpanded)\n    }\n\n    private onRoleFilterSelect = (_event: any, selection: string | SelectOptionObject, isPlaceholder: boolean | undefined) => {\n        this.setMultiState({\n            roleFilterSelected: selection,\n            roleListFilterOpened: false\n        });\n    };\n\n    private onRoleFilterInputChange = (value: string) => {\n        this.setSingleState(\"roleFilterTextInputValue\", value)\n    }\n    private onRoleFilterApplyClick = () => {\n        let newRoleMappingFilter: RoleMapping = {\n            principalId: this.state.roleFilterSelected == roleFilterOptions[0] ? this.state.roleFilterTextInputValue : this.state.roleFilter?.principalId,\n            role: this.state.roleFilterSelected == roleFilterOptions[1] ? this.state.roleFilterTextInputValue : this.state.roleFilter.role\n        }\n        this.setSingleState(\"roleFilter\", newRoleMappingFilter);\n    }\n    private onCreateRoleMapping = (): void => {\n        this.setSingleState(\"isCreateRoleMappingModalOpen\", true);\n    };\n\n    private closeRoleMappingModal = (): void => {\n        this.setMultiState({\n            selectedRole: undefined,\n            isRoleMappingUpdate: false,\n            isCreateRoleMappingModalOpen: false\n        });\n    };\n\n    private onEditRoleMapping = (role: RoleMapping) => {\n        this.setMultiState({\n            selectedRole: role,\n            isRoleMappingUpdate: true\n        })\n        this.onCreateRoleMapping();\n    }\n\n    private onUpdateRoleMapping = (principalId: string, role: string): void => {\n        this.pleaseWait(true, \"Granting access, please wait...\");\n        Services.getAdminService().updateRoleMapping(principalId, role).then((mapping) => {\n            let currentRoleMappings = this.state.roles;\n            currentRoleMappings.map((role, index) => {\n                if (role.principalId == mapping.principalId) {\n                    currentRoleMappings[index] = mapping;\n                    console.log(\"found role\")\n                }\n            });\n\n            this.pleaseWait(false, \"\");\n            this.setSingleState(\"roles\", [\n                ...currentRoleMappings\n            ]);\n        }).catch(e => this.handleServerError(e, \"Error updating access.\"));\n    };\n\n    private createRoleMapping = (principalId: string, role: string, isUpdate: boolean): void => {\n        this.closeRoleMappingModal();\n        if (isUpdate) {\n            this.onUpdateRoleMapping(principalId, role);\n        } else {\n            this.pleaseWait(true, \"Granting access, please wait...\");\n            Services.getAdminService().createRoleMapping(principalId, role).then((mapping) => {\n                this.pleaseWait(false, \"\");\n                this.setSingleState(\"roles\", [\n                    mapping, ...this.state.roles\n                ]);\n            }).catch(e => this.handleServerError(e, \"Error granting access.\"));\n        }\n    };\n\n    private onRevokeRoleMapping = (principalId: string): void => {\n        this.pleaseWait(true, `Revoking access for ${principalId}, please wait...`);\n        Services.getAdminService().deleteRoleMapping(principalId).then(() => {\n            this.pleaseWait(false, \"\");\n            this.removeMapping(principalId);\n        }).catch(e => this.handleServerError(e, \"Error revoking access.\"));\n    };\n\n    private pleaseWait = (isOpen: boolean, message: string): void => {\n        this.setMultiState({\n            isPleaseWaitModalOpen: isOpen,\n            pleaseWaitMessage: message\n        });\n    };\n\n    private removeMapping(principalId: string): void {\n        const newRoles: RoleMapping[] =\n            this.state.roles.filter(rm => {\n                return rm.principalId !== principalId;\n            });\n        this.setSingleState(\"roles\", newRoles);\n    }\n\n}\n"],"names":["props","render","EmptyState","variant","EmptyStateVariant","EmptyStateIcon","icon","PlusCircleIcon","Title","headingLevel","size","If","condition","isFiltered","EmptyStateBody","Button","onClick","this","onCreateRoleMapping","initializeState","onToggle","isOpen","setSingleState","clearSelection","reset","onSelect","_event","selection","isPlaceholder","setMultiState","id","onIdUpdate","initialOptions","Select","SelectVariant","typeAheadAriaLabel","onClear","selections","state","isInputValuePersisted","placeholderText","isCreatable","maxHeight","isGrouped","SelectGroup","label","key","filter","principal","principalType","map","index","SelectOption","value","description","displayName","Divider","onAccountIDClearSelection","accountID","isAccountIDSelectOpen","handlePrincipalChange","accountId","isValid","checkValid","role","onAccountIDSelect","console","log","onAccountIDToggle","handleRoleChange","_isChecked","event","target","doGrantAccess","onGrant","undefined","roles","find","principalId","componentDidUpdate","prevProps","defaultRole","principals","Services","Modal","title","onClose","className","actions","isDisabled","isUpdateAccess","Form","serviceRegistryInstance","DescriptionList","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","FormGroup","labelIcon","Tooltip","position","content","OutlinedQuestionCircleIcon","isRequired","fieldId","SelectPrincipalAccount","name","option","TextInput","type","onChange","Radio","RoleTypes","isChecked","onRevokeRoleMapping","isRevokeModalOpen","revokingPrincipalId","onRevokeModalClose","doRevokeAccess","onRevoke","roleActions","onEditRoleMapping","filteredRoles","sort","rm1","rm2","localeCompare","roleFilter","length","includes","TableComposable","Thead","Tr","Th","Tbody","rowIndex","Td","roleName","items","currentRole","roleFilterOptions","onRoleFilterToggle","isExpanded","onRoleFilterSelect","roleFilterSelected","roleListFilterOpened","onRoleFilterInputChange","onRoleFilterApplyClick","newRoleMappingFilter","roleFilterTextInputValue","closeRoleMappingModal","selectedRole","isRoleMappingUpdate","isCreateRoleMappingModalOpen","onUpdateRoleMapping","pleaseWait","updateRoleMapping","then","mapping","currentRoleMappings","catch","e","handleServerError","createRoleMapping","isUpdate","deleteRoleMapping","removeMapping","message","isPleaseWaitModalOpen","pleaseWaitMessage","renderPage","PageSection","PageSectionVariants","padding","default","tabKey","isFilled","Toolbar","clearAllFilters","ToolbarContent","ToolbarGroup","ToolbarItem","InputGroup","ButtonVariant","SearchIcon","ToolbarFilter","chips","deleteChip","categoryName","initializePageState","isLoading","createLoaders","getRoleMappings","newRoles","rm"],"sourceRoot":""}