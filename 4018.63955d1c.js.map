{"version":3,"file":"4018.63955d1c.js","mappings":"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","sources":["webpack://@apicurio/registry-ui/./src/app/components/modals/progressModal.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifacts/artifacts.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifacts/components/artifactList/artifactGroup.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifacts/components/artifactList/artifactList.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifacts/components/artifactList/artifactName.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifacts/components/empty/empty.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifacts/components/toolbar/toolbar.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifacts/components/uploadForm/uploadForm.tsx"],"sourcesContent":["/**\n * @license\n * Copyright 2022 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport \"./progressModal.css\";\nimport { Modal, Progress } from \"@patternfly/react-core\";\nimport { PureComponent, PureComponentProps, PureComponentState } from \"../baseComponent\";\n\n\n/**\n * Properties\n */\nexport interface ProgressModalProps extends PureComponentProps {\n    title: string;\n    isCloseable: boolean;\n    message: string;\n    isOpen: boolean;\n    progress: number | undefined;\n    onClose: () => void;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface ProgressModalState extends PureComponentState {\n}\n\n/**\n * Models the \"progress\" modal.  This is shown when the user performs an asynchronous operation\n * with trackable progress (by percentage).\n */\nexport class ProgressModal extends PureComponent<ProgressModalProps, ProgressModalState> {\n\n    constructor(props: Readonly<ProgressModalProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <Modal\n                title={this.props.title}\n                variant=\"small\"\n                isOpen={this.props.isOpen}\n                showClose={this.props.isCloseable}\n                onClose={this.props.onClose}\n                className=\"progress pf-m-redhat-font\"\n                aria-label=\"progress-modal\"\n            >\n                <Progress title={this.props.message} value={this.props.progress} />\n            </Modal>\n        );\n    }\n\n    protected initializeState(): ProgressModalState {\n        return {};\n    }\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./artifacts.css\";\nimport {\n    Button,\n    FileUpload,\n    Flex,\n    FlexItem,\n    Form,\n    FormGroup,\n    Modal,\n    PageSection,\n    PageSectionVariants,\n    Spinner\n} from \"@patternfly/react-core\";\nimport { ArtifactList } from \"./components/artifactList\";\nimport { PageComponent, PageProps, PageState } from \"../basePage\";\nimport { ArtifactsPageToolbar, ArtifactsPageToolbarFilterCriteria } from \"./components/toolbar\";\nimport { ArtifactsPageEmptyState } from \"./components/empty\";\nimport { UploadArtifactForm } from \"./components/uploadForm\";\nimport { InvalidContentModal } from \"../../components/modals\";\nimport { If } from \"../../components/common/if\";\nimport { ArtifactsSearchResults, CreateArtifactData, GetArtifactsCriteria, Paging, Services } from \"../../../services\";\nimport { SearchedArtifact } from \"../../../models\";\nimport { PleaseWaitModal } from \"../../components/modals/pleaseWaitModal\";\nimport { RootPageHeader } from \"../../components\";\nimport { ProgressModal } from \"../../components/modals/progressModal\";\nimport { ApiError } from \"src/models/apiError.model\";\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface ArtifactsPageProps extends PageProps {\n\n}\n\n/**\n * State\n */\nexport interface ArtifactsPageState extends PageState {\n    criteria: ArtifactsPageToolbarFilterCriteria;\n    isUploadModalOpen: boolean;\n    isImportModalOpen: boolean;\n    isUploadFormValid: boolean;\n    isImportFormValid: boolean;\n    isInvalidContentModalOpen: boolean;\n    isPleaseWaitModalOpen: boolean;\n    isSearching: boolean;\n    paging: Paging;\n    results: ArtifactsSearchResults | null;\n    uploadFormData: CreateArtifactData | null;\n    invalidContentError: ApiError | null;\n    initFromSearch: string;\n    importFilename: string;\n    importFile: string | File;\n    isImporting: boolean;\n    importProgress: number;\n}\n\n/**\n * The artifacts page.\n */\nexport class ArtifactsPage extends PageComponent<ArtifactsPageProps, ArtifactsPageState> {\n\n    constructor(props: Readonly<ArtifactsPageProps>) {\n        super(props);\n    }\n\n    componentDidUpdate(prevProps: Readonly<ArtifactsPageProps>, prevState: Readonly<ArtifactsPageState>, snapshot?: {}) {\n        // @ts-ignore\n        if (this.props.history.location.search !== this.state.initFromSearch) {\n            this.setMultiState(this.initializePageState(), () => this.search());\n        }\n    }\n\n    public renderPage(): React.ReactElement {\n        return (\n            <React.Fragment>\n                <PageSection className=\"ps_artifacts-header\" variant={PageSectionVariants.light} padding={{ default: \"noPadding\" }}>\n                    <RootPageHeader tabKey={0} />\n                </PageSection>\n                <If condition={this.showToolbar}>\n                    <PageSection variant={PageSectionVariants.light} padding={{default : \"noPadding\"}}>\n                        <ArtifactsPageToolbar artifacts={this.results()}\n                                              criteria={this.state.criteria}\n                                              paging={this.state.paging}\n                                              onPerPageSelect={this.onPerPageSelect}\n                                              onSetPage={this.onSetPage}\n                                              onUploadArtifact={this.onUploadArtifact}\n                                              onExportArtifacts={this.onExportArtifacts}\n                                              onImportArtifacts={this.onImportArtifacts}\n                                              onCriteriaChange={this.onFilterChange}/>\n                    </PageSection>\n                </If>\n                <PageSection variant={PageSectionVariants.default} isFilled={true}>\n                    {\n                        this.state.isSearching ?\n                            <Flex>\n                                <FlexItem><Spinner size=\"lg\"/></FlexItem>\n                                <FlexItem><span>Searching...</span></FlexItem>\n                            </Flex>\n                        :\n                        this.artifactsCount() === 0 ?\n                            <ArtifactsPageEmptyState onUploadArtifact={this.onUploadArtifact}\n                                                     onImportArtifacts={this.onImportArtifacts}\n                                                     isFiltered={this.isFiltered()}/>\n                        :\n                            <ArtifactList artifacts={this.artifacts()} onGroupClick={this.onGroupClick} />\n                    }\n                </PageSection>\n                <Modal\n                    title=\"Upload Artifact\"\n                    variant=\"large\"\n                    isOpen={this.state.isUploadModalOpen}\n                    onClose={this.onUploadModalClose}\n                    className=\"upload-artifact-modal pf-m-redhat-font\"\n                    actions={[\n                        <Button key=\"upload\" variant=\"primary\" data-testid=\"modal-btn-upload\" onClick={this.doUploadArtifact} isDisabled={!this.state.isUploadFormValid}>Upload</Button>,\n                        <Button key=\"cancel\" variant=\"link\" data-testid=\"modal-btn-cancel\" onClick={this.onUploadModalClose}>Cancel</Button>\n                    ]}\n                >\n                    <UploadArtifactForm onChange={this.onUploadFormChange} onValid={this.onUploadFormValid} />\n                </Modal>\n                <InvalidContentModal error={this.state.invalidContentError}\n                                     isOpen={this.state.isInvalidContentModalOpen}\n                                     onClose={this.closeInvalidContentModal} />\n                <Modal\n                    title=\"Upload multiple artifacts\"\n                    variant=\"medium\"\n                    isOpen={this.state.isImportModalOpen}\n                    onClose={this.onImportModalClose}\n                    className=\"import-artifacts-modal pf-m-redhat-font\"\n                    actions={[\n                        <Button key=\"upload\" variant=\"primary\" data-testid=\"modal-btn-upload\" onClick={this.doImport} isDisabled={!this.state.isImportFormValid}>Upload</Button>,\n                        <Button key=\"cancel\" variant=\"link\" data-testid=\"modal-btn-cancel\" onClick={this.onImportModalClose}>Cancel</Button>\n                    ]}\n                >\n                    <Form>\n                        <FormGroup isRequired={false} fieldId=\"form-summary\">\n                            <p>\n                                Select an artifacts .zip file previously downloaded from a Service Registry instance.\n                            </p>\n                        </FormGroup>\n                        <FormGroup\n                            label=\"ZIP File\"\n                            isRequired={true}\n                            fieldId=\"form-file\"\n                            helperText=\"File format must be .zip\"\n                        >\n                            <FileUpload\n                                id=\"import-content\"\n                                data-testid=\"form-import\"\n                                filename={this.state.importFilename}\n                                filenamePlaceholder=\"Drag and drop or choose a .zip file\"\n                                isRequired={true}\n                                onChange={this.onImportFileChange}\n                            />\n                        </FormGroup>\n                    </Form>\n                </Modal>\n                <PleaseWaitModal message=\"Creating artifact, please wait...\"\n                                 isOpen={this.state.isPleaseWaitModalOpen} />\n                <ProgressModal message=\"Importing artifacts\"\n                               title=\"Upload multiple artifacts\"\n                               isCloseable={true}\n                               progress={this.state.importProgress}\n                               onClose={() => this.setSingleState(\"isImporting\", false)}\n                               isOpen={this.state.isImporting} />\n            </React.Fragment>\n        );\n    }\n\n    protected initializePageState(): ArtifactsPageState {\n        let criteria: ArtifactsPageToolbarFilterCriteria = {\n            filterSelection: \"name\",\n            filterValue: \"\",\n            ascending: true\n        }\n        // @ts-ignore\n        const location: any = this.props.history.location;\n        let initFromSearch: string = \"\";\n        if (location && location.search) {\n            const params = new URLSearchParams(location.search);\n            if (params.get(\"group\")) {\n                criteria = {\n                    filterSelection: \"group\",\n                    filterValue: params.get(\"group\") as string,\n                    ascending: true\n                }\n            }\n            initFromSearch = location.search;\n        }\n        return {\n            criteria,\n            initFromSearch,\n            isImporting: false,\n            importProgress: 0,\n            importFilename: \"\",\n            importFile: \"\",\n            invalidContentError: null,\n            isInvalidContentModalOpen: false,\n            isPleaseWaitModalOpen: false,\n            isSearching: false,\n            isUploadFormValid: false,\n            isImportFormValid: false,\n            isUploadModalOpen: false,\n            isImportModalOpen: false,\n            paging: {\n                page: 1,\n                pageSize: 10\n            },\n            results: null,\n            uploadFormData: null\n        };\n    }\n\n    // @ts-ignore\n    protected createLoaders(): Promise {\n        return this.search();\n    }\n\n    private onUploadArtifact = (): void => {\n        this.setSingleState(\"isUploadModalOpen\", true);\n    };\n\n    private onImportArtifacts = (): void => {\n        this.setSingleState(\"isImportModalOpen\", true);\n    };\n\n    private onExportArtifacts = (): void => {\n        Services.getAdminService().exportAs(\"all-artifacts.zip\").then(dref => {\n            const link = document.createElement(\"a\");\n            link.href = dref.href;\n            link.download = `all-artifacts.zip`;\n            link.click();\n        }).catch(error => this.handleServerError(error, \"Failed to export artifacts\"));\n    };\n\n    private onUploadModalClose = (): void => {\n        this.setSingleState(\"isUploadModalOpen\", false);\n    };\n\n    private onImportModalClose = (): void => {\n        this.setSingleState(\"isImportModalOpen\", false);\n    }\n\n    private onArtifactsLoaded(results: ArtifactsSearchResults): void {\n        this.setMultiState({\n            isSearching: false,\n            results\n        });\n    }\n\n    private doImport = (): void => {\n        this.setMultiState({\n            isImporting: true,\n            importProgress: 0,\n            isImportModalOpen: false\n        });\n        if (this.state.importFile != null) {\n            Services.getAdminService().importFrom(this.state.importFile, (event: any) => {\n                let progress: number = 0;\n                if (event.lengthComputable) {\n                    progress = Math.round(100 * (event.loaded / event.total));\n                }\n                this.setSingleState(\"importProgress\", progress);\n            }).then(() => {\n                setTimeout(() => {\n                    this.setMultiState({\n                        isImporting: false,\n                        importProgress: 100,\n                        isImportModalOpen: false\n                    }, this.search);\n                }, 1500);\n            }).catch(error => this.handleServerError(error, \"Error importing multiple artifacts\"));\n        }\n    };\n\n    private doUploadArtifact = (): void => {\n        this.onUploadModalClose();\n        this.pleaseWait(true);\n        if (this.state.uploadFormData !== null) {\n            // If no groupId is provided, set it to the \"default\" group\n            if (!this.state.uploadFormData.groupId) {\n                this.state.uploadFormData.groupId = \"default\";\n            }\n            Services.getGroupsService().createArtifact(this.state.uploadFormData).then(metaData => {\n                const groupId: string = metaData.groupId ? metaData.groupId : \"default\";\n                const artifactLocation: string = this.linkTo(`/artifacts/${ encodeURIComponent(groupId) }/${ encodeURIComponent(metaData.id) }`);\n                Services.getLoggerService().info(\"[ArtifactsPage] Artifact successfully uploaded.  Redirecting to details: \", artifactLocation);\n                this.navigateTo(artifactLocation)();\n            }).catch( error => {\n                this.pleaseWait(false);\n                if (error && (error.error_code === 400 || error.error_code === 409)) {\n                    this.handleInvalidContentError(error);\n                } else {\n                    this.handleServerError(error, \"Error uploading artifact.\");\n                }\n                this.setMultiState({uploadFormData: null, isUploadFormValid: false});\n            });\n        }\n    };\n\n    private results(): ArtifactsSearchResults {\n        return this.state.results ? this.state.results : {\n            artifacts: [],\n            count: 0,\n            page: 1,\n            pageSize: 10\n        };\n    }\n\n    private artifacts(): SearchedArtifact[] {\n        return this.state.results ? this.state.results.artifacts : [];\n    }\n\n    private artifactsCount(): number {\n        return this.state.results ? this.state.results.artifacts.length : 0;\n    }\n\n    private onFilterChange = (criteria: ArtifactsPageToolbarFilterCriteria): void => {\n        this.setMultiState({\n            criteria,\n            isSearching: true\n        }, () => {\n            this.search();\n        });\n    };\n\n    private isFiltered(): boolean {\n        return !!this.state.criteria.filterValue;\n    }\n\n    // @ts-ignore\n    private search(): Promise {\n        const gac: GetArtifactsCriteria = {\n            sortAscending: this.state.criteria.ascending,\n            type: this.state.criteria.filterSelection,\n            value: this.state.criteria.filterValue\n        };\n        return Services.getGroupsService().getArtifacts(gac, this.state.paging).then(results => {\n            this.onArtifactsLoaded(results);\n        }).catch(error => {\n            this.handleServerError(error, \"Error searching for artifacts.\");\n        });\n    }\n\n    private onSetPage = (event: any, newPage: number, perPage?: number): void => {\n        const paging: Paging = {\n            page: newPage,\n            pageSize: perPage ? perPage : this.state.paging.pageSize\n        };\n        this.setMultiState({\n            isSearching: true,\n            paging\n        }, () => {\n            this.search();\n        });\n    };\n\n    private onPerPageSelect = (event: any, newPerPage: number): void => {\n        const paging: Paging = {\n            page: this.state.paging.page,\n            pageSize: newPerPage\n        };\n        this.setMultiState({\n            isSearching: true,\n            paging\n        }, () => {\n            this.search();\n        });\n    };\n\n    private onUploadFormValid = (isValid: boolean): void => {\n        this.setSingleState(\"isUploadFormValid\", isValid);\n    };\n\n    private onUploadFormChange = (data: CreateArtifactData): void => {\n        this.setSingleState(\"uploadFormData\", data);\n    };\n\n    private onImportFileChange = (value: string | File, filename: string, event: any): void => {\n        if (value == \"\" && filename == \"\") {\n            this.setMultiState({\n                importFilename: \"\",\n                importFile: \"\",\n                isImportFormValid: false\n            });\n        } else {\n            const isValid: boolean = filename.toLowerCase().endsWith(\".zip\");\n            this.setMultiState({\n                importFilename: filename,\n                importFile: value,\n                isImportFormValid: isValid\n            });\n        }\n    };\n\n    private closeInvalidContentModal = (): void => {\n        this.setSingleState(\"isInvalidContentModalOpen\", false);\n    };\n\n    private pleaseWait = (isOpen: boolean): void => {\n        this.setSingleState(\"isPleaseWaitModalOpen\", isOpen);\n    };\n\n    private handleInvalidContentError(error: any): void {\n        Services.getLoggerService().info(\"[ArtifactsPage] Invalid content error:\", error);\n        this.setMultiState({\n            invalidContentError: error,\n            isInvalidContentModalOpen: true\n        });\n    }\n\n    private onGroupClick = (groupId: string): void => {\n        Services.getLoggerService().info(\"[ArtifactsPage] Filtering by group: \", groupId);\n        this.setSingleState(\"criteria\", {\n            filterSelection: \"group\",\n            filterValue: groupId,\n            ascending: this.state.criteria.ascending\n        }, () => {\n            this.search();\n        });\n    };\n\n    private showToolbar = (): boolean => {\n        if (this.state.isLoading) {\n            return false;\n        }\n        return true;\n    }\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport \"./artifactList.css\";\nimport { PureComponent, PureComponentProps, PureComponentState } from \"../../../../components\";\n\n/**\n * Properties\n */\nexport interface ArtifactGroupProps extends PureComponentProps {\n    groupId: string|null;\n    onClick: (groupId: string) => void;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface ArtifactGroupState extends PureComponentState {\n}\n\n\n/**\n * Models the list of artifacts.\n */\nexport class ArtifactGroup extends PureComponent<ArtifactGroupProps, ArtifactGroupState> {\n\n    constructor(props: Readonly<ArtifactGroupProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <a className={this.style()} onClick={this.fireOnClick}>{this.props.groupId}</a>\n        );\n    }\n\n    protected initializeState(): ArtifactGroupState {\n        return {};\n    }\n\n    private style(): string {\n        return !this.props.groupId ? \"nogroup\" : \"group\";\n    }\n\n    private fireOnClick = (): void => {\n        this.props.onClick(this.props.groupId as string);\n    };\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport \"./artifactList.css\";\nimport { Badge, DataList, DataListCell, DataListItemCells, DataListItemRow } from \"@patternfly/react-core\";\nimport { ArtifactTypeIcon, PureComponent, PureComponentProps, PureComponentState } from \"../../../../components\";\nimport { ArtifactName } from \"./artifactName\";\nimport { ArtifactGroup } from \"./artifactGroup\";\nimport { SearchedArtifact } from \"../../../../../models\";\n\n/**\n * Properties\n */\nexport interface ArtifactListProps extends PureComponentProps {\n    artifacts: SearchedArtifact[];\n    onGroupClick: (groupId: string) => void;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface ArtifactListState extends PureComponentState {\n}\n\n\n/**\n * Models the list of artifacts.\n */\nexport class ArtifactList extends PureComponent<ArtifactListProps, ArtifactListState> {\n\n    constructor(props: Readonly<ArtifactListProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <DataList aria-label=\"List of artifacts\" className=\"artifact-list\">\n                {\n                    this.props.artifacts.map( (artifact, idx) =>\n                            <DataListItemRow className=\"artifact-list-item\" key={artifact.id}>\n                                <DataListItemCells\n                                    dataListCells={[\n                                        <DataListCell key=\"type icon\" className=\"type-icon-cell\">\n                                            <ArtifactTypeIcon type={artifact.type}/>\n                                        </DataListCell>,\n                                        <DataListCell key=\"main content\" className=\"content-cell\">\n                                            <div className=\"artifact-title\">\n                                                <ArtifactGroup groupId={artifact.groupId} onClick={this.props.onGroupClick} />\n                                                <ArtifactName groupId={artifact.groupId} id={artifact.id} name={artifact.name} />\n                                                {\n                                                    this.statuses(artifact).map( status =>\n                                                        <Badge className=\"status-badge\" key={status} isRead={true}>{status}</Badge>\n                                                    )\n                                                }\n                                            </div>\n                                            <div className=\"artifact-description\">{this.description(artifact)}</div>\n                                            <div className=\"artifact-tags\">\n                                                {\n                                                    this.labels(artifact).map( label =>\n                                                        <Badge key={label} isRead={true}>{label}</Badge>\n                                                    )\n                                                }\n                                            </div>\n                                        </DataListCell>\n                                    ]}\n                                />\n                            </DataListItemRow>\n                    )\n                }\n            </DataList>\n        );\n    }\n\n    protected initializeState(): ArtifactListState {\n        return {};\n    }\n\n    private labels(artifact: SearchedArtifact): string[] {\n        return artifact.labels ? artifact.labels : [];\n    }\n\n    private statuses(artifact: SearchedArtifact): string[] {\n        const rval: string[] = [];\n        if (artifact.state === \"DISABLED\") {\n            rval.push(\"Disabled\");\n        }\n        if (artifact.state === \"DEPRECATED\") {\n            rval.push(\"Deprecated\");\n        }\n        return rval;\n    }\n\n    private description(artifact: SearchedArtifact): string {\n        if (artifact.description) {\n            return artifact.description;\n        }\n        return `An artifact of type ${artifact.type} with no description.`;\n    }\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport \"./artifactList.css\";\nimport { Link } from \"react-router-dom\";\nimport { PureComponent, PureComponentProps, PureComponentState } from \"../../../../components\";\n\n/**\n * Properties\n */\nexport interface ArtifactNameProps extends PureComponentProps {\n    groupId: string|null;\n    id: string;\n    name: string;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface ArtifactNameState extends PureComponentState {\n}\n\n\n/**\n * Models the list of artifacts.\n */\nexport class ArtifactName extends PureComponent<ArtifactNameProps, ArtifactNameState> {\n\n    constructor(props: Readonly<ArtifactNameProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return this.props.name ? (\n            <React.Fragment>\n                <Link className=\"name\" data-testid={this.testId(\"artifacts-lnk-view-\")} to={this.artifactLink()}>{this.props.name}</Link>\n                <Link className=\"id\" data-testid={this.testId(\"artifacts-lnk-view-id-\")} to={this.artifactLink()}>{this.props.id}</Link>\n            </React.Fragment>\n        ) : (\n            <React.Fragment>\n                <Link className=\"name\" data-testid={this.testId(\"artifacts-lnk-view-\")} to={this.artifactLink()}>{this.props.id}</Link>\n            </React.Fragment>\n        );\n    }\n\n    protected initializeState(): ArtifactNameState {\n        return {};\n    }\n\n    private artifactLink(): string {\n        const groupId: string = this.props.groupId == null ? \"default\" : this.props.groupId;\n        const link: string = `/artifacts/${ encodeURIComponent(groupId)}/${ encodeURIComponent(this.props.id) }`;\n        return this.linkTo(link);\n    }\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport \"./empty.css\";\nimport { Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title } from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\nimport { IfAuth, PureComponent, PureComponentProps, PureComponentState } from \"../../../../components\";\nimport { IfFeature } from \"../../../../components/common/ifFeature\";\nimport { If } from \"../../../../components/common/if\";\n\n/**\n * Properties\n */\nexport interface ArtifactsPageEmptyStateProps extends PureComponentProps {\n    isFiltered: boolean;\n    onUploadArtifact: () => void;\n    onImportArtifacts: () => void;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface ArtifactsPageEmptyStateState extends PureComponentState {\n}\n\n\n/**\n * Models the empty state for the Artifacts page (when there are no artifacts).\n */\nexport class ArtifactsPageEmptyState extends PureComponent<ArtifactsPageEmptyStateProps, ArtifactsPageEmptyStateState> {\n\n    constructor(props: Readonly<ArtifactsPageEmptyStateProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <EmptyState variant={EmptyStateVariant.full}>\n                <EmptyStateIcon icon={PlusCircleIcon}/>\n                <Title headingLevel=\"h5\" size=\"lg\">\n                    No artifacts found\n                </Title>\n                <If condition={() => this.props.isFiltered}>\n                    <EmptyStateBody>\n                        No artifacts match your filter settings.  Change your filter or perhaps Upload a new\n                        artifact.\n                    </EmptyStateBody>\n                </If>\n                <If condition={() => !this.props.isFiltered}>\n                    <EmptyStateBody>\n                        There are currently no artifacts in the registry.  Upload artifacts to view them here.\n                    </EmptyStateBody>\n                </If>\n                <IfAuth isDeveloper={true}>\n                    <IfFeature feature=\"readOnly\" isNot={true}>\n                        <Button className=\"empty-btn-upload\" variant=\"primary\" data-testid=\"empty-btn-upload\" onClick={this.props.onUploadArtifact}>Upload artifact</Button>\n                    </IfFeature>\n                </IfAuth>\n                <IfAuth isAdmin={true}>\n                    <IfFeature feature=\"readOnly\" isNot={true}>\n                        <Button className=\"empty-btn-import\" variant=\"secondary\" data-testid=\"empty-btn-import\" onClick={this.props.onImportArtifacts}>Upload multiple artifacts</Button>\n                    </IfFeature>\n                </IfAuth>\n            </EmptyState>\n        );\n    }\n\n    protected initializeState(): ArtifactsPageEmptyStateState {\n        return {};\n    }\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport \"./toolbar.css\";\nimport {\n    Button,\n    ButtonVariant,\n    Dropdown,\n    DropdownItem,\n    DropdownToggle,\n    Form,\n    InputGroup,\n    KebabToggle,\n    Pagination,\n    TextInput,\n    Toolbar,\n    ToolbarContent,\n    ToolbarItem\n} from \"@patternfly/react-core\";\nimport { SearchIcon, SortAlphaDownAltIcon, SortAlphaDownIcon } from \"@patternfly/react-icons\";\nimport { IfAuth, IfFeature, PureComponent, PureComponentProps, PureComponentState } from \"../../../../components\";\nimport { OnPerPageSelect, OnSetPage } from \"@patternfly/react-core/dist/js/components/Pagination/Pagination\";\nimport { ArtifactsSearchResults, Paging, Services } from \"../../../../../services\";\n\nexport interface ArtifactsPageToolbarFilterCriteria {\n    filterSelection: string;\n    filterValue: string;\n    ascending: boolean;\n}\n\n/**\n * Properties\n */\nexport interface ArtifactsPageToolbarProps extends PureComponentProps {\n    artifacts: ArtifactsSearchResults;\n    onCriteriaChange: (criteria: ArtifactsPageToolbarFilterCriteria) => void\n    criteria: ArtifactsPageToolbarFilterCriteria;\n    paging: Paging;\n    onPerPageSelect: OnPerPageSelect;\n    onSetPage: OnSetPage;\n    onUploadArtifact: () => void;\n    onImportArtifacts: () => void;\n    onExportArtifacts: () => void;\n}\n\n/**\n * State\n */\nexport interface ArtifactsPageToolbarState extends PureComponentState {\n    filterIsExpanded: boolean;\n    criteria: ArtifactsPageToolbarFilterCriteria;\n    kebabIsOpen: boolean;\n}\n\n/**\n * Models the toolbar for the Artifacts page.\n */\nexport class ArtifactsPageToolbar extends PureComponent<ArtifactsPageToolbarProps, ArtifactsPageToolbarState> {\n\n    constructor(props: Readonly<ArtifactsPageToolbarProps>) {\n        super(props);\n    }\n    public componentDidUpdate(prevProps: ArtifactsPageToolbarProps) {\n        if (this.props.criteria && this.props.criteria != prevProps.criteria) {\n            this.setSingleState(\"criteria\", {\n                filterSelection: this.props.criteria.filterSelection,\n                filterValue: this.props.criteria.filterValue,\n                ascending: this.props.criteria.ascending\n            });\n        }\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <Toolbar id=\"artifacts-toolbar-1\" className=\"artifacts-toolbar\">\n                <ToolbarContent>\n                    <ToolbarItem className=\"filter-item\">\n                        <Form onSubmit={this.onFilterSubmit}>\n                            <InputGroup>\n                                <Dropdown\n                                    onSelect={this.onFilterSelect}\n                                    toggle={\n                                        <DropdownToggle data-testid=\"toolbar-filter-toggle\" onToggle={this.onFilterToggle}>{this.filterValueDisplay()}</DropdownToggle>\n                                    }\n                                    isOpen={this.state.filterIsExpanded}\n                                    dropdownItems={[\n                                        <DropdownItem key=\"name\" id=\"name\" data-testid=\"toolbar-filter-name\" component=\"button\">Name</DropdownItem>,\n                                        <DropdownItem key=\"group\" id=\"group\" data-testid=\"toolbar-filter-group\" component=\"button\">Group</DropdownItem>,\n                                        <DropdownItem key=\"description\" id=\"description\" data-testid=\"toolbar-filter-description\" component=\"button\">Description</DropdownItem>,\n                                        <DropdownItem key=\"labels\" id=\"labels\" data-testid=\"toolbar-filter-labels\" component=\"button\">Labels</DropdownItem>,\n                                        <DropdownItem key=\"globalId\" id=\"globalId\" data-testid=\"toolbar-filter-globalId\" component=\"button\">GlobalId</DropdownItem>,\n                                        <DropdownItem key=\"contentId\" id=\"contentId\" data-testid=\"toolbar-filter-contentId\" component=\"button\">ContentId</DropdownItem>,\n                                    ]}\n                                />\n                                <TextInput name=\"filterValue\" id=\"filterValue\" type=\"search\"\n                                           value={this.state.criteria.filterValue}\n                                           onChange={this.onFilterValueChange}\n                                           data-testid=\"toolbar-filter-value\"\n                                           aria-label=\"search input example\"/>\n                                <Button variant={ButtonVariant.control}\n                                        onClick={this.onFilterSubmit}\n                                        data-testid=\"toolbar-btn-filter-search\"\n                                        aria-label=\"search button for search input\">\n                                    <SearchIcon/>\n                                </Button>\n                            </InputGroup>\n                        </Form>\n                    </ToolbarItem>\n                    <ToolbarItem className=\"sort-icon-item\">\n                        <Button variant=\"plain\" aria-label=\"edit\" data-testid=\"toolbar-btn-sort\" onClick={this.onToggleAscending}>\n                            {\n                                this.state.criteria.ascending ? <SortAlphaDownIcon/> : <SortAlphaDownAltIcon/>\n                            }\n                        </Button>\n                    </ToolbarItem>\n                    <ToolbarItem className=\"upload-artifact-item\">\n                        <IfAuth isDeveloper={true}>\n                            <IfFeature feature=\"readOnly\" isNot={true}>\n                                <Button className=\"btn-header-upload-artifact\" data-testid=\"btn-header-upload-artifact\"\n                                        variant=\"primary\" onClick={this.props.onUploadArtifact}>Upload artifact</Button>\n                            </IfFeature>\n                        </IfAuth>\n                    </ToolbarItem>\n                    <ToolbarItem className=\"admin-actions-item\">\n                        <IfAuth isAdmin={true}>\n                            <Dropdown\n                                onSelect={this.onKebabSelect}\n                                toggle={<KebabToggle onToggle={this.onKebabToggle} />}\n                                isOpen={this.state.kebabIsOpen}\n                                isPlain\n                                dropdownItems={[\n                                    <DropdownItem key=\"import\" id=\"import-action\" data-testid=\"toolbar-import\" component=\"button\">Upload multiple artifacts</DropdownItem>,\n                                    <DropdownItem key=\"export\" id=\"export-action\" data-testid=\"toolbar-export\" component=\"button\">Download all artifacts (.zip file)</DropdownItem>\n                                ]}\n                            />\n\n\n                            {/*<Button className=\"btn-header-export-artifacts\" data-testid=\"btn-header-export-artifacts\"*/}\n                            {/*        variant=\"secondary\" onClick={this.props.onExportArtifacts}>Export all artifacts</Button>*/}\n                        </IfAuth>\n                    </ToolbarItem>\n                    <ToolbarItem className=\"artifact-paging-item\">\n                        <Pagination\n                            variant=\"bottom\"\n                            dropDirection=\"down\"\n                            itemCount={this.totalArtifactsCount()}\n                            perPage={this.props.paging.pageSize}\n                            page={this.props.paging.page}\n                            onSetPage={this.props.onSetPage}\n                            onPerPageSelect={this.props.onPerPageSelect}\n                            widgetId=\"artifact-list-pagination\"\n                            className=\"artifact-list-pagination\"\n                        />\n                    </ToolbarItem>\n                </ToolbarContent>\n            </Toolbar>\n        );\n    }\n\n    protected initializeState(): ArtifactsPageToolbarState {\n        return {\n            filterIsExpanded: false,\n            criteria: this.props.criteria,\n            kebabIsOpen: false\n        }\n    }\n\n    private totalArtifactsCount(): number {\n        return this.props.artifacts ? this.props.artifacts.count : 0;\n    }\n\n    private onFilterToggle = (isExpanded: boolean): void => {\n        Services.getLoggerService().debug(\"[ArtifactsPageToolbar] Toggling filter dropdown.\");\n        this.setSingleState(\"filterIsExpanded\", isExpanded);\n    };\n\n    private onFilterSelect = (event: React.SyntheticEvent<HTMLDivElement>|undefined): void => {\n        const value: string = event && event.currentTarget && event.currentTarget.id ? event.currentTarget.id : \"\";\n        Services.getLoggerService().debug(\"[ArtifactsPageToolbar] Setting filter type to: %s\", value);\n        this.setState({\n            filterIsExpanded: false,\n            criteria: {\n                ascending: this.state.criteria.ascending,\n                filterSelection: value,\n                filterValue: this.state.criteria.filterValue\n            }\n        }, () => {\n            this.fireOnChange();\n        });\n    };\n\n    private onKebabSelect = (event: React.SyntheticEvent<HTMLDivElement>|undefined): void => {\n        const value: string = event && event.currentTarget && event.currentTarget.id ? event.currentTarget.id : \"\";\n        Services.getLoggerService().debug(\"[ArtifactsPageToolbar] Toolbar action: \", value);\n        this.onKebabToggle(false);\n        switch (value) {\n            case \"import-action\":\n                this.props.onImportArtifacts();\n                break;\n            case \"export-action\":\n                this.props.onExportArtifacts();\n                break;\n        }\n    };\n\n    private onKebabToggle = (isOpen: boolean) => {\n        this.setSingleState(\"kebabIsOpen\", isOpen);\n    };\n\n    private onFilterValueChange = (value: any): void => {\n        Services.getLoggerService().debug(\"[ArtifactsPageToolbar] Setting filter value: %o\", value);\n        this.setSingleState(\"criteria\", {\n            ascending: this.state.criteria.ascending,\n            filterSelection: this.state.criteria.filterSelection,\n            filterValue: value\n        });\n    };\n\n    private onFilterSubmit = (event: any|undefined): void => {\n        this.fireOnChange();\n        if (event) {\n            event.preventDefault();\n        }\n    };\n\n    private onToggleAscending = (): void => {\n        Services.getLoggerService().debug(\"[ArtifactsPageToolbar] Toggle the ascending flag.\");\n        const sortAscending: boolean = !this.state.criteria.ascending;\n        this.setSingleState(\"ascending\", sortAscending, () => {\n            this.fireOnChange();\n        });\n    };\n\n    private fireOnChange(): void {\n        this.props.onCriteriaChange(this.state.criteria);\n    }\n\n    private filterValueDisplay(): string {\n        switch (this.state.criteria.filterSelection) {\n            case \"name\":\n                return \"Name\";\n            case \"group\":\n                return \"Group\";\n            case \"description\":\n                return \"Description\";\n            case \"labels\":\n                return \"Labels\";\n            case \"globalId\":\n                return \"GlobalId\";\n            case \"contentId\":\n                return \"ContentId\";\n            default:\n                return \"Name\";\n        }\n    }\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport \"./uploadForm.css\";\nimport { PureComponent, PureComponentProps, PureComponentState, UrlUpload } from \"../../../../components\";\nimport {\n    Dropdown,\n    DropdownItem,\n    DropdownSeparator,\n    DropdownToggle,\n    FileUpload,\n    Form,\n    FormGroup,\n    FormHelperText, Tab, Tabs, TabTitleText,\n    TextInput\n} from \"@patternfly/react-core\";\nimport { CaretDownIcon } from \"@patternfly/react-icons\";\nimport { ArtifactTypes } from \"../../../../../models\";\nimport { CreateArtifactData } from \"../../../../../services\";\n\n/**\n * Properties\n */\nexport interface UploadArtifactFormProps extends PureComponentProps {\n    onValid: (valid: boolean) => void;\n    onChange: (data: CreateArtifactData) => void;\n}\n\n/**\n * State\n */\nexport interface UploadArtifactFormState extends PureComponentState {\n    id: string;\n    group: string;\n    type: string;\n    typeIsExpanded: boolean;\n    tabKey: number;\n    content: string|null;\n    contentFilename: string;\n    contentIsLoading: boolean;\n    formValid: boolean;\n    idValid: boolean;\n    groupValid: boolean;\n    artifactTypes: any[];\n}\n\n/**\n * Models the toolbar for the Artifacts page.\n */\nexport class UploadArtifactForm extends PureComponent<UploadArtifactFormProps, UploadArtifactFormState> {\n\n    constructor(props: Readonly<UploadArtifactFormProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <Form>\n                <FormGroup\n                    label=\"Group & ID\"\n                    fieldId=\"form-id\"\n                    helperText=\"(Optional) Group and Artifact ID are optional.  If Artifact ID is left blank, the server will generate one for you.\"\n                >\n                    <div className=\"group-and-id\">\n                        <TextInput\n                            className=\"group\"\n                            isRequired={false}\n                            type=\"text\"\n                            id=\"form-group\"\n                            data-testid=\"form-group\"\n                            name=\"form-group\"\n                            aria-describedby=\"form-group-helper\"\n                            value={this.state.group}\n                            placeholder=\"Group\"\n                            onChange={this.onGroupChange}\n                            validated={this.groupValidated()}\n                        />\n                        <span className=\"separator\">/</span>\n                        <TextInput\n                            className=\"artifact-id\"\n                            isRequired={false}\n                            type=\"text\"\n                            id=\"form-id\"\n                            data-testid=\"form-id\"\n                            name=\"form-id\"\n                            aria-describedby=\"form-id-helper\"\n                            value={this.state.id}\n                            placeholder=\"ID of the artifact\"\n                            onChange={this.onIdChange}\n                            validated={this.idValidated()}\n                        />\n                    </div>\n                    <FormHelperText\n                        isError={true}\n                        isHidden={this.state.idValid && this.state.groupValid}\n                    >\n                        Character % and non ASCII characters are not allowed\n                    </FormHelperText>\n                </FormGroup>\n                <FormGroup\n                    label=\"Type\"\n                    fieldId=\"form-type\"\n                    isRequired={true}\n                >\n                    <div>\n                        <Dropdown\n                            toggle={\n                                <DropdownToggle id=\"form-type-toggle\" data-testid=\"form-type-toggle\" onToggle={this.onTypeToggle} toggleIndicator={CaretDownIcon}>\n                                    { this.state.type ? this.typeLabel(this.state.type) : \"Auto-Detect\" }\n                                </DropdownToggle>\n                            }\n                            onSelect={this.onTypeSelect}\n                            isOpen={this.state.typeIsExpanded}\n                            dropdownItems={[\n                                <DropdownItem key=\"auto\" id=\"\" data-testid=\"form-type-auto\"><i>Auto-Detect</i></DropdownItem>,\n                                <DropdownSeparator key=\"separator\" />,\n                                ...this.state.artifactTypes.map(t =>\n                                    <DropdownItem key={t.id} id={t.id} data-testid={`form-type-${t.id}`}>{ t.label }</DropdownItem>\n                                )\n                            ]}\n                        />\n                    </div>\n                </FormGroup>\n                <FormGroup\n                    label=\"Artifact\"\n                    isRequired={true}\n                    fieldId=\"form-artifact\"\n                >\n                    <Tabs\n                        className=\"create-tabs\"\n                        style={{ marginBottom: \"8px\" }}\n                        activeKey={this.state.tabKey}\n                        onSelect={(_event, eventKey) => {\n                            this.setSingleState(\"tabKey\", eventKey);\n                            this.onContentChange(undefined);\n                            _event.preventDefault();\n                            _event.stopPropagation();\n                        }}\n                        isBox={false}\n                        role=\"region\"\n                    >\n                        <Tab eventKey={0} data-testid=\"tab-from-file\" title={<TabTitleText>From file</TabTitleText>} aria-label=\"Default content - from file\">\n                            <FileUpload\n                                id=\"artifact-content\"\n                                data-testid=\"form-upload\"\n                                type=\"text\"\n                                filename={this.state.contentFilename}\n                                value={this.state.content!}\n                                isRequired={false}\n                                allowEditingUploadedText={true}\n                                onDataChange={this.onContentChange}\n                                onTextChange={this.onContentChange}\n                                onClearClick={() => this.onContentChange(\"\")}\n                                onReadStarted={this.onFileReadStarted}\n                                onReadFinished={this.onFileReadFinished}\n                                isLoading={this.state.contentIsLoading}\n                            />\n                        </Tab>\n                        <Tab eventKey={1} data-testid=\"tab-from-url\" title={<TabTitleText>From URL</TabTitleText>}>\n                            <UrlUpload\n                                id=\"artifact-content-url\"\n                                urlPlaceholder=\"Enter a valid and accessible URL\"\n                                onChange={(value, url) => {\n                                    this.onContentChange(value);\n                                }}\n                            />\n                        </Tab>\n                    </Tabs>\n                </FormGroup>\n            </Form>\n        );\n    }\n\n    protected initializeState(): UploadArtifactFormState {\n        ArtifactTypes.allTypesWithLabels().then(artifactTypes => this.setState({\n            artifactTypes: artifactTypes\n        }));\n        return {\n            content: null,\n            contentFilename: \"\",\n            contentIsLoading: false,\n            id: \"\",\n            group: \"\",\n            type: \"\",\n            typeIsExpanded: false,\n            tabKey: 0,\n            formValid: false,\n            idValid: true,\n            groupValid: true,\n            artifactTypes: []\n        };\n    }\n\n    private onTypeToggle = (isExpanded: boolean): void => {\n        this.setSingleState(\"typeIsExpanded\", isExpanded);\n    };\n\n    private onTypeSelect = (event: React.SyntheticEvent<HTMLDivElement>|undefined): void => {\n        const newType: string = event && event.currentTarget && event.currentTarget.id ? event.currentTarget.id : \"\";\n        this.setState({\n            type: newType,\n            typeIsExpanded: false\n        }, () => {\n            this.fireOnChange();\n            this.checkFormValid();\n        });\n    };\n\n    private onIdChange = (value: any): void => {\n        this.setMultiState({\n            id: value,\n            idValid: this.isIdValid(value)\n        }, () => {\n            this.fireOnChange();\n            this.checkFormValid();\n        });\n    };\n\n    private onGroupChange = (value: any): void => {\n        this.setMultiState({\n            group: value,\n            groupValid: this.isIdValid(value)\n        }, () => {\n            this.fireOnChange();\n            this.checkFormValid();\n        });\n    };\n\n    private onContentChange = (value: string | undefined): void => {\n        console.debug(\"File upload content (change event): \", value);\n        this.setSingleState(\"content\", value, () => {\n            this.fireOnChange();\n            this.checkFormValid();\n        });\n    };\n\n    private onFileReadStarted = (): void => {\n        this.setSingleState(\"contentIsLoading\", true);\n    };\n\n    private onFileReadFinished = (): void => {\n        this.setSingleState(\"contentIsLoading\", false);\n    };\n\n    private checkFormValid(): void {\n        const data: CreateArtifactData = this.currentData();\n        const oldValid: boolean = this.state.formValid;\n        const newValid: boolean = this.isFormValid(data);\n        const validityChanged: boolean = oldValid !== newValid;\n        this.setState({\n            formValid: newValid\n        }, () => {\n            if (validityChanged) {\n                this.fireOnFormValid();\n            }\n        });\n    }\n\n    private isFormValid(data: CreateArtifactData): boolean {\n        return !!data.content && this.isIdValid(data.id) && this.isIdValid(data.groupId);\n    }\n\n    private isIdValid(id: string|null): boolean {\n        if (!id) {\n            //id is optional, server can generate it\n            return true;\n        } else {\n            // character % breaks the ui\n            const isAscii = (str: string) => {\n                for (let i = 0; i < str.length; i++){\n                    if(str.charCodeAt(i)>127){\n                        return false;\n                    }\n                }\n                return true;\n            };\n            return id.indexOf(\"%\") == -1 && isAscii(id);\n        }\n    }\n\n    private currentData(): CreateArtifactData {\n        return {\n            content: this.state.content,\n            groupId: this.state.group,\n            id: this.state.id,\n            type: this.state.type\n        };\n    }\n\n    private fireOnChange(): void {\n        if (this.props.onChange) {\n            const data: CreateArtifactData = this.currentData();\n            this.props.onChange(data);\n        }\n    }\n\n    private fireOnFormValid(): void {\n        if (this.props.onValid) {\n            this.props.onValid(this.state.formValid);\n        }\n    }\n\n    private typeLabel(type: string): string {\n        return this.state.artifactTypes.filter( t => {\n            return t.id === type;\n        }).map( t => t.label )[0];\n    }\n\n    private idValidated(): any {\n        const data: CreateArtifactData = this.currentData();\n        if (this.isIdValid(data.id)) {\n            if (!data.id) {\n                return \"default\";\n            }\n            return \"success\";\n        } else {\n            return \"error\";\n        }\n    }\n\n    private groupValidated(): any {\n        const data: CreateArtifactData = this.currentData();\n        if (this.isIdValid(data.groupId)) {\n            if (!data.groupId) {\n                return \"default\";\n            }\n            return \"success\";\n        } else {\n            return \"error\";\n        }\n    }\n\n}\n"],"names":["props","render","Modal","title","this","variant","isOpen","showClose","isCloseable","onClose","className","Progress","message","value","progress","initializeState","onUploadArtifact","setSingleState","onImportArtifacts","onExportArtifacts","exportAs","then","dref","link","document","createElement","href","download","click","catch","error","handleServerError","onUploadModalClose","onImportModalClose","doImport","setMultiState","isImporting","importProgress","isImportModalOpen","state","importFile","importFrom","event","lengthComputable","Math","round","loaded","total","setTimeout","search","doUploadArtifact","pleaseWait","uploadFormData","groupId","createArtifact","metaData","artifactLocation","linkTo","encodeURIComponent","id","info","navigateTo","error_code","handleInvalidContentError","isUploadFormValid","onFilterChange","criteria","isSearching","onSetPage","newPage","perPage","paging","page","pageSize","onPerPageSelect","newPerPage","onUploadFormValid","isValid","onUploadFormChange","data","onImportFileChange","filename","importFilename","isImportFormValid","toLowerCase","endsWith","closeInvalidContentModal","onGroupClick","filterSelection","filterValue","ascending","showToolbar","isLoading","componentDidUpdate","prevProps","prevState","snapshot","history","location","initFromSearch","initializePageState","renderPage","PageSection","PageSectionVariants","padding","default","tabKey","If","condition","artifacts","results","onCriteriaChange","isFilled","Flex","FlexItem","Spinner","size","artifactsCount","isFiltered","isUploadModalOpen","actions","Button","key","onClick","isDisabled","onChange","onValid","invalidContentError","isInvalidContentModalOpen","Form","FormGroup","isRequired","fieldId","label","helperText","FileUpload","filenamePlaceholder","isPleaseWaitModalOpen","ProgressModal","params","URLSearchParams","get","createLoaders","onArtifactsLoaded","count","length","gac","sortAscending","type","getArtifacts","fireOnClick","style","DataList","map","artifact","idx","DataListItemRow","DataListItemCells","dataListCells","DataListCell","name","statuses","status","Badge","isRead","description","labels","rval","push","Link","testId","to","artifactLink","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","PlusCircleIcon","Title","headingLevel","EmptyStateBody","isDeveloper","feature","isNot","isAdmin","onFilterToggle","isExpanded","debug","onFilterSelect","currentTarget","setState","filterIsExpanded","fireOnChange","onKebabSelect","onKebabToggle","onFilterValueChange","onFilterSubmit","preventDefault","onToggleAscending","Toolbar","ToolbarContent","ToolbarItem","onSubmit","InputGroup","Dropdown","onSelect","toggle","DropdownToggle","onToggle","filterValueDisplay","dropdownItems","DropdownItem","component","TextInput","ButtonVariant","SearchIcon","SortAlphaDownIcon","SortAlphaDownAltIcon","KebabToggle","kebabIsOpen","isPlain","Pagination","dropDirection","itemCount","totalArtifactsCount","widgetId","onTypeToggle","onTypeSelect","newType","typeIsExpanded","checkFormValid","onIdChange","idValid","isIdValid","onGroupChange","group","groupValid","onContentChange","console","onFileReadStarted","onFileReadFinished","placeholder","validated","groupValidated","idValidated","FormHelperText","isError","isHidden","toggleIndicator","CaretDownIcon","typeLabel","DropdownSeparator","artifactTypes","t","Tabs","marginBottom","activeKey","_event","eventKey","undefined","stopPropagation","isBox","role","Tab","TabTitleText","contentFilename","content","allowEditingUploadedText","onDataChange","onTextChange","onClearClick","onReadStarted","onReadFinished","contentIsLoading","urlPlaceholder","url","ArtifactTypes","formValid","currentData","oldValid","newValid","isFormValid","validityChanged","fireOnFormValid","indexOf","str","i","charCodeAt","isAscii","filter"],"sourceRoot":""}