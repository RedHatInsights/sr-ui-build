{"version":3,"file":"1444.78fc1746.js","mappings":"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","sources":["webpack://@apicurio/registry-ui/./src/app/pages/basePage.tsx","webpack://@apicurio/registry-ui/./src/app/components/errorPage/accessErrorPage.tsx","webpack://@apicurio/registry-ui/./src/app/components/errorPage/rateLimitErrorPage.tsx","webpack://@apicurio/registry-ui/./src/app/pages/rules/rules.tsx","webpack://@apicurio/registry-ui/./src/app/pages/rules/rules.federated.tsx"],"sourcesContent":["/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport { ErrorPage, PageError, PureComponent, PureComponentProps, PureComponentState } from \"../components\";\nimport { Services } from \"../../services\";\nimport { Flex, FlexItem, PageSection, PageSectionVariants, Spinner } from \"@patternfly/react-core\";\nimport { AccessErrorPage } from \"../components/errorPage/accessErrorPage\";\nimport { RateLimitErrorPage } from \"../components/errorPage/rateLimitErrorPage\";\n\n// TODO this should be configurable via standard UI config settings\nconst MAX_RETRIES: number = 1;\n\nexport enum PageErrorType {\n    React, Server\n}\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface PageProps extends PureComponentProps {\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface PageState extends PureComponentState {\n    pageLoadRetries?: number;\n    isLoading?: boolean;\n    isError?: boolean;\n    error?: PageError;\n}\n\n\n/**\n * The artifacts page.\n */\nexport abstract class PageComponent<P extends PageProps, S extends PageState> extends PureComponent<P, S> {\n\n    protected constructor(props: Readonly<P>) {\n        super(props);\n        setTimeout(() => {\n            this.loadPageData();\n        }, 10);\n    }\n\n    protected initializeState(): S {\n        return {\n            ...this.initializePageState(),\n            isLoading: true\n        };\n    }\n\n    protected abstract initializePageState(): S;\n\n    public componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {\n        this.handleError(PageErrorType.React, error, errorInfo);\n    }\n\n    public render(): React.ReactElement {\n        if (this.isError()) {\n            if (this.is403Error()) {\n                return (\n                    <AccessErrorPage error={this.state.error}/>\n                );\n            } else if (this.is419Error()) {\n                return (\n                    <RateLimitErrorPage error={this.state.error}/>\n                );\n            } else {\n                return (\n                    <ErrorPage error={this.state.error}/>\n                );\n            }\n        } else if (this.isLoading()) {\n            return (\n                <React.Fragment>\n                    <PageSection variant={PageSectionVariants.default} isFilled={true}>\n                        <Flex>\n                            <FlexItem><Spinner size=\"lg\"/></FlexItem>\n                            <FlexItem><span>Loading...</span></FlexItem>\n                        </Flex>\n                    </PageSection>\n                </React.Fragment>\n            );\n        } else {\n            return this.renderPage();\n        }\n    }\n\n    /**\n     * Renders the page content.  Subclasses should implement this instead of render() so that\n     * errors are handled/displayed properly.\n     */\n    protected abstract renderPage(): React.ReactElement;\n\n    protected postConstruct(): void {\n        // @ts-ignore\n        PureComponent.setHistory(this.props.history);\n        super.postConstruct();\n    }\n\n    // @ts-ignore\n    protected createLoaders(): Promise | Promise[] | null {\n        return null;\n    }\n\n    protected handleServerError(error: any, errorMessage: string): void {\n        this.handleError(PageErrorType.Server, error, errorMessage);\n    }\n\n    protected getPathParam(paramName: string): string {\n        // @ts-ignore\n        const paramValue: string = this.props.match.params[paramName];\n        const paramValueDecoded: string = decodeURIComponent(paramValue);\n        return paramValueDecoded;\n    }\n\n    protected isLoading(): boolean {\n        return this.state.isLoading ? true : false;\n    }\n\n    private loadPageData(): void {\n        // @ts-ignore\n        let loaders: Promise | Promise[] | null = this.createLoaders();\n\n        // If not loading anything, convert from null to empty array\n        if (loaders == null) {\n            loaders = [];\n        }\n\n        // Convert to array if not already\n        if (!Array.isArray(loaders)) {\n            loaders = [ loaders ];\n        }\n\n        // Always add the \"update current user\" loader\n        loaders = [\n            Services.getUsersService().updateCurrentUser(),\n            ...loaders\n        ];\n\n        if (loaders.length === 0) {\n            this.setSingleState(\"isLoading\", false);\n        } else {\n            this.setSingleState(\"isLoading\", true);\n            Promise.all(loaders).then(() => {\n                this.setSingleState(\"isLoading\", false);\n            }).catch(error => {\n                Services.getLoggerService().debug(\"[PageComponent] Page data load failed, retrying.\");\n                const retries: number = this.getRetries();\n                if (retries < MAX_RETRIES) {\n                    this.incrementRetries();\n                    setTimeout(() => {\n                        this.loadPageData();\n                    }, Math.pow(2, retries) * 100);\n                } else {\n                    this.handleServerError(error, \"Error loading page data.\");\n                }\n            });\n        }\n    }\n\n    private getRetries(): number {\n        return this.state.pageLoadRetries !== undefined ? this.state.pageLoadRetries as number : 0;\n    }\n\n    private incrementRetries(): void {\n        const retries: number = this.getRetries() + 1;\n        this.setSingleState(\"pageLoadRetries\", retries);\n    }\n\n    private isError(): boolean {\n        return this.state.isError ? true : false;\n    }\n\n    private is403Error(): boolean {\n        return this.state.error && this.state.error.error.status && (this.state.error.error.status == 403);\n    }\n\n    private is419Error(): boolean {\n        return this.state.error && this.state.error.error.status && (this.state.error.error.status == 419);\n    }\n\n    private handleError(errorType: PageErrorType, error: any, errorMessage: any): void {\n        Services.getLoggerService().error(\"[PageComponent] Handling an error of type: \", errorType);\n        Services.getLoggerService().error(\"[PageComponent] \", errorMessage);\n        Services.getLoggerService().error(\"[PageComponent] \", error);\n        this.setMultiState({\n            error: {\n                error,\n                errorMessage,\n                type: errorType\n            },\n            isError: true\n        });\n    }\n}\n","/**\n * @license\n * Copyright 2021 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./errorPage.css\";\nimport {\n    Button,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateSecondaryActions,\n    EmptyStateVariant,\n    PageSection,\n    PageSectionVariants,\n    Title\n} from \"@patternfly/react-core\";\nimport { LockedIcon } from \"@patternfly/react-icons\";\nimport \"ace-builds/src-noconflict/mode-text\";\nimport \"ace-builds/src-noconflict/theme-tomorrow\";\nimport { ErrorPage, ErrorPageProps } from \"./errorPage\";\n\n\nexport class AccessErrorPage extends ErrorPage {\n\n    constructor(props: Readonly<ErrorPageProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <React.Fragment>\n                <PageSection className=\"ps_error\" variant={PageSectionVariants.light}>\n                    <div className=\"centerizer\">\n                        <EmptyState variant={EmptyStateVariant.large}>\n                            <EmptyStateIcon icon={LockedIcon} />\n                            <Title headingLevel=\"h5\" size=\"lg\">Access permissions needed</Title>\n                            <EmptyStateBody>\n                                To access this Service Registry instance, contact your organization administrators.\n                            </EmptyStateBody>\n                            <EmptyStateSecondaryActions>\n                                <Button variant=\"link\"\n                                        data-testid=\"error-btn-back\"\n                                        onClick={this.navigateBack}>Return to previous page</Button>\n                            </EmptyStateSecondaryActions>\n                        </EmptyState>\n                    </div>\n                </PageSection>\n            </React.Fragment>\n        );\n    }\n\n    protected navigateBack = (): void => {\n        window.history.back();\n    };\n\n}\n","/**\n * @license\n * Copyright 2022 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./errorPage.css\";\nimport {\n    Button,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateSecondaryActions,\n    EmptyStateVariant,\n    PageSection,\n    PageSectionVariants,\n    Title\n} from \"@patternfly/react-core\";\nimport { ExclamationCircleIcon } from \"@patternfly/react-icons\";\nimport \"ace-builds/src-noconflict/mode-text\";\nimport \"ace-builds/src-noconflict/theme-tomorrow\";\nimport { ErrorPage, ErrorPageProps } from \"./errorPage\";\n\n\nexport class RateLimitErrorPage extends ErrorPage {\n\n    constructor(props: Readonly<ErrorPageProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <React.Fragment>\n                <PageSection className=\"ps_error\" variant={PageSectionVariants.light}>\n                    <div className=\"centerizer\">\n                        <EmptyState variant={EmptyStateVariant.large}>\n                            <EmptyStateIcon icon={ExclamationCircleIcon} />\n                            <Title headingLevel=\"h5\" size=\"lg\">Current usage is too high</Title>\n                            <EmptyStateBody>\n                                This Service Registry instance is throttled due to a high request rate. Ensure\n                                that existing applications are properly configured to cache the schemas.\n                            </EmptyStateBody>\n                            <EmptyStateSecondaryActions>\n                                <Button variant=\"link\"\n                                        data-testid=\"error-btn-back\"\n                                        onClick={this.navigateBack}>Return to previous page</Button>\n                            </EmptyStateSecondaryActions>\n                        </EmptyState>\n                    </div>\n                </PageSection>\n            </React.Fragment>\n        );\n    }\n\n    protected navigateBack = (): void => {\n        window.history.back();\n    };\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./rules.css\";\nimport { PageSection, PageSectionVariants, TextContent } from \"@patternfly/react-core\";\nimport { PageComponent, PageProps, PageState } from \"../basePage\";\nimport { RuleList } from \"../../components/ruleList\";\nimport { Rule } from \"../../../models\";\nimport { Services } from \"../../../services\";\nimport { RootPageHeader } from \"../../components\";\n\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface RulesPageProps extends PageProps {\n\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface RulesPageState extends PageState {\n    rules: Rule[] | null;\n}\n\n/**\n * The global rules page.\n */\nexport class RulesPage extends PageComponent<RulesPageProps, RulesPageState> {\n\n    constructor(props: Readonly<RulesPageProps>) {\n        super(props);\n    }\n\n    public renderPage(): React.ReactElement {\n        return (\n            <React.Fragment>\n                <PageSection className=\"ps_rules-header\" variant={PageSectionVariants.light} padding={{ default : \"noPadding\" }}>\n                    <RootPageHeader tabKey={1} />\n                </PageSection>\n                <PageSection className=\"ps_rules-description\" variant={PageSectionVariants.light}>\n                    <TextContent>\n                        Manage the list of global rules for this registry. Rules can be enabled, disabled, and individually configured.\n                    </TextContent>\n                </PageSection>\n                <PageSection variant={PageSectionVariants.default} isFilled={true}>\n                    <React.Fragment>\n                        <RuleList rules={this.rules()}\n                                  onEnableRule={this.doEnableRule}\n                                  onDisableRule={this.doDisableRule}\n                                  onConfigureRule={this.doConfigureRule} />\n                    </React.Fragment>\n                </PageSection>\n            </React.Fragment>\n        );\n    }\n\n    protected initializePageState(): RulesPageState {\n        return {\n            rules: null\n        };\n    }\n\n    // @ts-ignore\n    protected createLoaders(): Promise {\n        return Services.getAdminService().getRules().then( rules => {\n                this.setMultiState({\n                    isLoading: false,\n                    rules\n                });\n            });\n    }\n\n    private rules(): Rule[] {\n        if (this.state.rules) {\n            return this.state.rules;\n        } else {\n            return [];\n        }\n    }\n\n    private doEnableRule = (ruleType: string): void => {\n        Services.getLoggerService().debug(\"[RulesPage] Enabling global rule:\", ruleType);\n        let config: string = \"FULL\";\n        if (ruleType === \"COMPATIBILITY\") {\n            config = \"BACKWARD\";\n        }\n        Services.getAdminService().createRule(ruleType, config).catch(error => {\n            this.handleServerError(error, `Error enabling \"${ ruleType }\" global rule.`);\n        });\n        this.setSingleState(\"rules\", [...this.rules(), {config, type: ruleType}]);\n    };\n\n    private doDisableRule = (ruleType: string): void => {\n        Services.getLoggerService().debug(\"[RulesPage] Disabling global rule:\", ruleType);\n        Services.getAdminService().deleteRule(ruleType).catch(error => {\n            this.handleServerError(error, `Error disabling \"${ ruleType }\" global rule.`);\n        });\n        this.setSingleState(\"rules\", this.rules().filter(r => r.type !== ruleType));\n    };\n\n    private doConfigureRule = (ruleType: string, config: string): void => {\n        Services.getLoggerService().debug(\"[RulesPage] Configuring global rule:\", ruleType, config);\n        Services.getAdminService().updateRule(ruleType, config).catch(error => {\n            this.handleServerError(error, `Error configuring \"${ ruleType }\" global rule.`);\n        });\n        this.setSingleState(\"rules\", this.rules().map(r => {\n            if (r.type === ruleType) {\n                return {config, type: r.type};\n            } else {\n                return r;\n            }\n        }));\n    };\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./rules.css\";\nimport { RulesPage, RulesPageProps } from \"./rules\";\nimport { FederatedComponentProps, FederatedUtils } from \"../../federated\";\n\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface FederatedRulesPageProps extends RulesPageProps, FederatedComponentProps {\n}\n\n/**\n * The global rules page.\n */\nexport default class FederatedRulesPage extends RulesPage {\n\n    constructor(props: Readonly<FederatedRulesPageProps>) {\n        super(props);\n    }\n\n    protected postConstruct(): void {\n        FederatedUtils.updateConfiguration(this.props as FederatedComponentProps);\n        super.postConstruct();\n    }\n\n}\n"],"names":["PageErrorType","props","navigateBack","window","history","back","render","PageSection","className","variant","PageSectionVariants","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","LockedIcon","Title","headingLevel","size","EmptyStateBody","EmptyStateSecondaryActions","Button","onClick","this","ExclamationCircleIcon","setTimeout","loadPageData","initializeState","initializePageState","isLoading","componentDidCatch","error","errorInfo","handleError","React","isError","is403Error","AccessErrorPage","state","is419Error","RateLimitErrorPage","isFilled","Flex","FlexItem","Spinner","renderPage","postConstruct","createLoaders","handleServerError","errorMessage","Server","getPathParam","paramName","paramValue","match","params","decodeURIComponent","loaders","Array","isArray","updateCurrentUser","length","setSingleState","Promise","all","then","catch","debug","retries","getRetries","incrementRetries","Math","pow","undefined","pageLoadRetries","status","errorType","setMultiState","type","doEnableRule","ruleType","config","createRule","rules","doDisableRule","deleteRule","filter","r","doConfigureRule","updateRule","map","padding","default","tabKey","TextContent","onEnableRule","onDisableRule","onConfigureRule","getRules","RulesPage"],"sourceRoot":""}