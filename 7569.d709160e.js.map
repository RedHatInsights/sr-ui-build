{"version":3,"file":"7569.d709160e.js","mappings":"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","sources":["webpack://@apicurio/registry-ui/./src/app/pages/roles/roles.federated.tsx","webpack://@apicurio/registry-ui/./src/app/pages/roles/roles.tsx"],"sourcesContent":["/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./roles.css\";\nimport { RolesPage, RolesPageProps } from \"./roles\";\nimport { FederatedComponentProps, FederatedUtils } from \"../../federated\";\n\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface FederatedRolesPageProps extends RolesPageProps, FederatedComponentProps {\n}\n\n/**\n * The global roles page.\n */\nexport default class FederatedRolesPage extends RolesPage {\n\n    constructor(props: Readonly<FederatedRolesPageProps>) {\n        super(props);\n    }\n\n    protected postConstruct(): void {\n        FederatedUtils.updateConfiguration(this.props as FederatedComponentProps);\n        super.postConstruct();\n    }\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./roles.css\";\nimport {\n    Button,\n    ButtonVariant,\n    InputGroup,\n    PageSection,\n    PageSectionVariants,\n    Select,\n    SelectOption,\n    SelectOptionObject,\n    SelectVariant,\n    TextInput,\n    Toolbar,\n    ToolbarContent,\n    ToolbarFilter,\n    ToolbarGroup,\n    ToolbarItem\n} from \"@patternfly/react-core\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport { PageComponent, PageProps, PageState } from \"../basePage\";\nimport { RoleMapping } from \"../../../models\";\nimport { Principal, Services } from \"../../../services\";\nimport { GrantAccessModal, RoleList, RoleMappingsEmptyState } from \"./components\";\nimport { PleaseWaitModal, RootPageHeader } from \"../../components\";\nimport { If } from \"../../components/common/if\";\n\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface RolesPageProps extends PageProps {\n    principalSelect: any\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface RolesPageState extends PageState {\n    isCreateRoleMappingModalOpen: boolean;\n    isRoleMappingUpdate: boolean;\n    roles: RoleMapping[];\n    roleFilter: RoleMapping;\n    roleListFilterOpened: boolean;\n    roleFilterSelected: string;\n    roleFilterTextInputValue: string;\n    roleFilterSelectInputValue: string;\n    roleFilterSelectInputOpened: boolean;\n    selectedRole: RoleMapping | undefined;\n    isPleaseWaitModalOpen: boolean;\n    pleaseWaitMessage: string;\n}\n\nconst roleFilterOptions = ['Account', 'Role'];\n/**\n * The global roles page.\n */\nexport class RolesPage extends PageComponent<RolesPageProps, RolesPageState> {\n\n    constructor(props: Readonly<RolesPageProps>) {\n        super(props);\n    }\n\n    public renderPage(): React.ReactElement {\n        return (\n            <React.Fragment>\n                <PageSection className=\"ps_roles-header\" variant={PageSectionVariants.light} padding={{ default : \"noPadding\" }}>\n                    <RootPageHeader tabKey={2} />\n                </PageSection>\n                <PageSection variant={PageSectionVariants.default} isFilled={true} className=\"ps_role-section\">\n                    {\n                        this.state.roles.length === 0 ?\n                            <RoleMappingsEmptyState onCreateRoleMapping={this.onCreateRoleMapping}/>\n                            :\n                            <>\n                                <Toolbar id=\"toolbar\" clearAllFilters={() => {\n                                    this.setSingleState(\"roleFilter\", {\n                                        principalId: \"\",\n                                        role: \"\",\n                                        principalName: \"\"\n                                    });\n                                }}>\n                                    <ToolbarContent>\n                                        <ToolbarGroup>\n                                            <ToolbarItem className=\"ps_role-filter-select-toolbar-item\">\n                                                <Select\n                                                    variant={SelectVariant.single}\n                                                    aria-label=\"Filter On\"\n                                                    onToggle={this.onRoleFilterToggle}\n                                                    onSelect={this.onRoleFilterSelect}\n                                                    selections={this.state.roleFilterSelected}\n                                                    isOpen={this.state.roleListFilterOpened}\n                                                >\n                                                    {roleFilterOptions.map((option, index) => (\n                                                        <SelectOption key={index} value={option} />\n                                                    ))}\n                                                </Select>\n                                            </ToolbarItem>\n                                            <ToolbarItem>\n                                                <InputGroup>\n                                                    {\n                                                        this.isRoleFilterSelected() ?\n                                                            <Select\n                                                                variant={SelectVariant.single}\n                                                                aria-label=\"Role\"\n                                                                onToggle={this.onRoleFilterSelectToggle}\n                                                                onSelect={this.onRoleFilterSelectChange}\n                                                                isOpen={this.state.roleFilterSelectInputOpened}\n                                                                placeholderText=\"Filter by role\"\n                                                            >\n                                                                <SelectOption key={1} value=\"Administrator\" />\n                                                                <SelectOption key={2} value=\"Manager\" />\n                                                                <SelectOption key={3} value=\"Viewer\" />\n                                                            </Select>\n                                                            :\n                                                            <TextInput value={this.state.roleFilterTextInputValue}\n                                                                       placeholder=\"Filter by account\"\n                                                                       name=\"roleFilterInput\" id=\"roleFilterInput\"\n                                                                       type=\"search\" aria-label=\"role filter input\"\n                                                                       onKeyDown={this.onRoleFilterTextInputKeydown}\n                                                                       onChange={this.onRoleFilterInputChange} />\n                                                    }\n                                                    <If condition={this.isAccountFilterSelected}>\n                                                        <Button variant={ButtonVariant.control} aria-label=\"search button for search input\" onClick={this.onRoleFilterApplyClick}>\n                                                            <SearchIcon />\n                                                        </Button>\n                                                    </If>\n                                                </InputGroup>\n                                            </ToolbarItem>\n                                            <ToolbarItem>\n                                                <Button variant=\"primary\" data-testid=\"btn-grant-access\" onClick={this.onCreateRoleMapping}>Grant access</Button>\n                                            </ToolbarItem>\n                                            <ToolbarFilter chips={this.state.roleFilter.principalId.length > 0 ? [this.state.roleFilter.principalId] : undefined}\n                                                deleteChip={() => {\n                                                    this.setSingleState(\"roleFilter\", {\n                                                        principalId: \"\",\n                                                        role: this.state.roleFilter.role,\n                                                        principalName: \"\"\n                                                    });\n                                                }}\n                                                categoryName=\"Account\"> </ToolbarFilter>\n                                            <ToolbarFilter chips={this.state.roleFilter.role.length > 0 ? [this.state.roleFilter.role] : undefined}\n                                                deleteChip={() => {\n                                                    this.setSingleState(\"roleFilter\", {\n                                                        principalId: this.state.roleFilter.principalId,\n                                                        role: \"\",\n                                                        principalName: this.state.roleFilter.principalName,\n                                                    });\n                                                }}\n                                                categoryName=\"Role\"> </ToolbarFilter>\n\n                                        </ToolbarGroup>\n                                    </ToolbarContent>\n                                </Toolbar>\n                                <RoleList roles={this.state.roles} roleFilter={this.state.roleFilter} onRevoke={this.onRevokeRoleMapping} onEditRoleMapping={this.onEditRoleMapping}></RoleList>\n                            </>}\n                </PageSection>\n                <GrantAccessModal isOpen={this.state.isCreateRoleMappingModalOpen}\n                    isUpdateAccess={this.state.isRoleMappingUpdate}\n                    onClose={this.closeRoleMappingModal}\n                    onGrant={this.createRoleMapping}\n                    roles={this.state.isRoleMappingUpdate ? this.state.roles : null}\n                    defaultRole={this.state.selectedRole} />\n                <PleaseWaitModal message={this.state.pleaseWaitMessage}\n                                 isOpen={this.state.isPleaseWaitModalOpen} />\n            </React.Fragment>\n        );\n    }\n\n    protected initializePageState(): RolesPageState {\n        return {\n            isCreateRoleMappingModalOpen: false,\n            isPleaseWaitModalOpen: false,\n            isRoleMappingUpdate: false,\n            pleaseWaitMessage: \"\",\n            selectedRole: undefined,\n            roles: [],\n            roleFilter: { principalId: \"\", role: \"\", principalName: \"\" },\n            roleListFilterOpened: false,\n            roleFilterSelected: roleFilterOptions[0],\n            roleFilterTextInputValue: \"\",\n            roleFilterSelectInputValue: \"\",\n            roleFilterSelectInputOpened: false\n        };\n    }\n\n    // @ts-ignore\n    protected createLoaders(): Promise {\n        return Services.getAdminService().getRoleMappings().then(roles => {\n            this.setMultiState({\n                isLoading: false,\n                roles\n            });\n        });\n    }\n\n    private onRoleFilterToggle = (isExpanded: boolean): void => {\n        this.setSingleState(\"roleListFilterOpened\", isExpanded)\n    }\n    private onRoleFilterSelectToggle = (isExpanded: boolean): void => {\n        this.setSingleState(\"roleFilterSelectInputOpened\", isExpanded)\n    }\n\n    private onRoleFilterSelect = (_event: any, selection: string | SelectOptionObject, isPlaceholder: boolean | undefined) => {\n        this.setMultiState({\n            roleFilterSelected: selection as string,\n            roleListFilterOpened: false\n        });\n    };\n\n    private onRoleFilterInputChange = (value: string) => {\n        this.setSingleState(\"roleFilterTextInputValue\", value)\n    }\n    private onRoleFilterTextInputKeydown = (event: any) => {\n        if (event.key === \"Enter\") {\n            this.onRoleFilterApplyClick();\n        }\n    };\n    private onRoleFilterApplyClick = () => {\n        let newRoleMappingFilter: RoleMapping = {\n            principalId: this.state.roleFilterSelected == roleFilterOptions[0] ? this.state.roleFilterTextInputValue : this.state.roleFilter?.principalId,\n            role: this.state.roleFilterSelected == roleFilterOptions[1] ? this.state.roleFilterSelectInputValue : this.state.roleFilter.role,\n            principalName: this.state.roleFilterSelected == roleFilterOptions[0] ? this.state.roleFilterTextInputValue : this.state.roleFilter?.principalId\n        }\n        this.setMultiState({\n            roleFilter: newRoleMappingFilter,\n            roleFilterTextInputValue: \"\"\n        });\n    }\n    private onCreateRoleMapping = (): void => {\n        this.setSingleState(\"isCreateRoleMappingModalOpen\", true);\n    };\n\n    private isAccountFilterSelected = (): boolean => {\n        return this.state.roleFilterSelected == roleFilterOptions[0];\n    };\n    private isRoleFilterSelected = (): boolean => {\n        return this.state.roleFilterSelected == roleFilterOptions[1];\n    };\n\n    private onRoleFilterSelectChange = (_event: any, selection: string | SelectOptionObject, isPlaceholder: boolean | undefined) => {\n        this.setMultiState({\n            roleFilterSelectInputValue: selection as string,\n            roleFilterSelectInputOpened: false\n        }, () => this.onRoleFilterApplyClick());\n    };\n\n    private closeRoleMappingModal = (): void => {\n        this.setMultiState({\n            selectedRole: undefined,\n            isRoleMappingUpdate: false,\n            isCreateRoleMappingModalOpen: false\n        });\n    };\n\n    private onEditRoleMapping = (role: RoleMapping) => {\n        this.setMultiState({\n            selectedRole: role,\n            isRoleMappingUpdate: true\n        })\n        this.onCreateRoleMapping();\n    }\n\n    private updateRoleMapping = (principal: Principal, role: string): void => {\n        this.pleaseWait(true, \"Granting access, please wait...\");\n        Services.getAdminService().updateRoleMapping(principal.id, role).then((mapping) => {\n            const currentRoleMappings = this.state.roles;\n            currentRoleMappings.forEach((role, index) => {\n                if (role.principalId === mapping.principalId) {\n                    currentRoleMappings[index] = {\n                        ...mapping,\n                        principalName: principal.displayName as string\n                    };\n                }\n            });\n\n            this.pleaseWait(false, \"\");\n            this.setSingleState(\"roles\", [\n                ...currentRoleMappings\n            ]);\n        }).catch(e => this.handleServerError(e, \"Error updating access.\"));\n    };\n\n    private createRoleMapping = (principal: Principal, role: string, isUpdate: boolean): void => {\n        this.closeRoleMappingModal();\n        if (isUpdate) {\n            this.updateRoleMapping(principal, role);\n        } else {\n            this.pleaseWait(true, \"Granting access, please wait...\");\n            Services.getAdminService().createRoleMapping(principal.id, role, principal.displayName as string).then((mapping) => {\n                this.pleaseWait(false, \"\");\n                this.setSingleState(\"roles\", [\n                    mapping, ...this.state.roles\n                ]);\n            }).catch(e => {\n                if (e?.error_code === 409) {\n                    // If we get a conflict when trying to create, that means the mapping already exists\n                    // and we should instead update.\n                    this.updateRoleMapping(principal, role);\n                } else {\n                    this.handleServerError(e, \"Error granting access.\");\n                }\n            });\n        }\n    };\n\n    private onRevokeRoleMapping = (principalId: string): void => {\n        this.pleaseWait(true, `Revoking access for ${principalId}, please wait...`);\n        Services.getAdminService().deleteRoleMapping(principalId).then(() => {\n            this.pleaseWait(false, \"\");\n            this.removeMapping(principalId);\n        }).catch(e => this.handleServerError(e, \"Error revoking access.\"));\n    };\n\n    private pleaseWait = (isOpen: boolean, message: string): void => {\n        this.setMultiState({\n            isPleaseWaitModalOpen: isOpen,\n            pleaseWaitMessage: message\n        });\n    };\n\n    private removeMapping(principalId: string): void {\n        const newRoles: RoleMapping[] =\n            this.state.roles.filter(rm => {\n                return rm.principalId !== principalId;\n            });\n        this.setSingleState(\"roles\", newRoles);\n    }\n\n}\n"],"names":["props","postConstruct","this","roleFilterOptions","onRoleFilterToggle","isExpanded","setSingleState","onRoleFilterSelectToggle","onRoleFilterSelect","_event","selection","isPlaceholder","setMultiState","roleFilterSelected","roleListFilterOpened","onRoleFilterInputChange","value","onRoleFilterTextInputKeydown","event","key","onRoleFilterApplyClick","newRoleMappingFilter","principalId","state","roleFilterTextInputValue","roleFilter","role","roleFilterSelectInputValue","principalName","onCreateRoleMapping","isAccountFilterSelected","isRoleFilterSelected","onRoleFilterSelectChange","roleFilterSelectInputOpened","closeRoleMappingModal","selectedRole","undefined","isRoleMappingUpdate","isCreateRoleMappingModalOpen","onEditRoleMapping","updateRoleMapping","principal","pleaseWait","id","then","mapping","currentRoleMappings","roles","forEach","index","displayName","catch","e","handleServerError","createRoleMapping","isUpdate","error_code","onRevokeRoleMapping","deleteRoleMapping","removeMapping","isOpen","message","isPleaseWaitModalOpen","pleaseWaitMessage","renderPage","PageSection","className","variant","PageSectionVariants","padding","default","tabKey","isFilled","length","Toolbar","clearAllFilters","ToolbarContent","ToolbarGroup","ToolbarItem","Select","SelectVariant","onToggle","onSelect","selections","map","option","SelectOption","InputGroup","placeholderText","TextInput","placeholder","name","type","onKeyDown","onChange","If","condition","Button","ButtonVariant","onClick","SearchIcon","ToolbarFilter","chips","deleteChip","categoryName","onRevoke","isUpdateAccess","onClose","onGrant","defaultRole","initializePageState","createLoaders","getRoleMappings","isLoading","newRoles","filter","rm"],"sourceRoot":""}