{"version":3,"file":"60.bundle.ee4a5ccf53e23fb198bf.js","mappings":"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","sources":["webpack://@apicurio/registry-ui/./src/app/pages/roles/components/empty/empty.tsx","webpack://@apicurio/registry-ui/./src/app/pages/roles/components/modals/selectPrincipalAccount.tsx","webpack://@apicurio/registry-ui/./src/app/pages/roles/components/modals/grantAccessModal.tsx","webpack://@apicurio/registry-ui/./src/app/pages/roles/components/roleList/roleList.tsx","webpack://@apicurio/registry-ui/./src/app/pages/roles/roles.tsx"],"sourcesContent":["/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport {Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title} from '@patternfly/react-core';\nimport {PlusCircleIcon} from \"@patternfly/react-icons\";\nimport {PureComponent, PureComponentProps, PureComponentState} from \"../../../../components\";\nimport {If} from \"../../../../components/common/if\";\nimport {Services} from \"../../../../../services\";\n\n/**\n * Properties\n */\nexport interface RoleMappingsEmptyStateProps extends PureComponentProps {\n    isFiltered?: boolean;\n    onCreateRoleMapping?: ()=>void;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface RoleMappingsEmptyStateState extends PureComponentState {\n}\n\n\n/**\n * Models the empty state for the Artifacts page (when there are no artifacts).\n */\nexport class RoleMappingsEmptyState extends PureComponent<RoleMappingsEmptyStateProps, RoleMappingsEmptyStateState> {\n\n    constructor(props: Readonly<RoleMappingsEmptyStateProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <EmptyState variant={EmptyStateVariant.full}>\n                <EmptyStateIcon icon={PlusCircleIcon}/>\n                <Title headingLevel=\"h5\" size=\"lg\">\n                    No roles assigned\n                </Title>\n                <If condition={() => this.props.isFiltered === true}>\n                    <EmptyStateBody>No role mappings match your filter settings.  Change your filter or perhaps create a new role mapping.</EmptyStateBody>\n                </If>\n                <If condition={() => !this.props.isFiltered}>\n                    <EmptyStateBody>{ this.emptyStateBodyText() }</EmptyStateBody>\n                    <Button variant=\"primary\" data-testid=\"btn-grant-access\" onClick={this.props.onCreateRoleMapping}>Grant access</Button>\n                </If>\n            </EmptyState>\n        );\n    }\n\n    protected initializeState(): RoleMappingsEmptyStateState {\n        return {};\n    }\n\n    private emptyStateBodyText() {\n        if (Services.getConfigService().featureMultiTenant()) {\n            return \"The Service Registry instance owner and organization administrators have access to resources in this instance. Grant other accounts access by assigning roles.\";\n        } else {\n            return \"There are currently no role mappings configured for the registry.  Click the \\\"Grant access\\\" button above to grant access to a user.\";\n        }\n    }\n}\n","/**\n * @license\n * Copyright 2021 Red Hat\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from 'react';\nimport { Divider, Select, SelectGroup, SelectOption, SelectVariant, } from '@patternfly/react-core';\nimport { PureComponent, PureComponentProps, PureComponentState } from \"../../../../components\";\nimport { Principal } from '../../../../../services/config';\n\nexport interface SelectPrincipalAccountProps extends PureComponentProps {\n    id: string | undefined;\n    onIdUpdate: (id: string) => void;\n    initialOptions: Principal[];\n    onToggle: (isOpen: boolean) => void;\n}\n\nexport interface SelectPrincipalAccountState extends PureComponentState {\n    id: string | undefined;\n    isOpen: boolean;\n}\n\nexport class SelectPrincipalAccount extends PureComponent<SelectPrincipalAccountProps, SelectPrincipalAccountState> {\n\n    constructor(props: Readonly<SelectPrincipalAccountProps>) {\n        super(props);\n    }\n    protected componentDidUpdate(prevProps: SelectPrincipalAccountProps) {\n        if (this.props.id && this.props.id !== prevProps.id) {\n            this.setSingleState(\"id\", this.props.id);\n        }\n    }\n\n    private onToggle = (isOpen: boolean) => {\n        this.setSingleState(\"isOpen\", isOpen);\n        this.props.onToggle(isOpen);\n    };\n\n    private clearSelection = () => {\n        this.setMultiState({\n            id: \"\",\n            isOpen: false\n        });\n    };\n\n    private onSelect = (_event: any, selection: any, isPlaceholder: any) => {\n        if (isPlaceholder) {\n            this.clearSelection();\n        } else {\n            this.setSingleState(\"id\", selection);\n            this.onToggle(false);\n        }\n        this.props.onIdUpdate(selection);\n    };\n\n    protected initializeState(): SelectPrincipalAccountState {\n        return {\n            id: \"\",\n            isOpen: false\n        };\n    }\n\n    public render(): React.ReactElement {\n        const children: React.ReactElement[] = this.filter(null, \"\");\n\n        return (\n            <Select\n                variant={SelectVariant.typeahead}\n                typeAheadAriaLabel={\"Select an account\"}\n                onToggle={this.onToggle}\n                onSelect={this.onSelect}\n                onClear={this.clearSelection}\n                selections={this.state.id}\n                isOpen={this.state.isOpen}\n                isInputValuePersisted={true}\n                placeholderText={\"Select an account\"}\n                isCreatable={false}\n                menuAppendTo=\"parent\"\n                maxHeight={400}\n                isGrouped={true}\n                onFilter={this.filter}\n                children={children}\n            />\n        );\n    };\n\n    private filter = (event: any, criteria: string): React.ReactElement[] => {\n        const principalToSelectOption: (p: Principal, index: number) => React.ReactElement = (principal: Principal, index: number): React.ReactElement => {\n            return (\n                <SelectOption\n                    key={index}\n                    value={principal.id}\n                    description={principal.displayName}\n                >\n                    {principal.id}\n                </SelectOption>\n            )\n        };\n\n        const filteredSAs: Principal[] = this.props.initialOptions.filter(\n            (principal) =>\n                principal.principalType === \"SERVICE_ACCOUNT\"\n        ).filter(\n            (principal) =>\n                principal.id.toLowerCase().includes(criteria.toLowerCase()) ||\n                principal.displayName?.toLowerCase().includes(criteria.toLowerCase())\n        );\n        const filteredUsers: Principal[] = this.props.initialOptions.filter(\n            (principal) =>\n                principal.principalType === \"USER_ACCOUNT\"\n        ).filter(\n            (principal) =>\n                principal.id.toLowerCase().includes(criteria.toLowerCase()) ||\n                principal.displayName?.toLowerCase().includes(criteria.toLowerCase())\n        );\n\n        let rval: React.ReactElement[] = [];\n\n        if (filteredSAs.length > 0) {\n            rval.push(\n                <SelectGroup label={\"Service accounts\"} key=\"service_accounts_group\">\n                    {\n                        filteredSAs.sort((a, b) => a.displayName && b.displayName ? a.displayName.localeCompare(b.displayName) : -1).\n                            map(principalToSelectOption)\n                    }\n                </SelectGroup>,\n            );\n        }\n\n        if (filteredSAs.length > 0 && filteredUsers.length > 0) {\n            rval.push(\n                <Divider key='divider' />,\n            );\n        }\n\n        if (filteredUsers.length > 0) {\n            rval.push(\n                <SelectGroup label={\"User accounts\"} key=\"user_accounts_group\">\n                    {\n                        filteredUsers.map(principalToSelectOption)\n                    }\n                </SelectGroup>,\n            );\n        }\n\n        return rval;\n    }\n\n}\n","/**\n * @license\n * Copyright 2021 Red Hat\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport {\n    Button,\n    DescriptionList,\n    DescriptionListDescription,\n    DescriptionListGroup,\n    DescriptionListTerm,\n    Form,\n    FormGroup,\n    Modal, Popover,\n    Radio,\n    Select,\n    SelectOption,\n    SelectOptionObject,\n    SelectVariant,\n    TextInput,\n    Tooltip\n} from '@patternfly/react-core';\nimport {Principal, Services} from \"../../../../../services\";\nimport {PureComponent, PureComponentProps, PureComponentState} from \"../../../../components\";\nimport {RoleMapping, RoleTypes} from \"../../../../../models\";\nimport {OutlinedQuestionCircleIcon} from '@patternfly/react-icons'\nimport {SelectPrincipalAccount} from \"./selectPrincipalAccount\";\nimport \"./grantAccessModal.css\";\n\n/**\n * Properties\n */\nexport interface GrantAccessModalProps extends PureComponentProps {\n    isOpen: boolean;\n    isUpdateAccess: boolean;\n    serviceRegistryInstance?: string;\n    accountId?: string;\n    roles: null | RoleMapping[];\n    defaultRole?: RoleMapping;\n    onClose: () => void;\n    onGrant: (principal: Principal, role: string, isUpdate: boolean) => void;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface GrantAccessModalState extends PureComponentState {\n    isAccountIDSelectOpen: boolean;\n    isValid: boolean;\n    accountId: string | undefined;\n    accountName: string | undefined;\n    role: string | undefined;\n    escapeClosesModal: boolean;\n}\n\n\n/**\n * Models the modal dialog for granting access to a user.\n */\nexport class GrantAccessModal extends PureComponent<GrantAccessModalProps, GrantAccessModalState> {\n\n    constructor(props: Readonly<GrantAccessModalProps>) {\n        super(props);\n    }\n    componentDidUpdate(prevProps: GrantAccessModalProps) {\n        if (this.props.defaultRole !== prevProps.defaultRole) {\n            if (this.props.defaultRole) {\n                this.setMultiState({\n                    accountId: this.props.defaultRole.principalId,\n                    accountName: this.props.defaultRole.principalName,\n                    role: this.props.defaultRole.role\n                });\n            } else {\n                this.setMultiState({\n                    accountId: \"\",\n                    accountName: \"\",\n                    role: undefined\n                });\n            }\n        }\n    }\n\n    public render(): React.ReactElement {\n        const principals: Principal[] | undefined = Services.getConfigService().principals();\n\n        return (\n            <Modal\n                title=\"Grant access\"\n                description={this.modalDescription()}\n                variant=\"medium\"\n                isOpen={this.props.isOpen}\n                onClose={this.props.onClose}\n                className=\"grant-access-modal pf-m-redhat-font\"\n                onEscapePress={this.escapePressed}\n                onKeyPress={this.onKey}\n                onKeyDown={this.onKey}\n                onKeyUp={this.onKey}\n                actions={[\n                    <Button key=\"grant\" variant=\"primary\" data-testid=\"modal-btn-grant\" onClick={this.doGrantAccess} isDisabled={!this.state.isValid}>Save</Button>,\n                    <Button key=\"cancel\" variant=\"link\" data-testid=\"modal-btn-cancel\" onClick={this.props.onClose}>Cancel</Button>\n                ]}\n            >\n                <Form>\n                    {this.props.serviceRegistryInstance !== undefined ? (<DescriptionList>\n                        <DescriptionListGroup>\n                            <DescriptionListTerm>Service Registry instance</DescriptionListTerm>\n                            <DescriptionListDescription>{this.props.serviceRegistryInstance}</DescriptionListDescription>\n                        </DescriptionListGroup>\n                    </DescriptionList>\n                    ) : undefined}\n\n                    <FormGroup\n                        label=\"Account\"\n                        labelIcon={\n                            <Popover aria-label=\"Account help\"\n                                     headerContent={\n                                         <span>Account help</span>\n                                     }\n                                     bodyContent={\n                                         <div>A service account enables your application or tool to connect securely to\n                                             your resources. A user account enables users in your organization to access\n                                             resources.</div>\n                                     }\n                            >\n                                <OutlinedQuestionCircleIcon/>\n                            </Popover>\n                        }\n                        isRequired\n                        fieldId=\"grant-access-account-id\"\n                    >\n                        {principals ? <SelectPrincipalAccount\n                            id={this.state.accountId}\n                            onToggle={this.onAccountSelectToggle}\n                            onIdUpdate={(id: string) => {\n                                this.onAccountIDSelect(null, id, false);\n                            }}\n                            initialOptions={principals? principals: []}/> :\n                            this.props.roles !== null ?\n                            <Select\n                                id=\"grant-access-principal\"\n                                name=\"grant-access-principal\"\n                                variant={SelectVariant.typeahead}\n                                typeAheadAriaLabel=\"Select an account\"\n                                onToggle={this.onAccountIDToggle}\n                                onSelect={this.onAccountIDSelect}\n                                onClear={this.onAccountIDClearSelection}\n                                selections={this.state.accountId}\n                                isOpen={this.state.isAccountIDSelectOpen}\n                                isInputValuePersisted={true}\n                                placeholderText={this.props.isUpdateAccess ? this.props.defaultRole?.principalId : \"Select an account\"}\n                                maxHeight = {'100px'}\n                                menuAppendTo=\"parent\"\n                                isDisabled={this.props.isUpdateAccess}\n                            >\n                                {this.props.roles.map((option, index) => (\n                                    <SelectOption\n                                        key={index}\n                                        value={option.principalId}\n\n                                    />\n                                ))}\n                            </Select> :\n                            <TextInput\n                                isRequired\n                                type=\"text\"\n                                id=\"grant-access-principal\"\n                                name=\"grant-access-principal\"\n                                aria-describedby=\"grant-access-principal-helper\"\n                                onChange={this.handlePrincipalChange}\n                            />\n                        }\n                    </FormGroup>\n                    <FormGroup\n                        label=\"Role\"\n                        isRequired\n                        fieldId=\"grant-access-role\"\n                    >\n                        <Radio id=\"grant-access-role-admin\"\n                            className=\"grant-access-radio-button\"\n                            name=\"grant-access-role\"\n                            label=\"Administrator\"\n                            description=\"Assign roles to other accounts on this Service Registry instance, configure global rules, and access data import and export features.\"\n                            value={RoleTypes.ADMIN}\n                            onChange={this.handleRoleChange}\n                            isChecked={this.state.role == RoleTypes.ADMIN}\n                        />\n\n                        <Radio id=\"grant-access-role-manager\"\n                            className=\"grant-access-radio-button\"\n                            name=\"grant-access-role\"\n                            label=\"Manager\"\n                            description=\"Read and write artifacts on this Service Registry instance.\"\n                            value={RoleTypes.DEVELOPER}\n                            onChange={this.handleRoleChange}\n                            isChecked={this.state.role == RoleTypes.DEVELOPER} />\n\n                        <Radio id=\"grant-access-role-viewer\"\n                            className=\"grant-access-radio-button\"\n                            name=\"grant-access-role\"\n                            label=\"Viewer\"\n                            description=\"Read artifacts on this Service Registry instance.\"\n                            value={RoleTypes.READ_ONLY}\n                            onChange={this.handleRoleChange}\n                            isChecked={this.state.role == RoleTypes.READ_ONLY}/>\n                    </FormGroup>\n                </Form>\n\n            </Modal>\n        );\n    }\n\n    protected initializeState(): GrantAccessModalState {\n        return {\n            isAccountIDSelectOpen: false,\n            isValid: false,\n            accountId: \"\",\n            accountName: \"\",\n            role: undefined,\n            escapeClosesModal: true\n        };\n    }\n\n    public reset(): void {\n        this.setMultiState(this.initializeState());\n    }\n\n    private onAccountIDClearSelection = () => {\n        this.setMultiState({\n          accountID: \"\",\n          isAccountIDSelectOpen: false\n        });\n      };\n\n    private handlePrincipalChange = (value: string): void => {\n        this.setMultiState({\n            accountId: value,\n            isValid: this.checkValid(value, this.state.role)\n        })\n    };\n\n    private onAccountIDSelect = (_event: any, selection: string | SelectOptionObject, isPlaceholder: boolean | undefined) => {\n        if (isPlaceholder) {\n            this.onAccountIDClearSelection();\n        }  else {\n            const newState: any = {\n                accountId: selection,\n                accountName: this.getAccountName(selection as string),\n                isValid: this.checkValid(selection, this.state.role),\n                isAccountIDSelectOpen: false\n            };\n            this.setMultiState(newState);\n        }\n      };\n\n    private onAccountIDToggle = (isOpen: boolean) => {\n        this.setSingleState(\"isAccountIDSelectOpen\", isOpen);\n      };\n\n    private handleRoleChange = (isChecked: boolean, event: any): void => {\n        this.setMultiState({\n            isValid: this.checkValid(this.state.accountId, event.target.value),\n            role: event.target.value\n        })\n    };\n\n    private doGrantAccess = (): void => {\n        const principal: Principal = {\n            displayName: this.state.accountName,\n            id: this.state.accountId as string,\n            principalType: \"USER_ACCOUNT\"\n        };\n        this.props.onGrant(principal,\n            this.state.role as string,\n            this.props.roles?.find(role => role.principalId == this.state.accountId) !== undefined);\n        this.reset();\n    }\n\n    private checkValid(accountId: SelectOptionObject | string | undefined, role: string | undefined): boolean {\n        if (!accountId) {\n            return false;\n        }\n        if (!role) {\n            return false;\n        }\n        return true;\n    }\n\n    private getAccountName(accountId: string): string | undefined {\n        const principals: Principal[] | undefined = Services.getConfigService().principals();\n        if (principals) {\n            for (const principal of principals) {\n                if (principal.id === accountId) {\n                    return principal.displayName;\n                }\n            }\n        }\n        return undefined;\n    }\n\n    private modalDescription() {\n        if (Services.getConfigService().featureMultiTenant()) {\n            return \"Manage access to resources in this Service Registry instance by assigning permissions to an account.\";\n        } else {\n            return \"Manage access to resources in the Registry by assigning permissions to an account.\";\n        }\n    }\n\n    private escapePressed = (): void => {\n        if (this.state.escapeClosesModal) {\n            this.props.onClose();\n        }\n    };\n\n    private onAccountSelectToggle = (isOpen: boolean): void => {\n        this.setSingleState(\"escapeClosesModal\", !isOpen);\n    };\n\n    private onKey = (event: any) => {\n        if (event.key === \"Enter\") {\n            event.stopPropagation();\n            event.preventDefault();\n        }\n    };\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport \"./roleList.css\";\nimport {\n    Button,\n    Modal\n} from '@patternfly/react-core';\nimport { TableComposable, Thead, Tbody, Tr, Th, Td } from '@patternfly/react-table';\nimport { PureComponent, PureComponentProps, PureComponentState } from \"../../../../components\";\nimport { RoleMapping, RoleTypes } from \"../../../../../models\";\nimport { RoleMappingsEmptyState } from '../empty';\nimport {Services} from \"../../../../../services\";\n\n/**\n * Properties\n */\nexport interface RoleListProps extends PureComponentProps {\n    roles: RoleMapping[];\n    roleFilter: RoleMapping;\n    onRevoke: (principalId: string) => void;\n    onEditRoleMapping: (role: RoleMapping) => void;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface RoleListState extends PureComponentState {\n    isRevokeModalOpen: boolean;\n    revokingPrincipalId: string;\n    currentRole: RoleMapping;\n}\n\n/**\n * Models the list of roles.\n */\nexport class RoleList extends PureComponent<RoleListProps, RoleListState> {\n\n    constructor(props: Readonly<RoleListProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n\n        const roleActions = (role: RoleMapping) => [\n            {\n                title: 'Edit',\n                onClick: () => { this.props.onEditRoleMapping(role)}\n            },\n            {\n                title: 'Remove',\n                onClick: () => {this.onRevokeRoleMapping(role.principalId)}\n            }\n        ];\n\n        let filteredRoles = this.props.roles.sort((rm1, rm2) => {\n            return rm1.principalId.localeCompare(rm2.principalId);\n        }).filter((role: RoleMapping)=>{\n            let match: boolean = false;\n            let mustMatch: boolean = false;\n            if(this.props.roleFilter.principalId.length > 0) {\n                mustMatch = true;\n                match = match || role.principalId.toLowerCase().includes(this.props.roleFilter.principalId.toLowerCase());\n            }\n            if(this.props.roleFilter.principalName.length > 0) {\n                mustMatch = true;\n                match = match || role.principalName.toLowerCase().includes(this.props.roleFilter.principalName.toLowerCase());\n            }\n            return mustMatch ? match : true;\n        }).filter((role: RoleMapping)=>{\n            if (this.props.roleFilter.role.length > 0) {\n                switch (role.role) {\n                    case RoleTypes.DEVELOPER:\n                        return \"Manager\" == this.props.roleFilter.role;\n                    case RoleTypes.ADMIN:\n                        return \"Administrator\" == this.props.roleFilter.role;\n                    case RoleTypes.READ_ONLY:\n                        return \"Viewer\" == this.props.roleFilter.role;\n                }\n            }\n            return true;\n        });\n        return (\n            filteredRoles.length === 0 ?\n                <RoleMappingsEmptyState isFiltered={true}/> :\n            <React.Fragment>\n                <TableComposable className=\"role-list\">\n                    <Thead>\n                        <Tr>\n                            {/* <Th\n                            /> */}\n                            <Th>Account</Th>\n                            <Th>Role</Th>\n                        </Tr>\n                    </Thead>\n                    <Tbody>\n                        {filteredRoles.map((role, rowIndex) =>\n\n                            <Tr key={rowIndex}>\n                                {/* Disable for now until we want to support multi-select.\n                                <Td\n                                    key={`${rowIndex}_0`}\n                                    select={{\n                                        rowIndex,\n                                        onSelect: this.onSelect,\n                                        isSelected: false,\n                                    }}\n                                /> */}\n                                <Td>\n                                    <div className=\"principal-id\">{ role.principalId }</div>\n                                    <div className=\"principal-name\">{ role.principalName }</div>\n                                </Td>\n                                <Td>{this.roleName(role.role)}</Td>\n                                <Td className = \"role-list-action-column\"\n                                    key={`${rowIndex}_2`}\n                                    actions={{\n                                        items: roleActions(role)\n                                    }}\n                                />\n                            </Tr>\n                        )\n                        }\n                    </Tbody>\n                </TableComposable>\n                <Modal\n                    title=\"Remove role?\"\n                    variant=\"small\"\n                    isOpen={this.state.isRevokeModalOpen}\n                    onClose={this.onRevokeModalClose}\n                    className=\"revoke-access-modal pf-m-redhat-font\"\n                    actions={[\n                        <Button key=\"revoke\" variant=\"primary\" data-testid=\"modal-btn-revoke\" onClick={this.doRevokeAccess}>Remove</Button>,\n                        <Button key=\"cancel\" variant=\"link\" data-testid=\"modal-btn-cancel\" onClick={this.onRevokeModalClose}>Cancel</Button>\n                    ]}\n                >\n                    <p>{ this.removeRoleConfirmModalBodyText() }</p>\n                </Modal>\n            </React.Fragment>\n        );\n    }\n\n    protected initializeState(): RoleListState {\n        return {\n            isRevokeModalOpen: false,\n            revokingPrincipalId: \"\",\n            currentRole: this.props.roles[0],\n        };\n    }\n\n    private roleName(role: string): string {\n        switch (role) {\n            case RoleTypes.DEVELOPER:\n                return \"Manager\";\n            case RoleTypes.ADMIN:\n                return \"Administrator\";\n            case RoleTypes.READ_ONLY:\n                return \"Viewer\";\n        }\n        return role;\n    }\n\n    private onRevokeRoleMapping = (principalId: string) => {\n        this.setMultiState({\n            isRevokeModalOpen: true,\n            revokingPrincipalId: principalId\n        });\n    };\n\n    private onRevokeModalClose = (): void => {\n        this.setSingleState(\"isRevokeModalOpen\", false);\n    };\n\n    private doRevokeAccess = (): void => {\n        this.onRevokeModalClose();\n        this.props.onRevoke(this.state.revokingPrincipalId);\n    }\n\n    private removeRoleConfirmModalBodyText() {\n        if (Services.getConfigService().featureMultiTenant()) {\n            return `Do you really want to revoke ${this.state.revokingPrincipalId}'s access?`;\n        } else {\n            return `${this.state.revokingPrincipalId} will no longer have access to this Service Registry instance.`;\n        }\n    }\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./roles.css\";\nimport {\n    Button,\n    ButtonVariant,\n    InputGroup,\n    PageSection,\n    PageSectionVariants,\n    Select,\n    SelectOption,\n    SelectOptionObject,\n    SelectVariant,\n    TextInput,\n    Toolbar,\n    ToolbarContent,\n    ToolbarFilter,\n    ToolbarGroup,\n    ToolbarItem\n} from '@patternfly/react-core';\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport {PageComponent, PageProps, PageState} from \"../basePage\";\nimport {RoleMapping} from \"../../../models\";\nimport {Principal, Services} from \"../../../services\";\nimport {GrantAccessModal, RoleList, RoleMappingsEmptyState} from \"./components\";\nimport {PleaseWaitModal, RootPageHeader} from \"../../components\";\nimport {If} from \"../../components/common/if\";\n\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface RolesPageProps extends PageProps {\n    principalSelect: any\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface RolesPageState extends PageState {\n    isCreateRoleMappingModalOpen: boolean;\n    isRoleMappingUpdate: boolean;\n    roles: RoleMapping[];\n    roleFilter: RoleMapping;\n    roleListFilterOpened: boolean;\n    roleFilterSelected: string;\n    roleFilterTextInputValue: string;\n    roleFilterSelectInputValue: string;\n    roleFilterSelectInputOpened: boolean;\n    selectedRole: RoleMapping | undefined;\n    isPleaseWaitModalOpen: boolean;\n    pleaseWaitMessage: string;\n}\n\nconst roleFilterOptions = ['Account', 'Role'];\n/**\n * The global roles page.\n */\nexport class RolesPage extends PageComponent<RolesPageProps, RolesPageState> {\n\n    constructor(props: Readonly<RolesPageProps>) {\n        super(props);\n    }\n\n    public renderPage(): React.ReactElement {\n        return (\n            <React.Fragment>\n                <PageSection className=\"ps_roles-header\" variant={PageSectionVariants.light} padding={{ default : \"noPadding\" }}>\n                    <RootPageHeader tabKey={2} />\n                </PageSection>\n                <PageSection variant={PageSectionVariants.default} isFilled={true} className=\"ps_role-section\">\n                    {\n                        this.state.roles.length === 0 ?\n                            <RoleMappingsEmptyState onCreateRoleMapping={this.onCreateRoleMapping}/>\n                            :\n                            <>\n                                <Toolbar id=\"toolbar\" clearAllFilters={() => {\n                                    this.setSingleState(\"roleFilter\", {\n                                        principalId: \"\",\n                                        role: \"\",\n                                        principalName: \"\"\n                                    });\n                                }}>\n                                    <ToolbarContent>\n                                        <ToolbarGroup>\n                                            <ToolbarItem className=\"ps_role-filter-select-toolbar-item\">\n                                                <Select\n                                                    variant={SelectVariant.single}\n                                                    aria-label=\"Filter On\"\n                                                    onToggle={this.onRoleFilterToggle}\n                                                    onSelect={this.onRoleFilterSelect}\n                                                    selections={this.state.roleFilterSelected}\n                                                    isOpen={this.state.roleListFilterOpened}\n                                                >\n                                                    {roleFilterOptions.map((option, index) => (\n                                                        <SelectOption key={index} value={option} />\n                                                    ))}\n                                                </Select>\n                                            </ToolbarItem>\n                                            <ToolbarItem>\n                                                <InputGroup>\n                                                    {\n                                                        this.isRoleFilterSelected() ?\n                                                            <Select\n                                                                variant={SelectVariant.single}\n                                                                aria-label=\"Role\"\n                                                                onToggle={this.onRoleFilterSelectToggle}\n                                                                onSelect={this.onRoleFilterSelectChange}\n                                                                isOpen={this.state.roleFilterSelectInputOpened}\n                                                                placeholderText=\"Filter by role\"\n                                                            >\n                                                                <SelectOption key={1} value=\"Administrator\" />\n                                                                <SelectOption key={2} value=\"Manager\" />\n                                                                <SelectOption key={3} value=\"Viewer\" />\n                                                            </Select>\n                                                            :\n                                                            <TextInput value={this.state.roleFilterTextInputValue}\n                                                                       placeholder=\"Filter by account\"\n                                                                       name=\"roleFilterInput\" id=\"roleFilterInput\"\n                                                                       type=\"search\" aria-label=\"role filter input\"\n                                                                       onKeyDown={this.onRoleFilterTextInputKeydown}\n                                                                       onChange={this.onRoleFilterInputChange} />\n                                                    }\n                                                    <If condition={this.isAccountFilterSelected}>\n                                                        <Button variant={ButtonVariant.control} aria-label=\"search button for search input\" onClick={this.onRoleFilterApplyClick}>\n                                                            <SearchIcon />\n                                                        </Button>\n                                                    </If>\n                                                </InputGroup>\n                                            </ToolbarItem>\n                                            <ToolbarItem>\n                                                <Button variant=\"primary\" data-testid=\"btn-grant-access\" onClick={this.onCreateRoleMapping}>Grant access</Button>\n                                            </ToolbarItem>\n                                            <ToolbarFilter chips={this.state.roleFilter.principalId.length > 0 ? [this.state.roleFilter.principalId] : undefined}\n                                                deleteChip={() => {\n                                                    this.setSingleState(\"roleFilter\", {\n                                                        principalId: \"\",\n                                                        role: this.state.roleFilter.role,\n                                                        principalName: \"\"\n                                                    });\n                                                }}\n                                                categoryName=\"Account\"> </ToolbarFilter>\n                                            <ToolbarFilter chips={this.state.roleFilter.role.length > 0 ? [this.state.roleFilter.role] : undefined}\n                                                deleteChip={() => {\n                                                    this.setSingleState(\"roleFilter\", {\n                                                        principalId: this.state.roleFilter.principalId,\n                                                        role: \"\",\n                                                        principalName: this.state.roleFilter.principalName,\n                                                    });\n                                                }}\n                                                categoryName=\"Role\"> </ToolbarFilter>\n\n                                        </ToolbarGroup>\n                                    </ToolbarContent>\n                                </Toolbar>\n                                <RoleList roles={this.state.roles} roleFilter={this.state.roleFilter} onRevoke={this.onRevokeRoleMapping} onEditRoleMapping={this.onEditRoleMapping}></RoleList>\n                            </>}\n                </PageSection>\n                <GrantAccessModal isOpen={this.state.isCreateRoleMappingModalOpen}\n                    isUpdateAccess={this.state.isRoleMappingUpdate}\n                    onClose={this.closeRoleMappingModal}\n                    onGrant={this.createRoleMapping}\n                    roles={this.state.isRoleMappingUpdate ? this.state.roles : null}\n                    defaultRole={this.state.selectedRole} />\n                <PleaseWaitModal message={this.state.pleaseWaitMessage}\n                                 isOpen={this.state.isPleaseWaitModalOpen} />\n            </React.Fragment>\n        );\n    }\n\n    protected initializePageState(): RolesPageState {\n        return {\n            isCreateRoleMappingModalOpen: false,\n            isPleaseWaitModalOpen: false,\n            isRoleMappingUpdate: false,\n            pleaseWaitMessage: \"\",\n            selectedRole: undefined,\n            roles: [],\n            roleFilter: { principalId: \"\", role: \"\", principalName: \"\" },\n            roleListFilterOpened: false,\n            roleFilterSelected: roleFilterOptions[0],\n            roleFilterTextInputValue: \"\",\n            roleFilterSelectInputValue: \"\",\n            roleFilterSelectInputOpened: false\n        };\n    }\n\n    // @ts-ignore\n    protected createLoaders(): Promise {\n        return Services.getAdminService().getRoleMappings().then(roles => {\n            this.setMultiState({\n                isLoading: false,\n                roles\n            });\n        });\n    }\n\n    private onRoleFilterToggle = (isExpanded: boolean): void => {\n        this.setSingleState(\"roleListFilterOpened\", isExpanded)\n    }\n    private onRoleFilterSelectToggle = (isExpanded: boolean): void => {\n        this.setSingleState(\"roleFilterSelectInputOpened\", isExpanded)\n    }\n\n    private onRoleFilterSelect = (_event: any, selection: string | SelectOptionObject, isPlaceholder: boolean | undefined) => {\n        this.setMultiState({\n            roleFilterSelected: selection,\n            roleListFilterOpened: false\n        });\n    };\n\n    private onRoleFilterInputChange = (value: string) => {\n        this.setSingleState(\"roleFilterTextInputValue\", value)\n    }\n    private onRoleFilterTextInputKeydown = (event: any) => {\n        if (event.key === \"Enter\") {\n            this.onRoleFilterApplyClick();\n        }\n    };\n    private onRoleFilterApplyClick = () => {\n        let newRoleMappingFilter: RoleMapping = {\n            principalId: this.state.roleFilterSelected == roleFilterOptions[0] ? this.state.roleFilterTextInputValue : this.state.roleFilter?.principalId,\n            role: this.state.roleFilterSelected == roleFilterOptions[1] ? this.state.roleFilterSelectInputValue : this.state.roleFilter.role,\n            principalName: this.state.roleFilterSelected == roleFilterOptions[0] ? this.state.roleFilterTextInputValue : this.state.roleFilter?.principalId\n        }\n        this.setMultiState({\n            roleFilter: newRoleMappingFilter,\n            roleFilterTextInputValue: \"\"\n        });\n    }\n    private onCreateRoleMapping = (): void => {\n        this.setSingleState(\"isCreateRoleMappingModalOpen\", true);\n    };\n\n    private isAccountFilterSelected = (): boolean => {\n        return this.state.roleFilterSelected == roleFilterOptions[0];\n    };\n    private isRoleFilterSelected = (): boolean => {\n        return this.state.roleFilterSelected == roleFilterOptions[1];\n    };\n\n    private onRoleFilterSelectChange = (_event: any, selection: string | SelectOptionObject, isPlaceholder: boolean | undefined) => {\n        this.setMultiState({\n            roleFilterSelectInputValue: selection,\n            roleFilterSelectInputOpened: false\n        }, () => this.onRoleFilterApplyClick());\n    };\n\n    private closeRoleMappingModal = (): void => {\n        this.setMultiState({\n            selectedRole: undefined,\n            isRoleMappingUpdate: false,\n            isCreateRoleMappingModalOpen: false\n        });\n    };\n\n    private onEditRoleMapping = (role: RoleMapping) => {\n        this.setMultiState({\n            selectedRole: role,\n            isRoleMappingUpdate: true\n        })\n        this.onCreateRoleMapping();\n    }\n\n    private updateRoleMapping = (principal: Principal, role: string): void => {\n        this.pleaseWait(true, \"Granting access, please wait...\");\n        Services.getAdminService().updateRoleMapping(principal.id, role).then((mapping) => {\n            const currentRoleMappings = this.state.roles;\n            currentRoleMappings.map((role, index) => {\n                if (role.principalId === mapping.principalId) {\n                    currentRoleMappings[index] = {\n                        ...mapping,\n                        principalName: principal.displayName as string\n                    };\n                }\n            });\n\n            this.pleaseWait(false, \"\");\n            this.setSingleState(\"roles\", [\n                ...currentRoleMappings\n            ]);\n        }).catch(e => this.handleServerError(e, \"Error updating access.\"));\n    };\n\n    private createRoleMapping = (principal: Principal, role: string, isUpdate: boolean): void => {\n        this.closeRoleMappingModal();\n        if (isUpdate) {\n            this.updateRoleMapping(principal, role);\n        } else {\n            this.pleaseWait(true, \"Granting access, please wait...\");\n            Services.getAdminService().createRoleMapping(principal.id, role, principal.displayName as string).then((mapping) => {\n                this.pleaseWait(false, \"\");\n                this.setSingleState(\"roles\", [\n                    mapping, ...this.state.roles\n                ]);\n            }).catch(e => {\n                if (e?.error_code === 409) {\n                    // If we get a conflict when trying to create, that means the mapping already exists\n                    // and we should instead update.\n                    this.updateRoleMapping(principal, role);\n                } else {\n                    this.handleServerError(e, \"Error granting access.\");\n                }\n            });\n        }\n    };\n\n    private onRevokeRoleMapping = (principalId: string): void => {\n        this.pleaseWait(true, `Revoking access for ${principalId}, please wait...`);\n        Services.getAdminService().deleteRoleMapping(principalId).then(() => {\n            this.pleaseWait(false, \"\");\n            this.removeMapping(principalId);\n        }).catch(e => this.handleServerError(e, \"Error revoking access.\"));\n    };\n\n    private pleaseWait = (isOpen: boolean, message: string): void => {\n        this.setMultiState({\n            isPleaseWaitModalOpen: isOpen,\n            pleaseWaitMessage: message\n        });\n    };\n\n    private removeMapping(principalId: string): void {\n        const newRoles: RoleMapping[] =\n            this.state.roles.filter(rm => {\n                return rm.principalId !== principalId;\n            });\n        this.setSingleState(\"roles\", newRoles);\n    }\n\n}\n"],"names":["props","render","EmptyState","variant","EmptyStateVariant","EmptyStateIcon","icon","PlusCircleIcon","Title","headingLevel","size","If","condition","isFiltered","EmptyStateBody","this","emptyStateBodyText","Button","onClick","onCreateRoleMapping","initializeState","Services","featureMultiTenant","onToggle","isOpen","setSingleState","clearSelection","setMultiState","id","onSelect","_event","selection","isPlaceholder","onIdUpdate","filter","event","criteria","principalToSelectOption","principal","index","SelectOption","key","value","description","displayName","filteredSAs","initialOptions","principalType","toLowerCase","includes","filteredUsers","rval","length","push","SelectGroup","label","sort","a","b","localeCompare","map","Divider","componentDidUpdate","prevProps","children","Select","SelectVariant","typeAheadAriaLabel","onClear","selections","state","isInputValuePersisted","placeholderText","isCreatable","menuAppendTo","maxHeight","isGrouped","onFilter","onAccountIDClearSelection","accountID","isAccountIDSelectOpen","handlePrincipalChange","accountId","isValid","checkValid","role","onAccountIDSelect","newState","accountName","getAccountName","onAccountIDToggle","handleRoleChange","isChecked","target","doGrantAccess","onGrant","undefined","roles","find","principalId","reset","escapePressed","escapeClosesModal","onClose","onAccountSelectToggle","onKey","stopPropagation","preventDefault","defaultRole","principalName","principals","Modal","title","modalDescription","className","onEscapePress","onKeyPress","onKeyDown","onKeyUp","actions","isDisabled","Form","serviceRegistryInstance","DescriptionList","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","FormGroup","labelIcon","Popover","headerContent","bodyContent","OutlinedQuestionCircleIcon","isRequired","fieldId","SelectPrincipalAccount","name","isUpdateAccess","option","TextInput","type","onChange","Radio","RoleTypes","onRevokeRoleMapping","isRevokeModalOpen","revokingPrincipalId","onRevokeModalClose","doRevokeAccess","onRevoke","roleActions","onEditRoleMapping","filteredRoles","rm1","rm2","match","mustMatch","roleFilter","TableComposable","Thead","Tr","Th","Tbody","rowIndex","Td","roleName","items","removeRoleConfirmModalBodyText","currentRole","roleFilterOptions","onRoleFilterToggle","isExpanded","onRoleFilterSelectToggle","onRoleFilterSelect","roleFilterSelected","roleListFilterOpened","onRoleFilterInputChange","onRoleFilterTextInputKeydown","onRoleFilterApplyClick","newRoleMappingFilter","roleFilterTextInputValue","roleFilterSelectInputValue","isAccountFilterSelected","isRoleFilterSelected","onRoleFilterSelectChange","roleFilterSelectInputOpened","closeRoleMappingModal","selectedRole","isRoleMappingUpdate","isCreateRoleMappingModalOpen","updateRoleMapping","pleaseWait","then","mapping","currentRoleMappings","catch","e","handleServerError","createRoleMapping","isUpdate","error_code","deleteRoleMapping","removeMapping","message","isPleaseWaitModalOpen","pleaseWaitMessage","renderPage","PageSection","PageSectionVariants","padding","default","tabKey","isFilled","Toolbar","clearAllFilters","ToolbarContent","ToolbarGroup","ToolbarItem","InputGroup","placeholder","ButtonVariant","SearchIcon","ToolbarFilter","chips","deleteChip","categoryName","initializePageState","createLoaders","getRoleMappings","isLoading","newRoles","rm"],"sourceRoot":""}