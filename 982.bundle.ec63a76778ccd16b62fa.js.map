{"version":3,"file":"982.bundle.ec63a76778ccd16b62fa.js","mappings":"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","sources":["webpack://@apicurio/registry-ui/./src/app/components/common/if.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifactVersion/artifactVersion.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifactVersion/components/modals/editMetaDataModal.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifactVersion/components/pageheader/pageheader.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifactVersion/components/pageheader/version-selector.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifactVersion/components/tabs/content.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifactVersion/components/tabs/documentation.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifactVersion/components/tabs/errorTab.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifactVersion/components/tabs/info.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifactVersion/components/uploadForm/uploadForm.tsx","webpack://@apicurio/registry-ui/./src/app/pages/basePage.tsx","webpack://@apicurio/registry-ui/./src/app/components/errorPage/accessErrorPage.tsx"],"sourcesContent":["/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport {PureComponent, PureComponentProps, PureComponentState} from \"../baseComponent\";\n\n/**\n * Properties\n */\nexport interface IfProps extends PureComponentProps {\n    condition: boolean | (() => boolean);\n    children?: React.ReactNode;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface IfState extends PureComponentState {\n}\n\n\n/**\n * Wrapper around a set of arbitrary child elements and displays them only if the\n * indicated condition is true.\n */\nexport class If extends PureComponent<IfProps, IfState> {\n\n    constructor(props: Readonly<IfProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        if (this.accept()) {\n            return <React.Fragment children={this.props.children} />\n        } else {\n            return <React.Fragment />\n        }\n    }\n\n    protected initializeState(): IfState {\n        return {};\n    }\n\n    private accept(): boolean {\n        if (typeof this.props.condition === \"boolean\") {\n            return this.props.condition;\n        } else {\n            return this.props.condition();\n        }\n    }\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport \"./artifactVersion.css\";\nimport {\n    Breadcrumb,\n    BreadcrumbItem,\n    Button,\n    Modal,\n    PageSection,\n    PageSectionVariants,\n    Tab,\n    Tabs\n} from '@patternfly/react-core';\nimport {PageComponent, PageProps, PageState} from \"../basePage\";\nimport {ContentTabContent, DocumentationTabContent, InfoTabContent} from \"./components/tabs\";\nimport {ArtifactVersionPageHeader} from \"./components/pageheader\";\nimport {UploadVersionForm} from \"./components/uploadForm\";\nimport {Link} from \"react-router-dom\";\nimport {EditMetaDataModal} from \"./components/modals\";\nimport {InvalidContentModal} from \"../../components/modals\";\nimport {IfFeature} from \"../../components\";\nimport {ArtifactMetaData, ArtifactTypes, ContentTypes, Rule, SearchedVersion} from \"../../../models\";\nimport {CreateVersionData, EditableMetaData, Services} from \"../../../services\";\nimport {PleaseWaitModal} from \"../../components/modals/pleaseWaitModal\";\n\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface ArtifactVersionPageProps extends PageProps {\n}\n\n/**\n * State\n */\nexport interface ArtifactVersionPageState extends PageState {\n    activeTabKey: number;\n    artifact: ArtifactMetaData | null;\n    artifactContent: string;\n    artifactIsText: boolean;\n    isInvalidContentModalOpen: boolean;\n    isUploadFormValid: boolean;\n    isUploadModalOpen: boolean;\n    isDeleteModalOpen: boolean;\n    isEditModalOpen: boolean;\n    isPleaseWaitModalOpen: boolean;\n    pleaseWaitMessage: string;\n    rules: Rule[] | null;\n    uploadFormData: string | null;\n    versions: SearchedVersion[] | null;\n    invalidContentError: any | null;\n}\n\nfunction is404(e: any) {\n    if (typeof e === \"string\") {\n        try {\n            const eo: any = JSON.parse(e);\n            if (eo && eo.error_code && eo.error_code === 404) {\n                return true;\n            }\n        } catch (e) {\n            // Do nothing\n        }\n    }\n    return false;\n}\n\n/**\n * The artifacts page.\n */\nexport class ArtifactVersionPage extends PageComponent<ArtifactVersionPageProps, ArtifactVersionPageState> {\n\n    constructor(props: Readonly<ArtifactVersionPageProps>) {\n        super(props);\n    }\n\n    public renderPage(): React.ReactElement {\n        const artifact: ArtifactMetaData = this.state.artifact ? this.state.artifact : new ArtifactMetaData();\n        const tabs: React.ReactNode[] = [\n            <Tab eventKey={0} title=\"Info\" key=\"info\" tabContentId=\"tab-info\">\n                <InfoTabContent artifact={artifact}\n                                rules={this.rules()}\n                                onEnableRule={this.doEnableRule}\n                                onDisableRule={this.doDisableRule}\n                                onConfigureRule={this.doConfigureRule}\n                                onDownloadArtifact={this.doDownloadArtifact}\n                                onEditMetaData={this.openEditMetaDataModal}\n                />\n            </Tab>,\n            <Tab eventKey={1} title=\"Documentation\" key=\"documentation\">\n                <DocumentationTabContent artifactContent={this.state.artifactContent} artifactType={artifact.type} />\n            </Tab>,\n            <Tab eventKey={2} title=\"Content\" key=\"content\">\n                <ContentTabContent artifactContent={this.state.artifactContent} artifactType={artifact.type} />\n            </Tab>,\n        ];\n        if (!this.showDocumentationTab()) {\n            tabs.splice(1, 1);\n        }\n\n        let groupId: string = this.groupIdParam();\n        let hasGroup: boolean = groupId != \"default\";\n        let breadcrumbs = (\n            <Breadcrumb>\n                <BreadcrumbItem><Link to={this.linkTo(\"/artifacts\")} data-testid=\"breadcrumb-lnk-artifacts\">Artifacts</Link></BreadcrumbItem>\n                <BreadcrumbItem><Link to={this.linkTo(`/artifacts?group=${ encodeURIComponent(groupId) }`)}\n                                      data-testid=\"breadcrumb-lnk-group\">{ groupId }</Link></BreadcrumbItem>\n                <BreadcrumbItem isActive={true}>{ this.artifactId() }</BreadcrumbItem>\n            </Breadcrumb>\n        );\n        if (!hasGroup) {\n            breadcrumbs = (\n                <Breadcrumb>\n                    <BreadcrumbItem><Link to=\"/artifacts\" data-testid=\"breadcrumb-lnk-artifacts\">Artifacts</Link></BreadcrumbItem>\n                    <BreadcrumbItem isActive={true}>{ this.artifactId() }</BreadcrumbItem>\n                </Breadcrumb>\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <IfFeature feature=\"breadcrumbs\" is={true}>\n                    <PageSection className=\"ps_header-breadcrumbs\" variant={PageSectionVariants.light} children={breadcrumbs} />\n                </IfFeature>\n                <PageSection className=\"ps_artifact-version-header\" variant={PageSectionVariants.light}>\n                    <ArtifactVersionPageHeader title={this.nameOrId()}\n                                               versions={this.versions()}\n                                               version={this.versionParam()}\n                                               onUploadVersion={this.onUploadVersion}\n                                               onDeleteArtifact={this.onDeleteArtifact}\n                                               groupId={groupId}\n                                               artifactId={this.artifactId()} />\n                </PageSection>\n                <PageSection variant={PageSectionVariants.light} isFilled={true} padding={{default : \"noPadding\"}} className=\"artifact-details-main\">\n                    <Tabs className=\"artifact-page-tabs\"\n                          id=\"artifact-page-tabs\"\n                          unmountOnExit={true}\n                          isFilled={false}\n                          activeKey={this.state.activeTabKey}\n                          children={tabs}\n                          onSelect={this.handleTabClick}\n                    />\n                </PageSection>\n                <Modal\n                    title=\"Upload Artifact Version\"\n                    variant=\"large\"\n                    isOpen={this.state.isUploadModalOpen}\n                    onClose={this.onUploadModalClose}\n                    className=\"upload-artifact-modal pf-m-redhat-font\"\n                    actions={[\n                        <Button key=\"upload\" variant=\"primary\" data-testid=\"modal-btn-upload\" onClick={this.doUploadArtifactVersion} isDisabled={!this.state.isUploadFormValid}>Upload</Button>,\n                        <Button key=\"cancel\" variant=\"link\" data-testid=\"modal-btn-cancel\" onClick={this.onUploadModalClose}>Cancel</Button>\n                    ]}\n                >\n                    <UploadVersionForm onChange={this.onUploadFormChange} onValid={this.onUploadFormValid} />\n                </Modal>\n                <Modal\n                    title=\"Delete Artifact\"\n                    variant=\"small\"\n                    isOpen={this.state.isDeleteModalOpen}\n                    onClose={this.onDeleteModalClose}\n                    className=\"delete-artifact-modal pf-m-redhat-font\"\n                    actions={[\n                        <Button key=\"delete\" variant=\"primary\" data-testid=\"modal-btn-delete\" onClick={this.doDeleteArtifact}>Delete</Button>,\n                        <Button key=\"cancel\" variant=\"link\" data-testid=\"modal-btn-cancel\" onClick={this.onDeleteModalClose}>Cancel</Button>\n                    ]}\n                >\n                    <p>Do you want to delete this artifact and all of its versions?  This action cannot be undone.</p>\n                </Modal>\n                <EditMetaDataModal name={this.artifactName()}\n                                   description={this.artifactDescription()}\n                                   labels={this.artifactLabels()}\n                                   isOpen={this.state.isEditModalOpen}\n                                   onClose={this.onEditModalClose}\n                                   onEditMetaData={this.doEditMetaData}\n                />\n                <InvalidContentModal error={this.state.invalidContentError}\n                                     isOpen={this.state.isInvalidContentModalOpen}\n                                     onClose={this.closeInvalidContentModal} />\n                <PleaseWaitModal message={this.state.pleaseWaitMessage}\n                                 isOpen={this.state.isPleaseWaitModalOpen} />\n            </React.Fragment>\n        );\n    }\n\n    protected initializePageState(): ArtifactVersionPageState {\n        return {\n            activeTabKey: 0,\n            artifact: null,\n            artifactContent: \"\",\n            artifactIsText: true,\n            invalidContentError: null,\n            isDeleteModalOpen: false,\n            isEditModalOpen: false,\n            isInvalidContentModalOpen: false,\n            isPleaseWaitModalOpen: false,\n            isUploadFormValid: false,\n            isUploadModalOpen: false,\n            pleaseWaitMessage: \"\",\n            rules: null,\n            uploadFormData: null,\n            versions: null\n        };\n    }\n\n    protected groupIdParam(): string {\n        return this.getPathParam(\"groupId\");\n    }\n\n    protected artifactIdParam(): string {\n        return this.getPathParam(\"artifactId\");\n    }\n\n    protected versionParam(): string {\n        return this.getPathParam(\"version\");\n    }\n\n    // @ts-ignore\n    protected createLoaders(): Promise[] | null {\n        let groupId: string|null = this.groupIdParam();\n        if (groupId == \"default\") {\n            groupId = null;\n        }\n        const artifactId: string = this.artifactIdParam();\n        Services.getLoggerService().info(\"Loading data for artifact: \", artifactId);\n        return [\n            Services.getGroupsService().getArtifactMetaData(groupId, artifactId, this.versionParam()).then(md => this.setSingleState(\"artifact\", md)),\n            Services.getGroupsService().getArtifactContent(groupId, artifactId, this.versionParam())\n                .then(content => this.setSingleState(\"artifactContent\", content))\n                .catch(e => {\n                    Services.getLoggerService().warn(\"Failed to get artifact content: \", e);\n                    if (is404(e)) {\n                        this.setSingleState(\"artifactContent\", \"Artifact version content not available (404 Not Found).\");\n                    } else {\n                        throw e;\n                    }\n                }\n            ),\n            Services.getGroupsService().getArtifactRules(groupId, artifactId).then(rules => this.setSingleState(\"rules\", rules)),\n            Services.getGroupsService().getArtifactVersions(groupId, artifactId).then(versions => this.setSingleState(\"versions\", versions.reverse()))\n        ];\n    }\n\n    private handleTabClick = (event: any, tabIndex: any): void => {\n        this.setSingleState(\"activeTabKey\", tabIndex);\n    };\n\n    private onUploadVersion = (): void => {\n        this.setSingleState(\"isUploadModalOpen\", true);\n    };\n\n    private onDeleteArtifact = (): void => {\n        this.setSingleState(\"isDeleteModalOpen\", true);\n    };\n\n    private showDocumentationTab(): boolean {\n        if (this.state.artifact) {\n            return this.state.artifact.type === \"OPENAPI\" && this.state.artifact.state !== \"DISABLED\";\n        } else {\n            return false;\n        }\n    }\n\n    private rules(): Rule[] {\n        return this.state.rules ? this.state.rules : [];\n    }\n\n    private doEnableRule = (ruleType: string): void => {\n        Services.getLoggerService().debug(\"[ArtifactVersionPage] Enabling rule:\", ruleType);\n        let config: string = \"FULL\";\n        if (ruleType === \"COMPATIBILITY\") {\n            config = \"BACKWARD\";\n        }\n        Services.getGroupsService().createArtifactRule(this.groupId(), this.artifactId(), ruleType, config).catch(error => {\n            this.handleServerError(error, `Error enabling \"${ ruleType }\" artifact rule.`);\n        });\n        this.setSingleState(\"rules\", [...this.rules(), {config, type: ruleType}]);\n    };\n\n    private doDisableRule = (ruleType: string): void => {\n        Services.getLoggerService().debug(\"[ArtifactVersionPage] Disabling rule:\", ruleType);\n        Services.getGroupsService().deleteArtifactRule(this.groupId(), this.artifactId(), ruleType).catch(error => {\n            this.handleServerError(error, `Error disabling \"${ ruleType }\" artifact rule.`);\n        });\n        this.setSingleState(\"rules\", this.rules().filter(r => r.type !== ruleType));\n    };\n\n    private doConfigureRule = (ruleType: string, config: string): void => {\n        Services.getLoggerService().debug(\"[ArtifactVersionPage] Configuring rule:\", ruleType, config);\n        Services.getGroupsService().updateArtifactRule(this.groupId(), this.artifactId(), ruleType, config).catch(error => {\n            this.handleServerError(error, `Error configuring \"${ ruleType }\" artifact rule.`);\n        });\n        this.setSingleState(\"rules\", this.rules().map(r => {\n            if (r.type === ruleType) {\n                return {config, type: r.type};\n            } else {\n                return r;\n            }\n        }));\n    };\n\n    private doDownloadArtifact = (): void => {\n        const content: string = this.state.artifactContent;\n\n        let contentType: string = ContentTypes.APPLICATION_JSON;\n        let fext: string = \"json\";\n        if (this.state.artifact?.type === ArtifactTypes.PROTOBUF) {\n            contentType = ContentTypes.APPLICATION_PROTOBUF;\n            fext = \"proto\";\n        }\n        if (this.state.artifact?.type === ArtifactTypes.WSDL) {\n            contentType = ContentTypes.APPLICATION_XML;\n            fext = \"wsdl\";\n        }\n        if (this.state.artifact?.type === ArtifactTypes.XSD) {\n            contentType = ContentTypes.APPLICATION_XML;\n            fext = \"xsd\";\n        }\n        if (this.state.artifact?.type === ArtifactTypes.XML) {\n            contentType = ContentTypes.APPLICATION_XML;\n            fext = \"xml\";\n        }\n        if (this.state.artifact?.type === ArtifactTypes.GRAPHQL) {\n            contentType = ContentTypes.APPLICATION_JSON;\n            fext = \"graphql\";\n        }\n\n        const fname: string = this.artifactNameOrId() + \".\" + fext;\n        Services.getDownloaderService().downloadToFS(content, contentType, fname);\n    };\n\n    private nameOrId(): string {\n        if (!this.state.artifact) {\n            return \"\";\n        }\n        return this.state.artifact.name ? this.state.artifact.name : this.state.artifact.id;\n    }\n\n    private versions(): SearchedVersion[] {\n        return this.state.versions ? this.state.versions : [];\n    }\n\n    private artifactId(): string {\n        return this.state.artifact ? this.state.artifact.id : \"\";\n    }\n\n    private groupId(): string|null {\n        return this.state.artifact ? this.state.artifact.groupId : null;\n    }\n\n    private artifactType(): string {\n        return this.state.artifact ? this.state.artifact.type : \"\";\n    }\n\n    private artifactNameOrId(): string {\n        return this.state.artifact ? (\n            this.state.artifact.name ? this.state.artifact.name : this.state.artifact.id\n        ) : \"\";\n    }\n\n    private artifactName(): string {\n        return this.state.artifact ? (\n            this.state.artifact.name ? this.state.artifact.name : \"\"\n        ) : \"\";\n    }\n\n    private artifactDescription(): string {\n        return this.state.artifact ? (\n            this.state.artifact.description ? this.state.artifact.description : \"\"\n        ) : \"\";\n    }\n\n    private artifactLabels(): string[] {\n        return this.state.artifact ? (\n            this.state.artifact.labels ? this.state.artifact.labels : []\n        ) : [];\n    }\n\n    private onUploadFormValid = (isValid: boolean): void => {\n        this.setSingleState(\"isUploadFormValid\", isValid);\n    };\n\n    private onUploadFormChange = (data: string): void => {\n        this.setSingleState(\"uploadFormData\", data);\n    };\n\n    private onUploadModalClose = (): void => {\n        this.setSingleState(\"isUploadModalOpen\", false);\n    };\n\n    private onDeleteModalClose = (): void => {\n        this.setSingleState(\"isDeleteModalOpen\", false);\n    };\n\n    private doUploadArtifactVersion = (): void => {\n        this.onUploadModalClose();\n        this.pleaseWait(true, \"Uploading new version, please wait...\");\n        if (this.state.uploadFormData !== null) {\n            const data: CreateVersionData = {\n                content: this.state.uploadFormData,\n                type: this.artifactType()\n            };\n            Services.getGroupsService().createArtifactVersion(this.groupId(), this.artifactId(), data).then(versionMetaData => {\n                const groupId: string = versionMetaData.groupId ? versionMetaData.groupId : \"default\";\n                const artifactVersionLocation: string = `/artifacts/${ encodeURIComponent(groupId) }/${ encodeURIComponent(versionMetaData.id) }/versions/${versionMetaData.version}`;\n                Services.getLoggerService().info(\"[ArtifactVersionPage] Artifact version successfully uploaded.  Redirecting to details: \", artifactVersionLocation);\n                this.navigateTo(this.linkTo(artifactVersionLocation))();\n            }).catch( error => {\n                this.pleaseWait(false, \"\");\n                if (error && error.error_code === 409) {\n                    this.handleInvalidContentError(error);\n                } else {\n                    this.handleServerError(error, \"Error uploading artifact version.\");\n                }\n            });\n        }\n    };\n\n    private doDeleteArtifact = (): void => {\n        this.onDeleteModalClose();\n        this.pleaseWait(true, \"Deleting artifact, please wait...\");\n        Services.getGroupsService().deleteArtifact(this.groupId(), this.artifactId()).then( () => {\n            this.pleaseWait(false, \"\");\n            this.navigateTo(this.linkTo(\"/artifacts\"))();\n        });\n    };\n\n    private openEditMetaDataModal = (): void => {\n        this.setSingleState(\"isEditModalOpen\", true);\n    };\n\n    private onEditModalClose = (): void => {\n        this.setSingleState(\"isEditModalOpen\", false);\n    };\n\n    private doEditMetaData = (metaData: EditableMetaData): void => {\n        Services.getGroupsService().updateArtifactMetaData(this.groupId(), this.artifactId(), this.versionParam(), metaData).then( () => {\n            if (this.state.artifact) {\n                this.setSingleState(\"artifact\", {\n                    ...this.state.artifact,\n                    ...metaData\n                });\n            }\n        }).catch( error => {\n            this.handleServerError(error, \"Error editing artifact meta-data.\");\n        });\n        this.onEditModalClose();\n    };\n\n    private closeInvalidContentModal = (): void => {\n        this.setSingleState(\"isInvalidContentModalOpen\", false);\n    };\n\n    private pleaseWait = (isOpen: boolean, message: string): void => {\n        this.setMultiState({\n            isPleaseWaitModalOpen: isOpen,\n            pleaseWaitMessage: message\n        });\n    };\n\n    private handleInvalidContentError(error: any): void {\n        Services.getLoggerService().info(\"INVALID CONTENT ERROR\", error);\n        this.setMultiState({\n            invalidContentError: error,\n            isInvalidContentModalOpen: true\n        });\n    }\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from 'react';\nimport \"./editMetaDataModal.css\";\nimport {PureComponent, PureComponentProps, PureComponentState} from \"../../../../components\";\nimport {Button, Form, FormGroup, Modal, TextArea, TextInput} from \"@patternfly/react-core\";\nimport {EditableMetaData} from \"../../../../../services\";\n\n\n/**\n * Properties\n */\nexport interface EditMetaDataModalProps extends PureComponentProps {\n    name: string;\n    description: string;\n    labels: string[];\n    isOpen: boolean;\n    onClose: () => void;\n    onEditMetaData: (metaData: EditableMetaData) => void;\n}\n\n/**\n * State\n */\nexport interface EditMetaDataModalState extends PureComponentState {\n    labels: string;\n    metaData: EditableMetaData;\n}\n\n/**\n * Models the toolbar for the Artifacts page.\n */\nexport class EditMetaDataModal extends PureComponent<EditMetaDataModalProps, EditMetaDataModalState> {\n\n    constructor(props: Readonly<EditMetaDataModalProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <Modal\n                title=\"Edit Artifact Meta-Data\"\n                variant=\"large\"\n                isOpen={this.props.isOpen}\n                onClose={this.props.onClose}\n                className=\"edit-artifact-metaData pf-m-redhat-font\"\n                actions={[\n                    <Button key=\"edit\" variant=\"primary\" data-testid=\"modal-btn-edit\" onClick={this.doEdit}>Edit</Button>,\n                    <Button key=\"cancel\" variant=\"link\" data-testid=\"modal-btn-cancel\" onClick={this.props.onClose}>Cancel</Button>\n                ]}\n            >\n                <p>Use the form below to update the Name and Description of the artifact.</p>\n                <Form>\n                    <FormGroup\n                        label=\"Name\"\n                        fieldId=\"form-name\"\n                    >\n                        <TextInput\n                            isRequired={false}\n                            type=\"text\"\n                            id=\"form-name\"\n                            data-testid=\"form-name\"\n                            name=\"form-name\"\n                            aria-describedby=\"form-name-helper\"\n                            value={this.state.metaData.name}\n                            placeholder=\"Name of the artifact\"\n                            onChange={this.onNameChange}\n                        />\n                    </FormGroup>\n\n                    <FormGroup\n                        label=\"Labels\"\n                        fieldId=\"form-labels\"\n                        helperText=\"A comma-separated list of labels to apply to the artifact.\"\n                    >\n                        <TextInput\n                            isRequired={false}\n                            type=\"text\"\n                            id=\"form-labels\"\n                            data-testid=\"form-labels\"\n                            name=\"form-labels\"\n                            aria-describedby=\"form-labels-helper\"\n                            value={this.state.labels}\n                            placeholder=\"Artifact labels\"\n                            onChange={this.onLabelsChange}\n                        />\n                    </FormGroup>\n\n                    <FormGroup\n                        label=\"Description\"\n                        fieldId=\"form-description\"\n                    >\n                        <TextArea\n                            isRequired={false}\n                            id=\"form-description\"\n                            data-testid=\"form-description\"\n                            name=\"form-description\"\n                            aria-describedby=\"form-description-helper\"\n                            value={this.state.metaData.description}\n                            placeholder=\"Description of the artifact\"\n                            onChange={this.onDescriptionChange}\n                        />\n                    </FormGroup>\n                </Form>\n            </Modal>\n        );\n    }\n\n    public componentDidUpdate(prevProps: Readonly<EditMetaDataModalProps>): void {\n        if (this.props.isOpen && !prevProps.isOpen) {\n            this.setMultiState({\n                labels: this.props.labels.join(\", \"),\n                metaData: {\n                    description: this.props.description,\n                    labels: this.props.labels,\n                    name: this.props.name\n                }\n            });\n        }\n    }\n\n    protected initializeState(): EditMetaDataModalState {\n        return {\n            labels: \"\",\n            metaData: {\n                description: \"\",\n                labels: [],\n                name: \"\"\n            }\n        };\n    }\n\n    private labels(): string {\n        if (this.state.metaData.labels) {\n            return this.state.metaData.labels.join(\", \");\n        } else {\n            return \"\";\n        }\n    }\n\n    private doEdit = (): void => {\n        this.props.onEditMetaData(this.state.metaData);\n    };\n\n    private onNameChange = (value: string): void => {\n        this.setSingleState(\"metaData\", {\n            ...this.state.metaData,\n            name: value\n        });\n    };\n\n    private onLabelsChange = (value: string): void => {\n        let labels: string[] = [];\n        if (value && value.trim().length > 0) {\n            labels = value.trim().split(\",\").map(item => item.trim());\n        }\n        this.setMultiState({\n            labels: value,\n            metaData: {\n                ...this.state.metaData,\n                labels\n            }\n        });\n    };\n\n    private onDescriptionChange = (value: string): void => {\n        this.setSingleState(\"metaData\", {\n            ...this.state.metaData,\n            description: value\n        });\n    };\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./pageheader.css\";\nimport {\n    Button,\n    Flex,\n    FlexItem,\n    Text,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\nimport {IfAuth, PureComponent, PureComponentProps, PureComponentState} from \"../../../../components\";\nimport {VersionSelector} from \"./version-selector\";\nimport {TrashIcon} from \"@patternfly/react-icons\";\nimport {IfFeature} from \"../../../../components/common/ifFeature\";\nimport {SearchedVersion} from \"../../../../../models\";\n\n\n/**\n * Properties\n */\nexport interface ArtifactVersionPageHeaderProps extends PureComponentProps {\n    title: string;\n    groupId: string;\n    artifactId: string;\n    onDeleteArtifact: () => void;\n    onUploadVersion: () => void;\n    version: string;\n    versions: SearchedVersion[];\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface ArtifactVersionPageHeaderState extends PureComponentState {\n}\n\n\n/**\n * Models the page header for the Artifact page.\n */\nexport class ArtifactVersionPageHeader extends PureComponent<ArtifactVersionPageHeaderProps, ArtifactVersionPageHeaderState> {\n\n    constructor(props: Readonly<ArtifactVersionPageHeaderProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <Flex className=\"example-border\">\n                <FlexItem>\n                    <TextContent>\n                        <Text component={TextVariants.h1}>{ this.props.title }</Text>\n                    </TextContent>\n                </FlexItem>\n                <FlexItem align={{ default : 'alignRight' }}>\n                    <VersionSelector version={this.props.version} versions={this.props.versions}\n                                     groupId={this.props.groupId} artifactId={this.props.artifactId} />\n                    <IfAuth isDeveloper={true}>\n                        <IfFeature feature=\"readOnly\" isNot={true}>\n                            <Button id=\"delete-artifact-button\" variant=\"secondary\" data-testid=\"header-btn-delete\" onClick={this.props.onDeleteArtifact}>Delete</Button>\n                            <Button id=\"upload-version-button\" variant=\"primary\" data-testid=\"header-btn-upload-version\" onClick={this.props.onUploadVersion}>Upload new version</Button>\n                        </IfFeature>\n                    </IfAuth>\n                </FlexItem>\n            </Flex>\n        );\n    }\n\n    protected initializeState(): ArtifactVersionPageHeaderState {\n        return {};\n    }\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./version-selector.css\";\nimport {Button, ButtonVariant, Dropdown, DropdownToggle, InputGroup, TextInput} from '@patternfly/react-core';\nimport {PureComponent, PureComponentProps, PureComponentState} from \"../../../../components\";\nimport {SearchIcon} from \"@patternfly/react-icons\";\nimport Moment from \"react-moment\";\nimport {Link} from \"react-router-dom\";\nimport {SearchedVersion} from \"../../../../../models\";\nimport {Services} from \"../../../../../services\";\n\n\n/**\n * Properties\n */\nexport interface VersionSelectorProps extends PureComponentProps {\n    groupId: string;\n    artifactId: string;\n    version: string;\n    versions: SearchedVersion[];\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface VersionSelectorState extends PureComponentState {\n    isOpen: boolean;\n}\n\n\n/**\n * Models the page header for the Artifact page.\n */\nexport class VersionSelector extends PureComponent<VersionSelectorProps, VersionSelectorState> {\n\n    constructor(props: Readonly<VersionSelectorProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <Dropdown\n                className={this.dropdownClasses()}\n                toggle={<DropdownToggle data-testid=\"versions-toggle\" onToggle={this.onToggle}>Version: { this.props.version }</DropdownToggle>}\n                isOpen={this.state.isOpen}\n            >\n                <div className=\"version-filter\" style={{display: \"none\"}}>\n                    <InputGroup>\n                        <TextInput name=\"filter\" id=\"versionFilter\" type=\"search\" data-testid=\"versions-form-filter\" aria-label=\"Version filter\" />\n                        <Button variant={ButtonVariant.control} data-testid=\"versions-form-btn-search\" aria-label=\"search button for search input\">\n                            <SearchIcon />\n                        </Button>\n                    </InputGroup>\n                </div>\n                <div className=\"version-header\">\n                    <div className=\"version-item\">\n                        <span className=\"name\">Version</span>\n                        <span className=\"date\">Created On</span>\n                    </div>\n                </div>\n                <div className=\"version-list\">\n                    <Link key=\"latest\"\n                          data-testid=\"versions-lnk-latest\"\n                          to={this.linkTo(`/artifacts/${encodeURIComponent(this.props.groupId)}/${encodeURIComponent(this.props.artifactId)}/versions/latest`)}\n                          className=\"version-item latest\">\n                        <span className=\"name\">latest</span>\n                        <span className=\"date\" />\n                    </Link>\n                    {\n                        this.props.versions.map((v, idx) =>\n                            <Link key={v.version}\n                                  data-testid={`versions-lnk-${idx}`}\n                                  to={this.linkTo(`/artifacts/${encodeURIComponent(this.props.groupId)}/${encodeURIComponent(this.props.artifactId)}/versions/${v.version}`)}\n                                  className=\"version-item\">\n                                <span className=\"name\">{ v.version }</span>\n                                <span className=\"date\"><Moment date={v.createdOn} fromNow={true} /></span>\n                            </Link>\n                        )\n                    }\n                </div>\n            </Dropdown>\n        );\n    }\n\n    protected initializeState(): VersionSelectorState {\n        return {\n            isOpen: false\n        };\n    }\n\n    private dropdownClasses(): string {\n        const classes: string[] = [ \"version-selector-dropdown\" ];\n        if (Services.getConfigService().featureReadOnly()) {\n            classes.push(\"dropdown-align-right\");\n        }\n        return classes.join(' ');\n    }\n\n    private onToggle = (isOpen: boolean): void => {\n        this.setSingleState(\"isOpen\", isOpen);\n    };\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./content.css\";\nimport {PureComponent, PureComponentProps, PureComponentState} from \"../../../../components\";\nimport AceEditor from \"react-ace\";\nimport \"ace-builds/src-noconflict/mode-json\";\nimport \"ace-builds/src-noconflict/mode-protobuf\";\nimport \"ace-builds/src-noconflict/mode-xml\";\nimport \"ace-builds/src-noconflict/mode-graphqlschema\";\nimport \"ace-builds/src-noconflict/theme-monokai\";\nimport {Button} from \"@patternfly/react-core\";\nimport {Services} from \"../../../../../services\";\n\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface ContentTabContentProps extends PureComponentProps {\n    artifactContent: string;\n    artifactType: string;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface ContentTabContentState extends PureComponentState {\n    content: string;\n    contentIsJson: boolean;\n    formatBtnClasses: string;\n    editorWidth: string;\n    editorHeight: string;\n}\n\n\n/**\n * Models the content of the Artifact Info tab.\n */\nexport class ContentTabContent extends PureComponent<ContentTabContentProps, ContentTabContentState> {\n\n    constructor(props: Readonly<ContentTabContentProps>) {\n        super(props);\n    }\n\n    public componentDidMount(): void {\n        // TODO do this again whenever the browser is resized!\n        const elem: HTMLElement|null = document.getElementById(\"ace-wrapper\");\n        if (elem) {\n            const height: number|null = elem.clientHeight;\n            if (height) {\n                this.setSingleState(\"editorHeight\", height + \"px\");\n            }\n        }\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <div className=\"ace-wrapper\" id=\"ace-wrapper\">\n                <AceEditor\n                    data-testid=\"ace-content\"\n                    mode={this.editorMode()}\n                    theme=\"monokai\"\n                    name=\"artifactContent\"\n                    className=\"artifactContent\"\n                    width={this.state.editorWidth}\n                    height={this.state.editorHeight}\n                    fontSize={14}\n                    showPrintMargin={false}\n                    showGutter={true}\n                    highlightActiveLine={false}\n                    value={this.state.content}\n                    readOnly={true}\n                    setOptions={{\n                        enableBasicAutocompletion: false,\n                        enableLiveAutocompletion: false,\n                        enableSnippets: false,\n                        showLineNumbers: true,\n                        tabSize: 2,\n                        useWorker: false\n                    }}\n                />\n                <Button className={this.state.formatBtnClasses} key=\"format\" variant=\"primary\" data-testid=\"modal-btn-edit\" onClick={this.format}>Format</Button>\n            </div>\n        );\n    }\n\n    protected initializeState(): ContentTabContentState {\n        const contentIsJson: boolean = this.isJson(this.props.artifactContent);\n        let formatBtnClasses: string = \"format-btn\";\n        if (!contentIsJson) {\n            formatBtnClasses += \" hidden\";\n        }\n        return {\n            content: this.props.artifactContent,\n            contentIsJson,\n            editorHeight: \"500px\",\n            editorWidth: \"100%\",\n            formatBtnClasses\n        };\n    }\n\n    private editorMode(): string {\n        if (this.props.artifactType === \"PROTOBUF\") {\n            return \"protobuf\";\n        }\n        if (this.props.artifactType === \"WSDL\" || this.props.artifactType === \"XSD\" || this.props.artifactType === \"XML\") {\n            return \"xml\";\n        }\n        if (this.props.artifactType === \"GRAPHQL\") {\n            return \"graphqlschema\";\n        }\n        return \"json\";\n    }\n\n    private format = (): void => {\n        if (!this.state.contentIsJson) {\n            return;\n        }\n        try {\n            const pval: any = JSON.parse(this.props.artifactContent);\n            if (pval) {\n                this.setSingleState(\"content\", JSON.stringify(pval, null, 2));\n            }\n        } catch (e) {\n            // Do nothing\n            Services.getLoggerService().warn(\"Failed to format content!\");\n            Services.getLoggerService().error(e);\n        }\n    }\n\n    private isJson(content: string): boolean {\n        try {\n            const pval: any = JSON.parse(content);\n            if (pval) {\n                return true;\n            }\n        } catch (e) {\n            // Do nothing\n        }\n        return false;\n    }\n}\n\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./documentation.css\";\nimport {PureComponent, PureComponentProps, PureComponentState} from \"../../../../components\";\nimport {RedocStandalone} from \"redoc\";\nimport { ErrorTabContent } from \"./errorTab\";\nimport { Services } from \"src/services\";\n\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface DocumentationTabContentProps extends PureComponentProps {\n    artifactContent: string;\n    artifactType: string;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface DocumentationTabContentState extends PureComponentState {\n    parsedContent: any | undefined;\n    error: any | undefined\n}\n\n\n/**\n * Models the content of the Artifact Info tab.\n */\nexport class DocumentationTabContent extends PureComponent<DocumentationTabContentProps, DocumentationTabContentState> {\n\n    constructor(props: Readonly<DocumentationTabContentProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        if (this.isError()){\n            return <ErrorTabContent error={{errorMessage: \"Artifact isn't a valid OpenAPI structure\", error: this.state.error}}/>\n        }\n\n        let visualizer: React.ReactElement | null = null;\n        if (this.props.artifactType === \"OPENAPI\") {\n            visualizer = <RedocStandalone spec={this.state.parsedContent} />;\n        }\n\n        if (visualizer !== null) {\n            return visualizer;\n        } else {\n            return <h1>Unsupported Type: { this.props.artifactType }</h1>\n        }\n    }\n\n    protected initializeState(): DocumentationTabContentState {\n        try {\n            return {\n                parsedContent: JSON.parse(this.props.artifactContent),\n                error: undefined\n            };\n        } catch(ex) {\n            Services.getLoggerService().warn(\"Failed to parse content:\");\n            Services.getLoggerService().error(ex);\n            return {\n                parsedContent: undefined,\n                error: ex\n            };\n        }\n        \n    }\n\n    private isError() : boolean {\n        if(this.state.error){\n            return true;\n        }else{\n            return false;\n        }\n    }\n}\n","import React, { ReactNode } from \"react\";\nimport {PureComponent, PureComponentProps, PureComponentState} from \"../../../../components\";\nimport AceEditor from \"react-ace\";\nimport \"ace-builds/src-noconflict/mode-text\";\nimport \"ace-builds/src-noconflict/theme-tomorrow\";\nimport { Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateSecondaryActions, EmptyStateVariant, Title } from \"@patternfly/react-core\";\nimport { ExclamationTriangleIcon } from \"@patternfly/react-icons\";\n\nexport interface TabError {\n    errorMessage: string,\n    error: any\n}\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface ErrorTabContentProps extends PureComponentProps {\n    error?: TabError | undefined\n    children?: ReactNode\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface ErrorTabContentState extends PureComponentState {\n    isShowDetails: boolean;\n    editorWidth: string;\n    editorHeight: string;   \n}\n\n\nexport class ErrorTabContent extends PureComponent<ErrorTabContentProps, ErrorTabContentState> {\n\n    constructor(props: Readonly<ErrorTabContentProps>) {\n        super(props);\n    }\n\n    public render() {\n        return (\n            <div className=\"centerizer\">\n                    <EmptyState variant={EmptyStateVariant.large}>\n                            <EmptyStateIcon icon={ExclamationTriangleIcon} />\n                            <Title headingLevel=\"h5\" size=\"lg\">{ this.errorMessage() }</Title>\n                            <EmptyStateBody>\n                                { this.errorDescription() }\n                            </EmptyStateBody>\n                            <EmptyStateSecondaryActions>\n                                <Button variant=\"link\"\n                                        data-testid=\"error-btn-details\"\n                                        onClick={this.showDetails}>Show details</Button>\n                            </EmptyStateSecondaryActions>\n                        </EmptyState>\n                        <div className=\"separator\">&nbsp;</div>\n                        {\n                            this.state.isShowDetails ?\n                                <div className=\"ace-wrapper pf-c-empty-state pf-m-lg\" id=\"ace-wrapper\">\n                                    <AceEditor\n                                        data-testid=\"ace-details\"\n                                        mode=\"json\"\n                                        theme=\"tomorrow\"\n                                        name=\"errorDetail\"\n                                        className=\"errorDetail\"\n                                        width={this.state.editorWidth}\n                                        height={this.state.editorHeight}\n                                        fontSize={14}\n                                        showPrintMargin={false}\n                                        showGutter={false}\n                                        highlightActiveLine={false}\n                                        value={this.errorDetail()}\n                                        readOnly={true}\n                                        setOptions={{\n                                            enableBasicAutocompletion: false,\n                                            enableLiveAutocompletion: false,\n                                            enableSnippets: false,\n                                            showLineNumbers: true,\n                                            tabSize: 2,\n                                            useWorker: false\n                                        }}\n                                    />\n                                </div>\n                                :\n                                <div/>\n                        }\n            </div>\n        )\n    }\n    \n    protected initializeState(): ErrorTabContentState {\n        return {\n            editorHeight: \"250px\",\n            editorWidth: \"100%\",\n            isShowDetails: false\n        };\n    }\n\n    private errorMessage(): string {\n        if (this.props.error) {\n            return this.props.error.errorMessage;\n        } else {\n            return \"Internal server error\";\n        }\n    }\n\n    // Error description can be in node children - if it is missing, default description is used\n    private errorDescription(): ReactNode {\n        if (this.props.children) {\n            return this.props.children;\n        } else {\n            return (\n                \"The content you are trying to visualize is not valid (we could not parse it).  If possible, we'll try to provide you with some more information about \" +\n                \"the problem (see below).\"\n            );\n        }\n    }\n\n    private errorDetail(): string {\n        if (this.props.error && this.props.error.error && this.props.error.error.detail) {\n            return this.props.error.error.detail;\n        }else if (this.props.error && this.props.error.error && this.props.error.error.message) {\n            return this.props.error.error.message;\n        } else if (this.props.error && this.props.error.error) {\n            return JSON.stringify(this.props.error.error, null, 3);\n        } else {\n            return \"Error info not available\";\n        }\n    }\n\n    private showDetails = (): void => {\n        this.setSingleState(\"isShowDetails\", true);\n    };\n\n}\n\n\n\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./info.css\";\nimport {\n    ArtifactTypeIcon, IfAuth,\n    PureComponent,\n    PureComponentProps,\n    PureComponentState,\n    RuleList\n} from \"../../../../components\";\nimport {Badge, Button, Flex, FlexItem, Split, SplitItem} from \"@patternfly/react-core\";\nimport {DownloadIcon, EditIcon} from \"@patternfly/react-icons\";\nimport Moment from \"react-moment\";\nimport {IfFeature} from \"../../../../components/common/ifFeature\";\nimport {If} from \"../../../../components/common/if\";\nimport {ArtifactMetaData, Rule} from \"../../../../../models\";\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface InfoTabContentProps extends PureComponentProps {\n    artifact: ArtifactMetaData;\n    rules: Rule[];\n    onEnableRule: (ruleType: string) => void;\n    onDisableRule: (ruleType: string) => void;\n    onConfigureRule: (ruleType: string, config: string) => void;\n    onDownloadArtifact: () => void;\n    onEditMetaData: () => void;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface InfoTabContentState extends PureComponentState {\n}\n\n\n/**\n * Models the content of the Artifact Info tab.\n */\nexport class InfoTabContent extends PureComponent<InfoTabContentProps, InfoTabContentState> {\n\n    constructor(props: Readonly<InfoTabContentProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <Flex className=\"artifact-tab-content\">\n                <FlexItem className=\"artifact-basics\">\n                    <div className=\"title-and-type\">\n                        <Split>\n                            <SplitItem className=\"type\"><ArtifactTypeIcon type={this.props.artifact.type} /></SplitItem>\n                            <SplitItem className=\"title\" isFilled={true}>Version Metadata</SplitItem>\n                            <SplitItem className=\"actions\">\n                                <IfAuth isDeveloper={true}>\n                                    <IfFeature feature=\"readOnly\" isNot={true}>\n                                        <Button id=\"edit-action\"\n                                                data-testid=\"artifact-btn-edit\"\n                                                title=\"Edit artifact meta-data\"\n                                                onClick={this.props.onEditMetaData}\n                                                variant=\"plain\"><EditIcon /></Button>\n                                    </IfFeature>\n                                </IfAuth>\n                            </SplitItem>\n                        </Split>\n                    </div>\n                    <div className=\"metaData\">\n                        <div className=\"metaDataItem\">\n                            <span className=\"label\">Name</span>\n                            <span className=\"value\">{this.props.artifact.name}</span>\n                        </div>\n                        <If condition={this.isArtifactInGroup}>\n                            <div className=\"metaDataItem\">\n                                <span className=\"label\">Group</span>\n                                <span className=\"value\">{this.props.artifact.groupId}</span>\n                            </div>\n                        </If>\n                        <div className=\"metaDataItem\">\n                            <span className=\"label\">ID</span>\n                            <span className=\"value\">{this.props.artifact.id}</span>\n                        </div>\n                        <div className=\"metaDataItem\">\n                            <span className=\"label\">Status</span>\n                            <span className=\"value\">{this.props.artifact.state}</span>\n                        </div>\n                        <div className=\"metaDataItem\">\n                            <span className=\"label\">Created</span>\n                            <span className=\"value\"><Moment date={this.props.artifact.createdOn} fromNow={true} /></span>\n                        </div>\n                        <div className=\"metaDataItem\">\n                            <span className=\"label\">Modified</span>\n                            <span className=\"value\"><Moment date={this.props.artifact.modifiedOn} fromNow={true} /></span>\n                        </div>\n                        <div className=\"metaDataItem\">\n                            <span className=\"label\">Global ID</span>\n                            <span className=\"value\">{this.props.artifact.globalId}</span>\n                        </div>\n                        <div className=\"metaDataItem\">\n                            <span className=\"label\">Content ID</span>\n                            <span className=\"value\">{this.props.artifact.contentId}</span>\n                        </div>\n                    </div>\n                    <div className=\"description\">{this.description()}</div>\n                    <div className=\"labels\">\n                        {\n                            this.labels().map( label =>\n                                <Badge key={label} isRead={true}>{label}</Badge>\n                            )\n                        }\n                    </div>\n                    <div className=\"actions\">\n                        <Button id=\"download-action\"\n                                data-testid=\"artifact-btn-download\"\n                                title=\"Download artifact content\"\n                                onClick={this.props.onDownloadArtifact}\n                                variant=\"secondary\"><DownloadIcon /> Download</Button>\n                    </div>\n                </FlexItem>\n                <FlexItem className=\"artifact-rules\">\n                    <div className=\"rules-label\">Content Rules</div>\n                    <RuleList rules={this.props.rules}\n                              onEnableRule={this.props.onEnableRule}\n                              onDisableRule={this.props.onDisableRule}\n                              onConfigureRule={this.props.onConfigureRule}\n                    />\n                </FlexItem>\n            </Flex>\n        );\n    }\n\n    protected initializeState(): InfoTabContentState {\n        return {};\n    }\n\n    private nameOrId(): string {\n        return this.props.artifact.name ? this.props.artifact.name : this.props.artifact.id;\n    }\n\n    private labels(): string[] {\n        return this.props.artifact.labels ? this.props.artifact.labels : [];\n    }\n\n    private description(): string {\n        return this.props.artifact.description ?\n            this.props.artifact.description :\n            `An artifact of type ${this.props.artifact.type} with no description.`;\n    }\n\n    private isArtifactInGroup = (): boolean => {\n        const groupId: string|null = this.props.artifact.groupId;\n        return groupId != null && groupId != \"default\";\n    };\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from 'react';\nimport \"./uploadForm.css\";\nimport {PureComponent, PureComponentProps, PureComponentState} from \"../../../../components\";\nimport {FileUpload, Form, FormGroup} from \"@patternfly/react-core\";\n\n\n/**\n * Properties\n */\nexport interface UploadVersionFormProps extends PureComponentProps {\n    onValid: (valid: boolean) => void;\n    onChange: (data: string) => void;\n}\n\n/**\n * State\n */\nexport interface UploadVersionFormState extends PureComponentState {\n    content: string;\n    contentFilename: string;\n    contentIsLoading: boolean;\n    valid: boolean;\n}\n\n/**\n * Models the toolbar for the Artifacts page.\n */\nexport class UploadVersionForm extends PureComponent<UploadVersionFormProps, UploadVersionFormState> {\n\n    constructor(props: Readonly<UploadVersionFormProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <Form>\n                <FormGroup\n                    label=\"Artifact\"\n                    isRequired={true}\n                    fieldId=\"form-artifact\"\n                >\n                    <FileUpload\n                        id=\"artifact-content\"\n                        data-testid=\"form-upload\"\n                        type=\"text\"\n                        filename={this.state.contentFilename}\n                        value={this.state.content}\n                        isRequired={true}\n                        allowEditingUploadedText={true}\n                        onChange={this.onContentChange}\n                        onReadStarted={this.onFileReadStarted}\n                        onReadFinished={this.onFileReadFinished}\n                        isLoading={this.state.contentIsLoading}\n                    />\n                </FormGroup>\n            </Form>\n        );\n    }\n\n    protected initializeState(): UploadVersionFormState {\n        return {\n            content: \"\",\n            contentFilename: \"\",\n            contentIsLoading: false,\n            valid: false\n        };\n    }\n\n    private onContentChange = (value: any, filename: string, event: any): void => {\n        this.setSingleState(\"content\", value, () => {\n            this.fireOnChange();\n            this.checkValid();\n        });\n    };\n\n    private onFileReadStarted = (): void => {\n        this.setSingleState(\"contentIsLoading\", true);\n    };\n\n    private onFileReadFinished = (): void => {\n        this.setSingleState(\"contentIsLoading\", false);\n    };\n\n    private checkValid(): void {\n        const data: string = this.currentData();\n        const oldValid: boolean = this.state.valid;\n        const newValid: boolean = this.isValid(data);\n        const validityChanged: boolean = oldValid !== newValid;\n        this.setState({\n            valid: newValid\n        }, () => {\n            if (validityChanged) {\n                this.fireOnValid();\n            }\n        });\n    }\n\n    private isValid(data: string): boolean {\n        return !!data;\n    }\n\n    private currentData(): string {\n        return this.state.content;\n    }\n\n    private fireOnChange(): void {\n        if (this.props.onChange) {\n            this.props.onChange(this.currentData());\n        }\n    }\n\n    private fireOnValid(): void {\n        if (this.props.onValid) {\n            this.props.onValid(this.state.valid);\n        }\n    }\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport {ErrorPage, PageError, PureComponent, PureComponentProps, PureComponentState} from \"../components\";\nimport {Services} from \"../../services\";\nimport {Flex, FlexItem, PageSection, PageSectionVariants, Spinner} from \"@patternfly/react-core\";\nimport {AccessErrorPage} from \"../components/errorPage/accessErrorPage\";\n\n// TODO this should be configurable via standard UI config settings\nconst MAX_RETRIES: number = 5;\n\nexport enum PageErrorType {\n    React, Server\n}\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface PageProps extends PureComponentProps {\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface PageState extends PureComponentState {\n    pageLoadRetries?: number;\n    isLoading?: boolean;\n    isError?: boolean;\n    error?: PageError;\n}\n\n\n/**\n * The artifacts page.\n */\nexport abstract class PageComponent<P extends PageProps, S extends PageState> extends PureComponent<P, S> {\n\n    protected constructor(props: Readonly<P>) {\n        super(props);\n        setTimeout(() => {\n            this.loadPageData();\n        }, 10);\n    }\n\n    protected initializeState(): S {\n        return {\n            ...this.initializePageState(),\n            isLoading: true\n        };\n    }\n\n    protected abstract initializePageState(): S;\n\n    public componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {\n        this.handleError(PageErrorType.React, error, errorInfo);\n    }\n\n    public render(): React.ReactElement {\n        if (this.isError()) {\n            if (this.is403Error()) {\n                return (\n                    <AccessErrorPage error={this.state.error} />\n                );\n            } else {\n                return (\n                    <ErrorPage error={this.state.error}/>\n                );\n            }\n        } else if (this.isLoading()) {\n            return (\n                <React.Fragment>\n                    <PageSection variant={PageSectionVariants.default} isFilled={true}>\n                        <Flex>\n                            <FlexItem><Spinner size=\"lg\"/></FlexItem>\n                            <FlexItem><span>Loading...</span></FlexItem>\n                        </Flex>\n                    </PageSection>\n                </React.Fragment>\n            );\n        } else {\n            return this.renderPage();\n        }\n    }\n\n    /**\n     * Renders the page content.  Subclasses should implement this instead of render() so that\n     * errors are handled/displayed properly.\n     */\n    protected abstract renderPage(): React.ReactElement;\n\n    protected postConstruct(): void {\n        // @ts-ignore\n        PureComponent.setHistory(this.props.history);\n        super.postConstruct();\n    }\n\n    // @ts-ignore\n    protected createLoaders(): Promise | Promise[] | null {\n        return null;\n    }\n\n    protected handleServerError(error: any, errorMessage: string): void {\n        this.handleError(PageErrorType.Server, error, errorMessage);\n    }\n\n    protected getPathParam(paramName: string): string {\n        // @ts-ignore\n        return decodeURIComponent(this.props.match.params[paramName]);\n    }\n\n    protected isLoading(): boolean {\n        return this.state.isLoading ? true : false;\n    }\n\n    private loadPageData(): void {\n        // @ts-ignore\n        let loaders: Promise | Promise[] | null = this.createLoaders();\n\n        // If not loading anything, convert from null to empty array\n        if (loaders == null) {\n            loaders = [];\n        }\n\n        // Convert to array if not already\n        if (!Array.isArray(loaders)) {\n            loaders = [ loaders ];\n        }\n\n        // Always add the \"update current user\" loader\n        loaders = [\n            Services.getUsersService().updateCurrentUser(),\n            ...loaders\n        ];\n\n        if (loaders.length === 0) {\n            this.setSingleState(\"isLoading\", false);\n        } else {\n            this.setSingleState(\"isLoading\", true);\n            Promise.all(loaders).then(() => {\n                this.setSingleState(\"isLoading\", false);\n            }).catch(error => {\n                Services.getLoggerService().debug(\"[PageComponent] Page data load failed, retrying.\");\n                const retries: number = this.getRetries();\n                if (retries < MAX_RETRIES) {\n                    this.incrementRetries();\n                    setTimeout(() => {\n                        this.loadPageData();\n                    }, Math.pow(2, retries) * 100);\n                } else {\n                    this.handleServerError(error, \"Error loading page data.\");\n                }\n            });\n        }\n    }\n\n    private getRetries(): number {\n        return this.state.pageLoadRetries !== undefined ? this.state.pageLoadRetries as number : 0;\n    }\n\n    private incrementRetries(): void {\n        const retries: number = this.getRetries() + 1;\n        this.setSingleState(\"pageLoadRetries\", retries);\n    }\n\n    private isError(): boolean {\n        return this.state.isError ? true : false;\n    }\n\n    private is403Error(): boolean {\n        return this.state.error && this.state.error.error.status && (this.state.error.error.status == 403);\n    }\n\n    private handleError(errorType: PageErrorType, error: any, errorMessage: any): void {\n        Services.getLoggerService().error(\"[PageComponent] Handling an error of type: \", errorType);\n        Services.getLoggerService().error(\"[PageComponent] \", errorMessage);\n        Services.getLoggerService().error(\"[PageComponent] \", error);\n        this.setMultiState({\n            error: {\n                error,\n                errorMessage,\n                type: errorType\n            },\n            isError: true\n        });\n    }\n}\n","/**\n * @license\n * Copyright 2021 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from 'react';\nimport \"./errorPage.css\";\nimport {\n    Button,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateSecondaryActions,\n    EmptyStateVariant,\n    PageSection,\n    PageSectionVariants,\n    Title\n} from '@patternfly/react-core';\nimport {LockedIcon} from \"@patternfly/react-icons\";\nimport \"ace-builds/src-noconflict/mode-text\";\nimport \"ace-builds/src-noconflict/theme-tomorrow\";\nimport {ErrorPage, ErrorPageProps} from \"./errorPage\";\n\n\nexport class AccessErrorPage extends ErrorPage {\n\n    constructor(props: Readonly<ErrorPageProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <React.Fragment>\n                <PageSection className=\"ps_error\" variant={PageSectionVariants.light}>\n                    <div className=\"centerizer\">\n                        <EmptyState variant={EmptyStateVariant.large}>\n                            <EmptyStateIcon icon={LockedIcon} />\n                            <Title headingLevel=\"h5\" size=\"lg\">Access Denied</Title>\n                            <EmptyStateBody>\n                                You are not authorized to access this registry instance.  Please request access\n                                from your administrator and then try again.\n                            </EmptyStateBody>\n                            <EmptyStateSecondaryActions>\n                                <Button variant=\"link\"\n                                        data-testid=\"error-btn-artifacts\"\n                                        onClick={this.navigateBack}>Go Back</Button>\n                            </EmptyStateSecondaryActions>\n                        </EmptyState>\n                    </div>\n                </PageSection>\n            </React.Fragment>\n        );\n    }\n\n    protected navigateBack = (): void => {\n        window.history.back();\n    };\n\n}\n"],"names":["props","render","this","accept","children","initializeState","condition","handleTabClick","event","tabIndex","setSingleState","onUploadVersion","onDeleteArtifact","doEnableRule","ruleType","Services","debug","config","createArtifactRule","groupId","artifactId","catch","error","handleServerError","rules","type","doDisableRule","deleteArtifactRule","filter","r","doConfigureRule","updateArtifactRule","map","doDownloadArtifact","content","state","artifactContent","contentType","ContentTypes","fext","artifact","ArtifactTypes","fname","artifactNameOrId","downloadToFS","onUploadFormValid","isValid","onUploadFormChange","data","onUploadModalClose","onDeleteModalClose","doUploadArtifactVersion","pleaseWait","uploadFormData","artifactType","createArtifactVersion","then","versionMetaData","artifactVersionLocation","encodeURIComponent","id","version","info","navigateTo","linkTo","error_code","handleInvalidContentError","doDeleteArtifact","deleteArtifact","openEditMetaDataModal","onEditModalClose","doEditMetaData","metaData","updateArtifactMetaData","versionParam","closeInvalidContentModal","isOpen","message","setMultiState","isPleaseWaitModalOpen","pleaseWaitMessage","renderPage","ArtifactMetaData","tabs","Tab","eventKey","title","key","tabContentId","onEnableRule","onDisableRule","onConfigureRule","onDownloadArtifact","onEditMetaData","showDocumentationTab","splice","groupIdParam","hasGroup","breadcrumbs","Breadcrumb","BreadcrumbItem","Link","to","isActive","feature","is","PageSection","className","variant","PageSectionVariants","nameOrId","versions","isFilled","padding","default","Tabs","unmountOnExit","activeKey","activeTabKey","onSelect","Modal","isUploadModalOpen","onClose","actions","Button","onClick","isDisabled","isUploadFormValid","onChange","onValid","isDeleteModalOpen","name","artifactName","description","artifactDescription","labels","artifactLabels","isEditModalOpen","invalidContentError","isInvalidContentModalOpen","initializePageState","artifactIsText","getPathParam","artifactIdParam","createLoaders","getArtifactMetaData","md","getArtifactContent","e","warn","eo","JSON","parse","is404","getArtifactRules","getArtifactVersions","reverse","doEdit","onNameChange","value","onLabelsChange","trim","length","split","item","onDescriptionChange","Form","FormGroup","label","fieldId","TextInput","isRequired","placeholder","helperText","TextArea","componentDidUpdate","prevProps","join","Flex","FlexItem","TextContent","Text","component","TextVariants","align","isDeveloper","isNot","onToggle","Dropdown","dropdownClasses","toggle","DropdownToggle","style","display","InputGroup","ButtonVariant","SearchIcon","v","idx","date","createdOn","fromNow","classes","featureReadOnly","push","format","contentIsJson","pval","stringify","componentDidMount","elem","document","getElementById","height","clientHeight","mode","editorMode","theme","width","editorWidth","editorHeight","fontSize","showPrintMargin","showGutter","highlightActiveLine","readOnly","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","useWorker","formatBtnClasses","isJson","isError","errorMessage","visualizer","RedocStandalone","spec","parsedContent","undefined","ex","showDetails","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","ExclamationTriangleIcon","Title","headingLevel","size","EmptyStateBody","errorDescription","EmptyStateSecondaryActions","isShowDetails","errorDetail","detail","isArtifactInGroup","Split","SplitItem","EditIcon","If","modifiedOn","globalId","contentId","Badge","isRead","DownloadIcon","onContentChange","filename","fireOnChange","checkValid","onFileReadStarted","onFileReadFinished","FileUpload","contentFilename","allowEditingUploadedText","onReadStarted","onReadFinished","isLoading","contentIsLoading","valid","currentData","oldValid","newValid","validityChanged","setState","fireOnValid","PageErrorType","navigateBack","window","history","back","LockedIcon","setTimeout","loadPageData","componentDidCatch","errorInfo","handleError","React","is403Error","AccessErrorPage","Spinner","postConstruct","Server","paramName","decodeURIComponent","match","params","loaders","Array","isArray","updateCurrentUser","Promise","all","retries","getRetries","incrementRetries","Math","pow","pageLoadRetries","status","errorType"],"sourceRoot":""}