{"version":3,"file":"4018.9b9d57dd.js","mappings":"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","sources":["webpack://@apicurio/registry-ui/./src/app/components/common/if.tsx","webpack://@apicurio/registry-ui/./src/app/components/modals/progressModal.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifacts/artifacts.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifacts/components/artifactList/artifactGroup.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifacts/components/artifactList/artifactList.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifacts/components/artifactList/artifactName.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifacts/components/empty/empty.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifacts/components/toolbar/toolbar.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifacts/components/uploadForm/uploadForm.tsx"],"sourcesContent":["/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport {PureComponent, PureComponentProps, PureComponentState} from \"../baseComponent\";\n\n/**\n * Properties\n */\nexport interface IfProps extends PureComponentProps {\n    condition: boolean | (() => boolean);\n    children?: React.ReactNode;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface IfState extends PureComponentState {\n}\n\n\n/**\n * Wrapper around a set of arbitrary child elements and displays them only if the\n * indicated condition is true.\n */\nexport class If extends PureComponent<IfProps, IfState> {\n\n    constructor(props: Readonly<IfProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        if (this.accept()) {\n            return <React.Fragment children={this.props.children} />\n        } else {\n            return <React.Fragment />\n        }\n    }\n\n    protected initializeState(): IfState {\n        return {};\n    }\n\n    private accept(): boolean {\n        if (typeof this.props.condition === \"boolean\") {\n            return this.props.condition;\n        } else {\n            return this.props.condition();\n        }\n    }\n\n}\n","/**\n * @license\n * Copyright 2022 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from 'react';\nimport \"./progressModal.css\";\nimport {Modal, Progress} from \"@patternfly/react-core\";\nimport {PureComponent, PureComponentProps, PureComponentState} from \"../baseComponent\";\n\n\n/**\n * Properties\n */\nexport interface ProgressModalProps extends PureComponentProps {\n    title: string;\n    isCloseable: boolean;\n    message: string;\n    isOpen: boolean;\n    progress: number | undefined;\n    onClose: () => void;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface ProgressModalState extends PureComponentState {\n}\n\n/**\n * Models the \"progress\" modal.  This is shown when the user performs an asynchronous operation\n * with trackable progress (by percentage).\n */\nexport class ProgressModal extends PureComponent<ProgressModalProps, ProgressModalState> {\n\n    constructor(props: Readonly<ProgressModalProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <Modal\n                title={this.props.title}\n                variant=\"small\"\n                isOpen={this.props.isOpen}\n                showClose={this.props.isCloseable}\n                onClose={this.props.onClose}\n                className=\"progress pf-m-redhat-font\"\n                aria-label=\"progress-modal\"\n            >\n                <Progress title={this.props.message} value={this.props.progress} />\n            </Modal>\n        );\n    }\n\n    protected initializeState(): ProgressModalState {\n        return {};\n    }\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./artifacts.css\";\nimport {\n    Button, FileUpload,\n    Flex,\n    FlexItem,\n    Form,\n    FormGroup,\n    Modal,\n    PageSection,\n    PageSectionVariants,\n    Spinner\n} from '@patternfly/react-core';\nimport {ArtifactList} from \"./components/artifactList\";\nimport {PageComponent, PageProps, PageState} from \"../basePage\";\nimport {ArtifactsPageToolbar, ArtifactsPageToolbarFilterCriteria} from \"./components/toolbar\";\nimport {ArtifactsPageEmptyState} from \"./components/empty\";\nimport {UploadArtifactForm} from \"./components/uploadForm\";\nimport {InvalidContentModal} from \"../../components/modals\";\nimport {If} from \"../../components/common/if\";\nimport {ArtifactsSearchResults, CreateArtifactData, GetArtifactsCriteria, Paging, Services} from \"../../../services\";\nimport {SearchedArtifact} from \"../../../models\";\nimport {PleaseWaitModal} from \"../../components/modals/pleaseWaitModal\";\nimport {RootPageHeader} from \"../../components\";\nimport {ProgressModal} from \"../../components/modals/progressModal\";\nimport { ApiError } from \"src/models/apiError.model\";\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface ArtifactsPageProps extends PageProps {\n\n}\n\n/**\n * State\n */\nexport interface ArtifactsPageState extends PageState {\n    criteria: ArtifactsPageToolbarFilterCriteria;\n    isUploadModalOpen: boolean;\n    isImportModalOpen: boolean;\n    isUploadFormValid: boolean;\n    isImportFormValid: boolean;\n    isInvalidContentModalOpen: boolean;\n    isPleaseWaitModalOpen: boolean;\n    isSearching: boolean;\n    paging: Paging;\n    results: ArtifactsSearchResults | null;\n    uploadFormData: CreateArtifactData | null;\n    invalidContentError: ApiError | null;\n    initFromSearch: string;\n    importFilename: string;\n    importFile: string | File;\n    isImporting: boolean;\n    importProgress: number;\n}\n\n/**\n * The artifacts page.\n */\nexport class ArtifactsPage extends PageComponent<ArtifactsPageProps, ArtifactsPageState> {\n\n    constructor(props: Readonly<ArtifactsPageProps>) {\n        super(props);\n    }\n\n    componentDidUpdate(prevProps: Readonly<ArtifactsPageProps>, prevState: Readonly<ArtifactsPageState>, snapshot?: {}) {\n        // @ts-ignore\n        if (this.props.history.location.search !== this.state.initFromSearch) {\n            this.setMultiState(this.initializePageState(), () => this.search());\n        }\n    }\n\n    public renderPage(): React.ReactElement {\n        return (\n            <React.Fragment>\n                <PageSection className=\"ps_artifacts-header\" variant={PageSectionVariants.light} padding={{ default: \"noPadding\" }}>\n                    <RootPageHeader tabKey={0} />\n                </PageSection>\n                <If condition={this.showToolbar}>\n                    <PageSection variant={PageSectionVariants.light} padding={{default : \"noPadding\"}}>\n                        <ArtifactsPageToolbar artifacts={this.results()}\n                                              criteria={this.state.criteria}\n                                              paging={this.state.paging}\n                                              onPerPageSelect={this.onPerPageSelect}\n                                              onSetPage={this.onSetPage}\n                                              onUploadArtifact={this.onUploadArtifact}\n                                              onExportArtifacts={this.onExportArtifacts}\n                                              onImportArtifacts={this.onImportArtifacts}\n                                              onCriteriaChange={this.onFilterChange}/>\n                    </PageSection>\n                </If>\n                <PageSection variant={PageSectionVariants.default} isFilled={true}>\n                    {\n                        this.state.isSearching ?\n                            <Flex>\n                                <FlexItem><Spinner size=\"lg\"/></FlexItem>\n                                <FlexItem><span>Searching...</span></FlexItem>\n                            </Flex>\n                        :\n                        this.artifactsCount() === 0 ?\n                            <ArtifactsPageEmptyState onUploadArtifact={this.onUploadArtifact}\n                                                     onImportArtifacts={this.onImportArtifacts}\n                                                     isFiltered={this.isFiltered()}/>\n                        :\n                            <ArtifactList artifacts={this.artifacts()} onGroupClick={this.onGroupClick} />\n                    }\n                </PageSection>\n                <Modal\n                    title=\"Upload Artifact\"\n                    variant=\"large\"\n                    isOpen={this.state.isUploadModalOpen}\n                    onClose={this.onUploadModalClose}\n                    className=\"upload-artifact-modal pf-m-redhat-font\"\n                    actions={[\n                        <Button key=\"upload\" variant=\"primary\" data-testid=\"modal-btn-upload\" onClick={this.doUploadArtifact} isDisabled={!this.state.isUploadFormValid}>Upload</Button>,\n                        <Button key=\"cancel\" variant=\"link\" data-testid=\"modal-btn-cancel\" onClick={this.onUploadModalClose}>Cancel</Button>\n                    ]}\n                >\n                    <UploadArtifactForm onChange={this.onUploadFormChange} onValid={this.onUploadFormValid} />\n                </Modal>\n                <InvalidContentModal error={this.state.invalidContentError}\n                                     isOpen={this.state.isInvalidContentModalOpen}\n                                     onClose={this.closeInvalidContentModal} />\n                <Modal\n                    title=\"Upload multiple artifacts\"\n                    variant=\"medium\"\n                    isOpen={this.state.isImportModalOpen}\n                    onClose={this.onImportModalClose}\n                    className=\"import-artifacts-modal pf-m-redhat-font\"\n                    actions={[\n                        <Button key=\"upload\" variant=\"primary\" data-testid=\"modal-btn-upload\" onClick={this.doImport} isDisabled={!this.state.isImportFormValid}>Upload</Button>,\n                        <Button key=\"cancel\" variant=\"link\" data-testid=\"modal-btn-cancel\" onClick={this.onImportModalClose}>Cancel</Button>\n                    ]}\n                >\n                    <Form>\n                        <FormGroup isRequired={false} fieldId=\"form-summary\">\n                            <p>\n                                Select an artifacts .zip file previously downloaded from a Service Registry instance.\n                            </p>\n                        </FormGroup>\n                        <FormGroup\n                            label=\"ZIP File\"\n                            isRequired={true}\n                            fieldId=\"form-file\"\n                            helperText=\"File format must be .zip\"\n                        >\n                            <FileUpload\n                                id=\"import-content\"\n                                data-testid=\"form-import\"\n                                filename={this.state.importFilename}\n                                filenamePlaceholder=\"Drag and drop or choose a .zip file\"\n                                isRequired={true}\n                                onChange={this.onImportFileChange}\n                            />\n                        </FormGroup>\n                    </Form>\n                </Modal>\n                <PleaseWaitModal message=\"Creating artifact, please wait...\"\n                                 isOpen={this.state.isPleaseWaitModalOpen} />\n                <ProgressModal message=\"Importing artifacts\"\n                               title=\"Upload multiple artifacts\"\n                               isCloseable={true}\n                               progress={this.state.importProgress}\n                               onClose={() => this.setSingleState(\"isImporting\", false)}\n                               isOpen={this.state.isImporting} />\n            </React.Fragment>\n        );\n    }\n\n    protected initializePageState(): ArtifactsPageState {\n        let criteria: ArtifactsPageToolbarFilterCriteria = {\n            filterSelection: \"name\",\n            filterValue: \"\",\n            ascending: true\n        }\n        // @ts-ignore\n        const location: any = this.props.history.location;\n        let initFromSearch: string = \"\";\n        if (location && location.search) {\n            const params = new URLSearchParams(location.search);\n            if (params.get(\"group\")) {\n                criteria = {\n                    filterSelection: \"group\",\n                    filterValue: params.get(\"group\") as string,\n                    ascending: true\n                }\n            }\n            initFromSearch = location.search;\n        }\n        return {\n            criteria,\n            initFromSearch,\n            isImporting: false,\n            importProgress: 0,\n            importFilename: \"\",\n            importFile: \"\",\n            invalidContentError: null,\n            isInvalidContentModalOpen: false,\n            isPleaseWaitModalOpen: false,\n            isSearching: false,\n            isUploadFormValid: false,\n            isImportFormValid: false,\n            isUploadModalOpen: false,\n            isImportModalOpen: false,\n            paging: {\n                page: 1,\n                pageSize: 10\n            },\n            results: null,\n            uploadFormData: null\n        };\n    }\n\n    // @ts-ignore\n    protected createLoaders(): Promise {\n        return this.search();\n    }\n\n    private onUploadArtifact = (): void => {\n        this.setSingleState(\"isUploadModalOpen\", true);\n    };\n\n    private onImportArtifacts = (): void => {\n        this.setSingleState(\"isImportModalOpen\", true);\n    };\n\n    private onExportArtifacts = (): void => {\n        Services.getAdminService().exportAs(\"all-artifacts.zip\").then(dref => {\n            const link = document.createElement(\"a\");\n            link.href = dref.href;\n            link.download = `all-artifacts.zip`;\n            link.click();\n        }).catch(error => this.handleServerError(error, \"Failed to export artifacts\"));\n    };\n\n    private onUploadModalClose = (): void => {\n        this.setSingleState(\"isUploadModalOpen\", false);\n    };\n\n    private onImportModalClose = (): void => {\n        this.setSingleState(\"isImportModalOpen\", false);\n    }\n\n    private onArtifactsLoaded(results: ArtifactsSearchResults): void {\n        this.setMultiState({\n            isSearching: false,\n            results\n        });\n    }\n\n    private doImport = (): void => {\n        this.setMultiState({\n            isImporting: true,\n            importProgress: 0,\n            isImportModalOpen: false\n        });\n        if (this.state.importFile != null) {\n            Services.getAdminService().importFrom(this.state.importFile, (event: any) => {\n                let progress: number = 0;\n                if (event.lengthComputable) {\n                    progress = Math.round(100 * (event.loaded / event.total));\n                }\n                this.setSingleState(\"importProgress\", progress);\n            }).then(() => {\n                setTimeout(() => {\n                    this.setMultiState({\n                        isImporting: false,\n                        importProgress: 100,\n                        isImportModalOpen: false\n                    }, this.search);\n                }, 1500);\n            }).catch(error => this.handleServerError(error, \"Error importing multiple artifacts\"));\n        }\n    };\n\n    private doUploadArtifact = (): void => {\n        this.onUploadModalClose();\n        this.pleaseWait(true);\n        if (this.state.uploadFormData !== null) {\n            // If no groupId is provided, set it to the \"default\" group\n            if (!this.state.uploadFormData.groupId) {\n                this.state.uploadFormData.groupId = \"default\";\n            }\n            Services.getGroupsService().createArtifact(this.state.uploadFormData).then(metaData => {\n                const groupId: string = metaData.groupId ? metaData.groupId : \"default\";\n                const artifactLocation: string = this.linkTo(`/artifacts/${ encodeURIComponent(groupId) }/${ encodeURIComponent(metaData.id) }`);\n                Services.getLoggerService().info(\"[ArtifactsPage] Artifact successfully uploaded.  Redirecting to details: \", artifactLocation);\n                this.navigateTo(artifactLocation)();\n            }).catch( error => {\n                this.pleaseWait(false);\n                if (error && (error.error_code === 400 || error.error_code === 409)) {\n                    this.handleInvalidContentError(error);\n                } else {\n                    this.handleServerError(error, \"Error uploading artifact.\");\n                }\n                this.setMultiState({uploadFormData: null, isUploadFormValid: false});\n            });\n        }\n    };\n\n    private results(): ArtifactsSearchResults {\n        return this.state.results ? this.state.results : {\n            artifacts: [],\n            count: 0,\n            page: 1,\n            pageSize: 10\n        };\n    }\n\n    private artifacts(): SearchedArtifact[] {\n        return this.state.results ? this.state.results.artifacts : [];\n    }\n\n    private artifactsCount(): number {\n        return this.state.results ? this.state.results.artifacts.length : 0;\n    }\n\n    private onFilterChange = (criteria: ArtifactsPageToolbarFilterCriteria): void => {\n        this.setMultiState({\n            criteria,\n            isSearching: true\n        }, () => {\n            this.search();\n        });\n    };\n\n    private isFiltered(): boolean {\n        return !!this.state.criteria.filterValue;\n    }\n\n    // @ts-ignore\n    private search(): Promise {\n        const gac: GetArtifactsCriteria = {\n            sortAscending: this.state.criteria.ascending,\n            type: this.state.criteria.filterSelection,\n            value: this.state.criteria.filterValue\n        };\n        return Services.getGroupsService().getArtifacts(gac, this.state.paging).then(results => {\n            this.onArtifactsLoaded(results);\n        }).catch(error => {\n            this.handleServerError(error, \"Error searching for artifacts.\");\n        });\n    }\n\n    private onSetPage = (event: any, newPage: number, perPage?: number): void => {\n        const paging: Paging = {\n            page: newPage,\n            pageSize: perPage ? perPage : this.state.paging.pageSize\n        };\n        this.setMultiState({\n            isSearching: true,\n            paging\n        }, () => {\n            this.search();\n        });\n    };\n\n    private onPerPageSelect = (event: any, newPerPage: number): void => {\n        const paging: Paging = {\n            page: this.state.paging.page,\n            pageSize: newPerPage\n        };\n        this.setMultiState({\n            isSearching: true,\n            paging\n        }, () => {\n            this.search();\n        });\n    };\n\n    private onUploadFormValid = (isValid: boolean): void => {\n        this.setSingleState(\"isUploadFormValid\", isValid);\n    };\n\n    private onUploadFormChange = (data: CreateArtifactData): void => {\n        this.setSingleState(\"uploadFormData\", data);\n    };\n\n    private onImportFileChange = (value: string | File, filename: string, event: any): void => {\n        if (value == \"\" && filename == \"\") {\n            this.setMultiState({\n                importFilename: \"\",\n                importFile: \"\",\n                isImportFormValid: false\n            });\n        } else {\n            const isValid: boolean = filename.toLowerCase().endsWith(\".zip\");\n            this.setMultiState({\n                importFilename: filename,\n                importFile: value,\n                isImportFormValid: isValid\n            });\n        }\n    };\n\n    private closeInvalidContentModal = (): void => {\n        this.setSingleState(\"isInvalidContentModalOpen\", false);\n    };\n\n    private pleaseWait = (isOpen: boolean): void => {\n        this.setSingleState(\"isPleaseWaitModalOpen\", isOpen);\n    };\n\n    private handleInvalidContentError(error: any): void {\n        Services.getLoggerService().info(\"[ArtifactsPage] Invalid content error:\", error);\n        this.setMultiState({\n            invalidContentError: error,\n            isInvalidContentModalOpen: true\n        });\n    }\n\n    private onGroupClick = (groupId: string): void => {\n        Services.getLoggerService().info(\"[ArtifactsPage] Filtering by group: \", groupId);\n        this.setSingleState(\"criteria\", {\n            filterSelection: \"group\",\n            filterValue: groupId,\n            ascending: this.state.criteria.ascending\n        }, () => {\n            this.search();\n        });\n    };\n\n    private showToolbar = (): boolean => {\n        if (this.state.isLoading) {\n            return false;\n        }\n        return true;\n    }\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport \"./artifactList.css\";\nimport {PureComponent, PureComponentProps, PureComponentState} from \"../../../../components\";\n\n/**\n * Properties\n */\nexport interface ArtifactGroupProps extends PureComponentProps {\n    groupId: string|null;\n    onClick: (groupId: string) => void;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface ArtifactGroupState extends PureComponentState {\n}\n\n\n/**\n * Models the list of artifacts.\n */\nexport class ArtifactGroup extends PureComponent<ArtifactGroupProps, ArtifactGroupState> {\n\n    constructor(props: Readonly<ArtifactGroupProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <a className={this.style()} onClick={this.fireOnClick}>{this.props.groupId}</a>\n        );\n    }\n\n    protected initializeState(): ArtifactGroupState {\n        return {};\n    }\n\n    private style(): string {\n        return !this.props.groupId ? \"nogroup\" : \"group\";\n    }\n\n    private fireOnClick = (): void => {\n        this.props.onClick(this.props.groupId as string);\n    };\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport \"./artifactList.css\";\nimport {Badge, DataList, DataListCell, DataListItemCells, DataListItemRow} from '@patternfly/react-core';\nimport {ArtifactTypeIcon, PureComponent, PureComponentProps, PureComponentState} from \"../../../../components\";\nimport {ArtifactName} from \"./artifactName\";\nimport {ArtifactGroup} from \"./artifactGroup\";\nimport {SearchedArtifact} from \"../../../../../models\";\n\n/**\n * Properties\n */\nexport interface ArtifactListProps extends PureComponentProps {\n    artifacts: SearchedArtifact[];\n    onGroupClick: (groupId: string) => void;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface ArtifactListState extends PureComponentState {\n}\n\n\n/**\n * Models the list of artifacts.\n */\nexport class ArtifactList extends PureComponent<ArtifactListProps, ArtifactListState> {\n\n    constructor(props: Readonly<ArtifactListProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <DataList aria-label=\"List of artifacts\" className=\"artifact-list\">\n                {\n                    this.props.artifacts.map( (artifact, idx) =>\n                            <DataListItemRow className=\"artifact-list-item\" key={artifact.id}>\n                                <DataListItemCells\n                                    dataListCells={[\n                                        <DataListCell key=\"type icon\" className=\"type-icon-cell\">\n                                            <ArtifactTypeIcon type={artifact.type}/>\n                                        </DataListCell>,\n                                        <DataListCell key=\"main content\" className=\"content-cell\">\n                                            <div className=\"artifact-title\">\n                                                <ArtifactGroup groupId={artifact.groupId} onClick={this.props.onGroupClick} />\n                                                <ArtifactName groupId={artifact.groupId} id={artifact.id} name={artifact.name} />\n                                                {\n                                                    this.statuses(artifact).map( status =>\n                                                        <Badge className=\"status-badge\" key={status} isRead={true}>{status}</Badge>\n                                                    )\n                                                }\n                                            </div>\n                                            <div className=\"artifact-description\">{this.description(artifact)}</div>\n                                            <div className=\"artifact-tags\">\n                                                {\n                                                    this.labels(artifact).map( label =>\n                                                        <Badge key={label} isRead={true}>{label}</Badge>\n                                                    )\n                                                }\n                                            </div>\n                                        </DataListCell>\n                                    ]}\n                                />\n                            </DataListItemRow>\n                    )\n                }\n            </DataList>\n        );\n    }\n\n    protected initializeState(): ArtifactListState {\n        return {};\n    }\n\n    private labels(artifact: SearchedArtifact): string[] {\n        return artifact.labels ? artifact.labels : [];\n    }\n\n    private statuses(artifact: SearchedArtifact): string[] {\n        const rval: string[] = [];\n        if (artifact.state === \"DISABLED\") {\n            rval.push(\"Disabled\");\n        }\n        if (artifact.state === \"DEPRECATED\") {\n            rval.push(\"Deprecated\");\n        }\n        return rval;\n    }\n\n    private description(artifact: SearchedArtifact): string {\n        if (artifact.description) {\n            return artifact.description;\n        }\n        return `An artifact of type ${artifact.type} with no description.`;\n    }\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport \"./artifactList.css\";\nimport {Link} from \"react-router-dom\";\nimport {PureComponent, PureComponentProps, PureComponentState} from \"../../../../components\";\n\n/**\n * Properties\n */\nexport interface ArtifactNameProps extends PureComponentProps {\n    groupId: string|null;\n    id: string;\n    name: string;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface ArtifactNameState extends PureComponentState {\n}\n\n\n/**\n * Models the list of artifacts.\n */\nexport class ArtifactName extends PureComponent<ArtifactNameProps, ArtifactNameState> {\n\n    constructor(props: Readonly<ArtifactNameProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return this.props.name ? (\n            <React.Fragment>\n                <Link className=\"name\" data-testid={this.testId(\"artifacts-lnk-view-\")} to={this.artifactLink()}>{this.props.name}</Link>\n                <Link className=\"id\" data-testid={this.testId(\"artifacts-lnk-view-id-\")} to={this.artifactLink()}>{this.props.id}</Link>\n            </React.Fragment>\n        ) : (\n            <React.Fragment>\n                <Link className=\"name\" data-testid={this.testId(\"artifacts-lnk-view-\")} to={this.artifactLink()}>{this.props.id}</Link>\n            </React.Fragment>\n        );\n    }\n\n    protected initializeState(): ArtifactNameState {\n        return {};\n    }\n\n    private artifactLink(): string {\n        const groupId: string = this.props.groupId == null ? \"default\" : this.props.groupId;\n        const link: string = `/artifacts/${ encodeURIComponent(groupId)}/${ encodeURIComponent(this.props.id) }`;\n        return this.linkTo(link);\n    }\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport \"./empty.css\";\nimport {Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title} from '@patternfly/react-core';\nimport {PlusCircleIcon} from \"@patternfly/react-icons\";\nimport {IfAuth, PureComponent, PureComponentProps, PureComponentState} from \"../../../../components\";\nimport {IfFeature} from \"../../../../components/common/ifFeature\";\nimport {If} from \"../../../../components/common/if\";\n\n/**\n * Properties\n */\nexport interface ArtifactsPageEmptyStateProps extends PureComponentProps {\n    isFiltered: boolean;\n    onUploadArtifact: () => void;\n    onImportArtifacts: () => void;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface ArtifactsPageEmptyStateState extends PureComponentState {\n}\n\n\n/**\n * Models the empty state for the Artifacts page (when there are no artifacts).\n */\nexport class ArtifactsPageEmptyState extends PureComponent<ArtifactsPageEmptyStateProps, ArtifactsPageEmptyStateState> {\n\n    constructor(props: Readonly<ArtifactsPageEmptyStateProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <EmptyState variant={EmptyStateVariant.full}>\n                <EmptyStateIcon icon={PlusCircleIcon}/>\n                <Title headingLevel=\"h5\" size=\"lg\">\n                    No artifacts found\n                </Title>\n                <If condition={() => this.props.isFiltered}>\n                    <EmptyStateBody>\n                        No artifacts match your filter settings.  Change your filter or perhaps Upload a new\n                        artifact.\n                    </EmptyStateBody>\n                </If>\n                <If condition={() => !this.props.isFiltered}>\n                    <EmptyStateBody>\n                        There are currently no artifacts in the registry.  Upload artifacts to view them here.\n                    </EmptyStateBody>\n                </If>\n                <IfAuth isDeveloper={true}>\n                    <IfFeature feature=\"readOnly\" isNot={true}>\n                        <Button className=\"empty-btn-upload\" variant=\"primary\" data-testid=\"empty-btn-upload\" onClick={this.props.onUploadArtifact}>Upload artifact</Button>\n                    </IfFeature>\n                </IfAuth>\n                <IfAuth isAdmin={true}>\n                    <IfFeature feature=\"readOnly\" isNot={true}>\n                        <Button className=\"empty-btn-import\" variant=\"secondary\" data-testid=\"empty-btn-import\" onClick={this.props.onImportArtifacts}>Upload multiple artifacts</Button>\n                    </IfFeature>\n                </IfAuth>\n            </EmptyState>\n        );\n    }\n\n    protected initializeState(): ArtifactsPageEmptyStateState {\n        return {};\n    }\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from 'react';\nimport \"./toolbar.css\";\nimport {\n    Button,\n    ButtonVariant,\n    Dropdown,\n    DropdownItem,\n    DropdownToggle,\n    Form,\n    InputGroup, KebabToggle,\n    Pagination,\n    TextInput,\n    Toolbar,\n    ToolbarContent,\n    ToolbarItem\n} from '@patternfly/react-core';\nimport {SearchIcon, SortAlphaDownAltIcon, SortAlphaDownIcon} from \"@patternfly/react-icons\";\nimport {IfAuth, IfFeature, PureComponent, PureComponentProps, PureComponentState} from \"../../../../components\";\nimport {OnPerPageSelect, OnSetPage} from \"@patternfly/react-core/dist/js/components/Pagination/Pagination\";\nimport {ArtifactsSearchResults, GetArtifactsCriteria, Paging, Services} from \"../../../../../services\";\nimport {SelectPrincipalAccountProps} from \"../../../roles\";\n\nexport interface ArtifactsPageToolbarFilterCriteria {\n    filterSelection: string;\n    filterValue: string;\n    ascending: boolean;\n}\n\n/**\n * Properties\n */\nexport interface ArtifactsPageToolbarProps extends PureComponentProps {\n    artifacts: ArtifactsSearchResults;\n    onCriteriaChange: (criteria: ArtifactsPageToolbarFilterCriteria) => void\n    criteria: ArtifactsPageToolbarFilterCriteria;\n    paging: Paging;\n    onPerPageSelect: OnPerPageSelect;\n    onSetPage: OnSetPage;\n    onUploadArtifact: () => void;\n    onImportArtifacts: () => void;\n    onExportArtifacts: () => void;\n}\n\n/**\n * State\n */\nexport interface ArtifactsPageToolbarState extends PureComponentState {\n    filterIsExpanded: boolean;\n    criteria: ArtifactsPageToolbarFilterCriteria;\n    kebabIsOpen: boolean;\n}\n\n/**\n * Models the toolbar for the Artifacts page.\n */\nexport class ArtifactsPageToolbar extends PureComponent<ArtifactsPageToolbarProps, ArtifactsPageToolbarState> {\n\n    constructor(props: Readonly<ArtifactsPageToolbarProps>) {\n        super(props);\n    }\n    public componentDidUpdate(prevProps: ArtifactsPageToolbarProps) {\n        if (this.props.criteria && this.props.criteria != prevProps.criteria) {\n            this.setSingleState(\"criteria\", {\n                filterSelection: this.props.criteria.filterSelection,\n                filterValue: this.props.criteria.filterValue,\n                ascending: this.props.criteria.ascending\n            });\n        }\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <Toolbar id=\"artifacts-toolbar-1\" className=\"artifacts-toolbar\">\n                <ToolbarContent>\n                    <ToolbarItem className=\"filter-item\">\n                        <Form onSubmit={this.onFilterSubmit}>\n                            <InputGroup>\n                                <Dropdown\n                                    onSelect={this.onFilterSelect}\n                                    toggle={\n                                        <DropdownToggle data-testid=\"toolbar-filter-toggle\" onToggle={this.onFilterToggle}>{this.filterValueDisplay()}</DropdownToggle>\n                                    }\n                                    isOpen={this.state.filterIsExpanded}\n                                    dropdownItems={[\n                                        <DropdownItem key=\"name\" id=\"name\" data-testid=\"toolbar-filter-name\" component=\"button\">Name</DropdownItem>,\n                                        <DropdownItem key=\"group\" id=\"group\" data-testid=\"toolbar-filter-group\" component=\"button\">Group</DropdownItem>,\n                                        <DropdownItem key=\"description\" id=\"description\" data-testid=\"toolbar-filter-description\" component=\"button\">Description</DropdownItem>,\n                                        <DropdownItem key=\"labels\" id=\"labels\" data-testid=\"toolbar-filter-labels\" component=\"button\">Labels</DropdownItem>,\n                                        <DropdownItem key=\"globalId\" id=\"globalId\" data-testid=\"toolbar-filter-globalId\" component=\"button\">GlobalId</DropdownItem>,\n                                        <DropdownItem key=\"contentId\" id=\"contentId\" data-testid=\"toolbar-filter-contentId\" component=\"button\">ContentId</DropdownItem>,\n                                    ]}\n                                />\n                                <TextInput name=\"filterValue\" id=\"filterValue\" type=\"search\"\n                                           value={this.state.criteria.filterValue}\n                                           onChange={this.onFilterValueChange}\n                                           data-testid=\"toolbar-filter-value\"\n                                           aria-label=\"search input example\"/>\n                                <Button variant={ButtonVariant.control}\n                                        onClick={this.onFilterSubmit}\n                                        data-testid=\"toolbar-btn-filter-search\"\n                                        aria-label=\"search button for search input\">\n                                    <SearchIcon/>\n                                </Button>\n                            </InputGroup>\n                        </Form>\n                    </ToolbarItem>\n                    <ToolbarItem className=\"sort-icon-item\">\n                        <Button variant=\"plain\" aria-label=\"edit\" data-testid=\"toolbar-btn-sort\" onClick={this.onToggleAscending}>\n                            {\n                                this.state.criteria.ascending ? <SortAlphaDownIcon/> : <SortAlphaDownAltIcon/>\n                            }\n                        </Button>\n                    </ToolbarItem>\n                    <ToolbarItem className=\"upload-artifact-item\">\n                        <IfAuth isDeveloper={true}>\n                            <IfFeature feature=\"readOnly\" isNot={true}>\n                                <Button className=\"btn-header-upload-artifact\" data-testid=\"btn-header-upload-artifact\"\n                                        variant=\"primary\" onClick={this.props.onUploadArtifact}>Upload artifact</Button>\n                            </IfFeature>\n                        </IfAuth>\n                    </ToolbarItem>\n                    <ToolbarItem className=\"admin-actions-item\">\n                        <IfAuth isAdmin={true}>\n                            <Dropdown\n                                onSelect={this.onKebabSelect}\n                                toggle={<KebabToggle onToggle={this.onKebabToggle} />}\n                                isOpen={this.state.kebabIsOpen}\n                                isPlain\n                                dropdownItems={[\n                                    <DropdownItem key=\"import\" id=\"import-action\" data-testid=\"toolbar-import\" component=\"button\">Upload multiple artifacts</DropdownItem>,\n                                    <DropdownItem key=\"export\" id=\"export-action\" data-testid=\"toolbar-export\" component=\"button\">Download all artifacts (.zip file)</DropdownItem>\n                                ]}\n                            />\n\n\n                            {/*<Button className=\"btn-header-export-artifacts\" data-testid=\"btn-header-export-artifacts\"*/}\n                            {/*        variant=\"secondary\" onClick={this.props.onExportArtifacts}>Export all artifacts</Button>*/}\n                        </IfAuth>\n                    </ToolbarItem>\n                    <ToolbarItem className=\"artifact-paging-item\">\n                        <Pagination\n                            variant=\"bottom\"\n                            dropDirection=\"down\"\n                            itemCount={this.totalArtifactsCount()}\n                            perPage={this.props.paging.pageSize}\n                            page={this.props.paging.page}\n                            onSetPage={this.props.onSetPage}\n                            onPerPageSelect={this.props.onPerPageSelect}\n                            widgetId=\"artifact-list-pagination\"\n                            className=\"artifact-list-pagination\"\n                        />\n                    </ToolbarItem>\n                </ToolbarContent>\n            </Toolbar>\n        );\n    }\n\n    protected initializeState(): ArtifactsPageToolbarState {\n        return {\n            filterIsExpanded: false,\n            criteria: this.props.criteria,\n            kebabIsOpen: false\n        }\n    }\n\n    private totalArtifactsCount(): number {\n        return this.props.artifacts ? this.props.artifacts.count : 0;\n    }\n\n    private onFilterToggle = (isExpanded: boolean): void => {\n        Services.getLoggerService().debug(\"[ArtifactsPageToolbar] Toggling filter dropdown.\");\n        this.setSingleState(\"filterIsExpanded\", isExpanded);\n    };\n\n    private onFilterSelect = (event: React.SyntheticEvent<HTMLDivElement>|undefined): void => {\n        const value: string = event && event.currentTarget && event.currentTarget.id ? event.currentTarget.id : \"\";\n        Services.getLoggerService().debug(\"[ArtifactsPageToolbar] Setting filter type to: %s\", value);\n        this.setState({\n            filterIsExpanded: false,\n            criteria: {\n                ascending: this.state.criteria.ascending,\n                filterSelection: value,\n                filterValue: this.state.criteria.filterValue\n            }\n        }, () => {\n            this.fireOnChange();\n        });\n    };\n\n    private onKebabSelect = (event: React.SyntheticEvent<HTMLDivElement>|undefined): void => {\n        const value: string = event && event.currentTarget && event.currentTarget.id ? event.currentTarget.id : \"\";\n        Services.getLoggerService().debug(\"[ArtifactsPageToolbar] Toolbar action: \", value);\n        this.onKebabToggle(false);\n        switch (value) {\n            case \"import-action\":\n                this.props.onImportArtifacts();\n                break;\n            case \"export-action\":\n                this.props.onExportArtifacts();\n                break;\n        }\n    };\n\n    private onKebabToggle = (isOpen: boolean) => {\n        this.setSingleState(\"kebabIsOpen\", isOpen);\n    };\n\n    private onFilterValueChange = (value: any): void => {\n        Services.getLoggerService().debug(\"[ArtifactsPageToolbar] Setting filter value: %o\", value);\n        this.setSingleState(\"criteria\", {\n            ascending: this.state.criteria.ascending,\n            filterSelection: this.state.criteria.filterSelection,\n            filterValue: value\n        });\n    };\n\n    private onFilterSubmit = (event: any|undefined): void => {\n        this.fireOnChange();\n        if (event) {\n            event.preventDefault();\n        }\n    };\n\n    private onToggleAscending = (): void => {\n        Services.getLoggerService().debug(\"[ArtifactsPageToolbar] Toggle the ascending flag.\");\n        const sortAscending: boolean = !this.state.criteria.ascending;\n        this.setSingleState(\"ascending\", sortAscending, () => {\n            this.fireOnChange();\n        });\n    };\n\n    private fireOnChange(): void {\n        this.props.onCriteriaChange(this.state.criteria);\n    }\n\n    private filterValueDisplay(): string {\n        switch (this.state.criteria.filterSelection) {\n            case \"name\":\n                return \"Name\";\n            case \"group\":\n                return \"Group\";\n            case \"description\":\n                return \"Description\";\n            case \"labels\":\n                return \"Labels\";\n            case \"globalId\":\n                return \"GlobalId\";\n            case \"contentId\":\n                return \"ContentId\";\n            default:\n                return \"Name\";\n        }\n    }\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from 'react';\nimport \"./uploadForm.css\";\nimport {PureComponent, PureComponentProps, PureComponentState} from \"../../../../components\";\nimport {\n    debounce,\n    Dropdown,\n    DropdownItem,\n    DropdownSeparator,\n    DropdownToggle,\n    FileUpload,\n    Form,\n    FormGroup,\n    FormHelperText,\n    TextInput\n} from \"@patternfly/react-core\";\nimport {CaretDownIcon} from \"@patternfly/react-icons\";\nimport {ArtifactTypes} from \"../../../../../models\";\nimport {CreateArtifactData} from \"../../../../../services\";\n\n\nconst artifactTypes: any[] = [\n    { id: ArtifactTypes.AVRO, label: \"Avro Schema\" },\n    { id: ArtifactTypes.PROTOBUF, label: \"Protocol Buffer Schema\" },\n    { id: ArtifactTypes.JSON, label: \"JSON Schema\" },\n    { id: ArtifactTypes.OPENAPI, label: \"OpenAPI\" },\n    { id: ArtifactTypes.ASYNCAPI, label: \"AsyncAPI\" },\n    { id: ArtifactTypes.GRAPHQL, label: \"GraphQL\" },\n    { id: ArtifactTypes.KCONNECT, label: \"Kafka Connect Schema\" },\n    { id: ArtifactTypes.WSDL, label: \"WSDL\" },\n    { id: ArtifactTypes.XSD, label: \"XML Schema\" },\n];\n\n/**\n * Properties\n */\nexport interface UploadArtifactFormProps extends PureComponentProps {\n    onValid: (valid: boolean) => void;\n    onChange: (data: CreateArtifactData) => void;\n}\n\n/**\n * State\n */\nexport interface UploadArtifactFormState extends PureComponentState {\n    id: string;\n    group: string;\n    type: string;\n    typeIsExpanded: boolean;\n    content: string;\n    contentFilename: string;\n    contentIsLoading: boolean;\n    formValid: boolean;\n    idValid: boolean;\n    groupValid: boolean;\n    debouncedOnChange: ((data: CreateArtifactData) => void) | null;\n}\n\n/**\n * Models the toolbar for the Artifacts page.\n */\nexport class UploadArtifactForm extends PureComponent<UploadArtifactFormProps, UploadArtifactFormState> {\n\n    constructor(props: Readonly<UploadArtifactFormProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <Form>\n                <FormGroup\n                    label=\"Group & ID\"\n                    fieldId=\"form-id\"\n                    helperText=\"(Optional) Group and Artifact ID are optional.  If Artifact ID is left blank, the server will generate one for you.\"\n                >\n                    <div className=\"group-and-id\">\n                        <TextInput\n                            className=\"group\"\n                            isRequired={false}\n                            type=\"text\"\n                            id=\"form-group\"\n                            data-testid=\"form-group\"\n                            name=\"form-group\"\n                            aria-describedby=\"form-group-helper\"\n                            value={this.state.group}\n                            placeholder=\"Group\"\n                            onChange={this.onGroupChange}\n                            validated={this.groupValidated()}\n                        />\n                        <span className=\"separator\">/</span>\n                        <TextInput\n                            className=\"artifact-id\"\n                            isRequired={false}\n                            type=\"text\"\n                            id=\"form-id\"\n                            data-testid=\"form-id\"\n                            name=\"form-id\"\n                            aria-describedby=\"form-id-helper\"\n                            value={this.state.id}\n                            placeholder=\"ID of the artifact\"\n                            onChange={this.onIdChange}\n                            validated={this.idValidated()}\n                        />\n                    </div>\n                    <FormHelperText\n                        isError={true}\n                        isHidden={this.state.idValid && this.state.groupValid}\n                    >\n                        Character % and non ASCII characters are not allowed\n                    </FormHelperText>\n                </FormGroup>\n                <FormGroup\n                    label=\"Type\"\n                    fieldId=\"form-type\"\n                    isRequired={true}\n                >\n                    <div>\n                        <Dropdown\n                            toggle={\n                                <DropdownToggle id=\"form-type-toggle\" data-testid=\"form-type-toggle\" onToggle={this.onTypeToggle} toggleIndicator={CaretDownIcon}>\n                                    { this.state.type ? this.typeLabel(this.state.type) : \"Auto-Detect\" }\n                                </DropdownToggle>\n                            }\n                            onSelect={this.onTypeSelect}\n                            isOpen={this.state.typeIsExpanded}\n                            dropdownItems={[\n                                <DropdownItem key=\"auto\" id=\"\" data-testid=\"form-type-auto\"><i>Auto-Detect</i></DropdownItem>,\n                                <DropdownSeparator key=\"separator\" />,\n                                ...artifactTypes.map(t =>\n                                    <DropdownItem key={t.id} id={t.id} data-testid={`form-type-${t.id}`}>{ t.label }</DropdownItem>\n                                )\n                            ]}\n                        />\n                    </div>\n                </FormGroup>\n                <FormGroup\n                    label=\"Artifact\"\n                    isRequired={true}\n                    fieldId=\"form-artifact\"\n                >\n                    <FileUpload\n                        id=\"artifact-content\"\n                        data-testid=\"form-upload\"\n                        type=\"text\"\n                        filename={this.state.contentFilename}\n                        value={this.state.content}\n                        isRequired={true}\n                        allowEditingUploadedText={true}\n                        onChange={this.onContentChange}\n                        onReadStarted={this.onFileReadStarted}\n                        onReadFinished={this.onFileReadFinished}\n                        isLoading={this.state.contentIsLoading}\n                    />\n                </FormGroup>\n            </Form>\n        );\n    }\n\n    protected initializeState(): UploadArtifactFormState {\n        return {\n            content: \"\",\n            contentFilename: \"\",\n            contentIsLoading: false,\n            debouncedOnChange: debounce(this.props.onChange, 200),\n            id: \"\",\n            group: \"\",\n            type: \"\",\n            typeIsExpanded: false,\n            formValid: false,\n            idValid: true,\n            groupValid: true\n        };\n    }\n\n    private onTypeToggle = (isExpanded: boolean): void => {\n        this.setSingleState(\"typeIsExpanded\", isExpanded);\n    };\n\n    private onTypeSelect = (event: React.SyntheticEvent<HTMLDivElement>|undefined): void => {\n        const newType: string = event && event.currentTarget && event.currentTarget.id ? event.currentTarget.id : \"\";\n        this.setState({\n            type: newType,\n            typeIsExpanded: false\n        }, () => {\n            this.fireOnChange();\n            this.checkFormValid();\n        });\n    };\n\n    private onIdChange = (value: any): void => {\n        this.setMultiState({\n            id: value,\n            idValid: this.isIdValid(value)\n        }, () => {\n            this.fireOnChange();\n            this.checkFormValid();\n        });\n    };\n\n    private onGroupChange = (value: any): void => {\n        this.setMultiState({\n            group: value,\n            groupValid: this.isIdValid(value)\n        }, () => {\n            this.fireOnChange();\n            this.checkFormValid();\n        });\n    };\n\n    private onContentChange = (value: any, filename: string, event: any): void => {\n        this.setSingleState(\"content\", value, () => {\n            this.fireOnChange();\n            this.checkFormValid();\n        });\n    };\n\n    private onFileReadStarted = (): void => {\n        this.setSingleState(\"contentIsLoading\", true);\n    };\n\n    private onFileReadFinished = (): void => {\n        this.setSingleState(\"contentIsLoading\", false);\n    };\n\n    private checkFormValid(): void {\n        const data: CreateArtifactData = this.currentData();\n        const oldValid: boolean = this.state.formValid;\n        const newValid: boolean = this.isFormValid(data);\n        const validityChanged: boolean = oldValid !== newValid;\n        this.setState({\n            formValid: newValid\n        }, () => {\n            if (validityChanged) {\n                this.fireOnFormValid();\n            }\n        });\n    }\n\n    private isFormValid(data: CreateArtifactData): boolean {\n        return !!data.content && this.isIdValid(data.id) && this.isIdValid(data.groupId);\n    }\n\n    private isIdValid(id: string|null): boolean {\n        if (!id) {\n            //id is optional, server can generate it\n            return true;\n        } else {\n            // character % breaks the ui\n            const isAscii = (str: string) => {\n                for (let i = 0; i < str.length; i++){\n                    if(str.charCodeAt(i)>127){\n                        return false;\n                    }\n                }\n                return true;\n            }\n            return id.indexOf(\"%\") == -1 && isAscii(id);\n        }\n    }\n\n    private currentData(): CreateArtifactData {\n        return {\n            content: this.state.content,\n            groupId: this.state.group,\n            id: this.state.id,\n            type: this.state.type\n        };\n    }\n\n    private fireOnChange(): void {\n        if (this.state.debouncedOnChange) {\n            const data: CreateArtifactData = this.currentData();\n            this.state.debouncedOnChange(data);\n        }\n    }\n\n    private fireOnFormValid(): void {\n        if (this.props.onValid) {\n            this.props.onValid(this.state.formValid);\n        }\n    }\n\n    private typeLabel(type: string): string {\n        return artifactTypes.filter( t => {\n            return t.id === type;\n        }).map( t => t.label )[0];\n    }\n\n    private idValidated(): any {\n        const data: CreateArtifactData = this.currentData();\n        if (this.isIdValid(data.id)) {\n            if (!data.id) {\n                return \"default\"\n            }\n            return \"success\"\n        } else {\n            return \"error\"\n        }\n    }\n\n    private groupValidated(): any {\n        const data: CreateArtifactData = this.currentData();\n        if (this.isIdValid(data.groupId)) {\n            if (!data.groupId) {\n                return \"default\"\n            }\n            return \"success\"\n        } else {\n            return \"error\"\n        }\n    }\n\n}\n"],"names":["props","render","this","accept","children","initializeState","condition","Modal","title","variant","isOpen","showClose","isCloseable","onClose","className","Progress","message","value","progress","onUploadArtifact","setSingleState","onImportArtifacts","onExportArtifacts","exportAs","then","dref","link","document","createElement","href","download","click","catch","error","handleServerError","onUploadModalClose","onImportModalClose","doImport","setMultiState","isImporting","importProgress","isImportModalOpen","state","importFile","importFrom","event","lengthComputable","Math","round","loaded","total","setTimeout","search","doUploadArtifact","pleaseWait","uploadFormData","groupId","createArtifact","metaData","artifactLocation","linkTo","encodeURIComponent","id","info","navigateTo","error_code","handleInvalidContentError","isUploadFormValid","onFilterChange","criteria","isSearching","onSetPage","newPage","perPage","paging","page","pageSize","onPerPageSelect","newPerPage","onUploadFormValid","isValid","onUploadFormChange","data","onImportFileChange","filename","importFilename","isImportFormValid","toLowerCase","endsWith","closeInvalidContentModal","onGroupClick","filterSelection","filterValue","ascending","showToolbar","isLoading","componentDidUpdate","prevProps","prevState","snapshot","history","location","initFromSearch","initializePageState","renderPage","PageSection","PageSectionVariants","padding","default","tabKey","If","artifacts","results","onCriteriaChange","isFilled","Flex","FlexItem","Spinner","size","artifactsCount","isFiltered","isUploadModalOpen","actions","Button","key","onClick","isDisabled","onChange","onValid","invalidContentError","isInvalidContentModalOpen","Form","FormGroup","isRequired","fieldId","label","helperText","FileUpload","filenamePlaceholder","isPleaseWaitModalOpen","ProgressModal","params","URLSearchParams","get","createLoaders","onArtifactsLoaded","count","length","gac","sortAscending","type","getArtifacts","fireOnClick","style","DataList","map","artifact","idx","DataListItemRow","DataListItemCells","dataListCells","DataListCell","name","statuses","status","Badge","isRead","description","labels","rval","push","Link","testId","to","artifactLink","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","PlusCircleIcon","Title","headingLevel","EmptyStateBody","isDeveloper","feature","isNot","isAdmin","onFilterToggle","isExpanded","debug","onFilterSelect","currentTarget","setState","filterIsExpanded","fireOnChange","onKebabSelect","onKebabToggle","onFilterValueChange","onFilterSubmit","preventDefault","onToggleAscending","Toolbar","ToolbarContent","ToolbarItem","onSubmit","InputGroup","Dropdown","onSelect","toggle","DropdownToggle","onToggle","filterValueDisplay","dropdownItems","DropdownItem","component","TextInput","ButtonVariant","SearchIcon","SortAlphaDownIcon","SortAlphaDownAltIcon","KebabToggle","kebabIsOpen","isPlain","Pagination","dropDirection","itemCount","totalArtifactsCount","widgetId","artifactTypes","ArtifactTypes","onTypeToggle","onTypeSelect","newType","typeIsExpanded","checkFormValid","onIdChange","idValid","isIdValid","onGroupChange","group","groupValid","onContentChange","onFileReadStarted","onFileReadFinished","placeholder","validated","groupValidated","idValidated","FormHelperText","isError","isHidden","toggleIndicator","CaretDownIcon","typeLabel","DropdownSeparator","t","contentFilename","content","allowEditingUploadedText","onReadStarted","onReadFinished","contentIsLoading","debouncedOnChange","debounce","formValid","currentData","oldValid","newValid","isFormValid","validityChanged","fireOnFormValid","indexOf","str","i","charCodeAt","isAscii","filter"],"sourceRoot":""}