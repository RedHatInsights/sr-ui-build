{"version":3,"file":"3669.24af076f.js","mappings":"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","sources":["webpack://@apicurio/registry-ui/./src/app/pages/basePage.tsx","webpack://@apicurio/registry-ui/./src/app/components/errorPage/accessErrorPage.tsx","webpack://@apicurio/registry-ui/./src/app/components/errorPage/rateLimitErrorPage.tsx","webpack://@apicurio/registry-ui/./src/app/pages/settings/components/propertyInput.tsx","webpack://@apicurio/registry-ui/./src/app/pages/settings/components/configProperty.tsx","webpack://@apicurio/registry-ui/./src/app/pages/settings/settings.tsx","webpack://@apicurio/registry-ui/./src/app/pages/settings/settings.federated.tsx"],"sourcesContent":["/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport { ErrorPage, PageError, PureComponent, PureComponentProps, PureComponentState } from \"../components\";\nimport { Services } from \"../../services\";\nimport { Flex, FlexItem, PageSection, PageSectionVariants, Spinner } from \"@patternfly/react-core\";\nimport { AccessErrorPage } from \"../components/errorPage/accessErrorPage\";\nimport { RateLimitErrorPage } from \"../components/errorPage/rateLimitErrorPage\";\n\n// TODO this should be configurable via standard UI config settings\nconst MAX_RETRIES: number = 1;\n\nexport enum PageErrorType {\n    React, Server\n}\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface PageProps extends PureComponentProps {\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface PageState extends PureComponentState {\n    pageLoadRetries?: number;\n    isLoading?: boolean;\n    isError?: boolean;\n    error?: PageError;\n}\n\n\n/**\n * The artifacts page.\n */\nexport abstract class PageComponent<P extends PageProps, S extends PageState> extends PureComponent<P, S> {\n\n    protected constructor(props: Readonly<P>) {\n        super(props);\n        setTimeout(() => {\n            this.loadPageData();\n        }, 10);\n    }\n\n    protected initializeState(): S {\n        return {\n            ...this.initializePageState(),\n            isLoading: true\n        };\n    }\n\n    protected abstract initializePageState(): S;\n\n    public componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {\n        this.handleError(PageErrorType.React, error, errorInfo);\n    }\n\n    public render(): React.ReactElement {\n        if (this.isError()) {\n            if (this.is403Error()) {\n                return (\n                    <AccessErrorPage error={this.state.error}/>\n                );\n            } else if (this.is419Error()) {\n                return (\n                    <RateLimitErrorPage error={this.state.error}/>\n                );\n            } else {\n                return (\n                    <ErrorPage error={this.state.error}/>\n                );\n            }\n        } else if (this.isLoading()) {\n            return (\n                <React.Fragment>\n                    <PageSection variant={PageSectionVariants.default} isFilled={true}>\n                        <Flex>\n                            <FlexItem><Spinner size=\"lg\"/></FlexItem>\n                            <FlexItem><span>Loading...</span></FlexItem>\n                        </Flex>\n                    </PageSection>\n                </React.Fragment>\n            );\n        } else {\n            return this.renderPage();\n        }\n    }\n\n    /**\n     * Renders the page content.  Subclasses should implement this instead of render() so that\n     * errors are handled/displayed properly.\n     */\n    protected abstract renderPage(): React.ReactElement;\n\n    protected postConstruct(): void {\n        // @ts-ignore\n        PureComponent.setHistory(this.props.history);\n        super.postConstruct();\n    }\n\n    // @ts-ignore\n    protected createLoaders(): Promise | Promise[] | null {\n        return null;\n    }\n\n    protected handleServerError(error: any, errorMessage: string): void {\n        this.handleError(PageErrorType.Server, error, errorMessage);\n    }\n\n    protected getPathParam(paramName: string): string {\n        // @ts-ignore\n        const paramValue: string = this.props.match.params[paramName];\n        const paramValueDecoded: string = decodeURIComponent(paramValue);\n        return paramValueDecoded;\n    }\n\n    protected isLoading(): boolean {\n        return this.state.isLoading ? true : false;\n    }\n\n    private loadPageData(): void {\n        // @ts-ignore\n        let loaders: Promise | Promise[] | null = this.createLoaders();\n\n        // If not loading anything, convert from null to empty array\n        if (loaders == null) {\n            loaders = [];\n        }\n\n        // Convert to array if not already\n        if (!Array.isArray(loaders)) {\n            loaders = [ loaders ];\n        }\n\n        // Always add the \"update current user\" loader\n        loaders = [\n            Services.getUsersService().updateCurrentUser(),\n            ...loaders\n        ];\n\n        if (loaders.length === 0) {\n            this.setSingleState(\"isLoading\", false);\n        } else {\n            this.setSingleState(\"isLoading\", true);\n            Promise.all(loaders).then(() => {\n                this.setSingleState(\"isLoading\", false);\n            }).catch(error => {\n                Services.getLoggerService().debug(\"[PageComponent] Page data load failed, retrying.\");\n                const retries: number = this.getRetries();\n                if (retries < MAX_RETRIES) {\n                    this.incrementRetries();\n                    setTimeout(() => {\n                        this.loadPageData();\n                    }, Math.pow(2, retries) * 100);\n                } else {\n                    this.handleServerError(error, \"Error loading page data.\");\n                }\n            });\n        }\n    }\n\n    private getRetries(): number {\n        return this.state.pageLoadRetries !== undefined ? this.state.pageLoadRetries as number : 0;\n    }\n\n    private incrementRetries(): void {\n        const retries: number = this.getRetries() + 1;\n        this.setSingleState(\"pageLoadRetries\", retries);\n    }\n\n    private isError(): boolean {\n        return this.state.isError ? true : false;\n    }\n\n    private is403Error(): boolean {\n        return this.state.error && this.state.error.error.status && (this.state.error.error.status == 403);\n    }\n\n    private is419Error(): boolean {\n        return this.state.error && this.state.error.error.status && (this.state.error.error.status == 419);\n    }\n\n    private handleError(errorType: PageErrorType, error: any, errorMessage: any): void {\n        Services.getLoggerService().error(\"[PageComponent] Handling an error of type: \", errorType);\n        Services.getLoggerService().error(\"[PageComponent] \", errorMessage);\n        Services.getLoggerService().error(\"[PageComponent] \", error);\n        this.setMultiState({\n            error: {\n                error,\n                errorMessage,\n                type: errorType\n            },\n            isError: true\n        });\n    }\n}\n","/**\n * @license\n * Copyright 2021 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./errorPage.css\";\nimport {\n    Button,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateSecondaryActions,\n    EmptyStateVariant,\n    PageSection,\n    PageSectionVariants,\n    Title\n} from \"@patternfly/react-core\";\nimport { LockedIcon } from \"@patternfly/react-icons\";\nimport \"ace-builds/src-noconflict/mode-text\";\nimport \"ace-builds/src-noconflict/theme-tomorrow\";\nimport { ErrorPage, ErrorPageProps } from \"./errorPage\";\n\n\nexport class AccessErrorPage extends ErrorPage {\n\n    constructor(props: Readonly<ErrorPageProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <React.Fragment>\n                <PageSection className=\"ps_error\" variant={PageSectionVariants.light}>\n                    <div className=\"centerizer\">\n                        <EmptyState variant={EmptyStateVariant.large}>\n                            <EmptyStateIcon icon={LockedIcon} />\n                            <Title headingLevel=\"h5\" size=\"lg\">Access permissions needed</Title>\n                            <EmptyStateBody>\n                                To access this Service Registry instance, contact your organization administrators.\n                            </EmptyStateBody>\n                            <EmptyStateSecondaryActions>\n                                <Button variant=\"link\"\n                                        data-testid=\"error-btn-back\"\n                                        onClick={this.navigateBack}>Return to previous page</Button>\n                            </EmptyStateSecondaryActions>\n                        </EmptyState>\n                    </div>\n                </PageSection>\n            </React.Fragment>\n        );\n    }\n\n    protected navigateBack = (): void => {\n        window.history.back();\n    };\n\n}\n","/**\n * @license\n * Copyright 2022 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./errorPage.css\";\nimport {\n    Button,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateSecondaryActions,\n    EmptyStateVariant,\n    PageSection,\n    PageSectionVariants,\n    Title\n} from \"@patternfly/react-core\";\nimport { ExclamationCircleIcon } from \"@patternfly/react-icons\";\nimport \"ace-builds/src-noconflict/mode-text\";\nimport \"ace-builds/src-noconflict/theme-tomorrow\";\nimport { ErrorPage, ErrorPageProps } from \"./errorPage\";\n\n\nexport class RateLimitErrorPage extends ErrorPage {\n\n    constructor(props: Readonly<ErrorPageProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <React.Fragment>\n                <PageSection className=\"ps_error\" variant={PageSectionVariants.light}>\n                    <div className=\"centerizer\">\n                        <EmptyState variant={EmptyStateVariant.large}>\n                            <EmptyStateIcon icon={ExclamationCircleIcon} />\n                            <Title headingLevel=\"h5\" size=\"lg\">Current usage is too high</Title>\n                            <EmptyStateBody>\n                                This Service Registry instance is throttled due to a high request rate. Ensure\n                                that existing applications are properly configured to cache the schemas.\n                            </EmptyStateBody>\n                            <EmptyStateSecondaryActions>\n                                <Button variant=\"link\"\n                                        data-testid=\"error-btn-back\"\n                                        onClick={this.navigateBack}>Return to previous page</Button>\n                            </EmptyStateSecondaryActions>\n                        </EmptyState>\n                    </div>\n                </PageSection>\n            </React.Fragment>\n        );\n    }\n\n    protected navigateBack = (): void => {\n        window.history.back();\n    };\n\n}\n","/**\n * @license\n * Copyright 2022 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport \"./configProperty.css\";\nimport { InputGroup, TextInput } from \"@patternfly/react-core\";\nimport { PureComponent, PureComponentProps, PureComponentState } from \"../../../components\";\n\n/**\n * Properties\n */\nexport interface PropertyInputProps extends PureComponentProps {\n    name: string;\n    value: string;\n    type:\n        | 'text'\n        | 'number'\n        ;\n    onChange: (newValue: string) => void;\n    onValid: (valid: boolean) => void;\n    onCancel: () => void;\n    onSave: () => void;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface PropertyInputState extends PureComponentState {\n    currentValue: string;\n    isValid: boolean;\n    isDirty: boolean;\n}\n\n/**\n * Models a single editable config property.\n */\nexport class PropertyInput extends PureComponent<PropertyInputProps, PropertyInputState> {\n\n    constructor(props: Readonly<PropertyInputProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return <InputGroup>\n            <TextInput name={ this.props.name }\n                       value={ this.state.currentValue }\n                       validated={ this.validated() }\n                       onChange={ this.handleInputChange }\n                       onKeyDown={ this.handleKeyPress }\n                       aria-label=\"configuration property input\"/>\n        </InputGroup>\n    }\n\n    protected initializeState(): PropertyInputState {\n        return {\n            currentValue: this.props.value,\n            isDirty: false,\n            isValid: true\n        };\n    }\n\n    private validated(): 'success' | 'warning' | 'error' | 'default' {\n        return this.state.isValid ? \"default\" : \"error\";\n    }\n\n    private handleInputChange = (value: string): void => {\n        const oldValid: boolean = this.state.isValid;\n        const isValid: boolean = this.validate(value);\n        this.setMultiState({\n            currentValue: value,\n            isDirty: value !== this.props.value,\n            isValid\n        }, () => {\n            if (oldValid !== isValid) {\n                this.props.onValid(isValid);\n            }\n            this.props.onChange(value);\n        });\n    };\n\n    private validate(value: string): boolean {\n        if (this.props.type === \"text\") {\n            return value.trim().length > 0;\n        } else if (this.props.type === \"number\") {\n            if (value.trim().length === 0) {\n                return false;\n            }\n            const num: number = Number(value);\n            return Number.isInteger(num);\n        }\n        return true;\n    }\n\n    private handleKeyPress = (event: any): void => {\n        if (event.code === \"Escape\") {\n            this.props.onCancel();\n        }\n        if (event.code === \"Enter\" && this.state.isDirty && this.state.isValid) {\n            this.props.onSave();\n        }\n    };\n\n}\n","/**\n * @license\n * Copyright 2022 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React, { FunctionComponent, useState } from \"react\";\nimport \"./configProperty.css\";\nimport { Button, Flex, FlexItem, Switch } from \"@patternfly/react-core\";\nimport { ConfigurationProperty } from \"../../../../models/configurationProperty.model\";\nimport { PropertyInput } from \"./propertyInput\";\nimport { If } from \"../../../components/common/if\";\nimport { CheckIcon, CloseIcon, PencilAltIcon } from \"@patternfly/react-icons\";\n\n/**\n * Properties\n */\nexport interface ConfigPropertyProps {\n    property: ConfigurationProperty;\n    onChange: (property: ConfigurationProperty, newValue: string) => void;\n    onReset: (property: ConfigurationProperty) => void;\n}\n\n\nexport const ConfigProperty: FunctionComponent<ConfigPropertyProps> = ({property, onChange, onReset}: ConfigPropertyProps) => {\n    const [ isEditing, setEditing ] = useState(false);\n    const [ newPropertyValue, setNewPropertyValue ] = useState(property.value);\n    const [ isValid, setValid ] = useState(true);\n\n    const onCheckboxChange = (checked: boolean): void => {\n        const newValue: string = checked ? \"true\" : \"false\";\n        onChange(property, newValue);\n    };\n\n    const onPropertyValueChange = (newValue: string): void => {\n        setNewPropertyValue(newValue);\n    };\n\n    const onPropertyValueValid = (valid: boolean): void => {\n        setValid(valid);\n    };\n\n    const onCancelEdit = (): void => {\n        setNewPropertyValue(property.value);\n        setEditing(false);\n    };\n\n    const onStartEditing = (): void => {\n        setValid(true);\n        setEditing(true);\n    };\n\n    const onSavePropertyValue = (): void => {\n        onChange(property, newPropertyValue);\n        setEditing(false);\n    };\n\n    const renderBooleanProp = (): React.ReactElement => {\n        return (\n            <Flex className=\"configuration-property boolean-property\" flexWrap={{default: \"nowrap\"}}>\n                <FlexItem grow={{default: \"grow\"}}>\n                    <div className=\"property-name\">\n                        <span className=\"name\">{property.label}</span>\n                        <span className=\"sep\">:</span>\n                        <span className=\"value\">{property.value === \"true\" ? \"On\" : \"Off\"}</span>\n                    </div>\n                    <div className=\"property-description\">{property.description}</div>\n                </FlexItem>\n                <FlexItem className=\"actions\" align={{default: \"alignRight\"}}>\n                    <Switch id={property.name} aria-label={property.label}\n                            className=\"action\"\n                            isChecked={property.value === \"true\"}\n                            onChange={onCheckboxChange} />\n                </FlexItem>\n            </Flex>\n        );\n    };\n\n    const renderStringProp = (type: 'text' | 'number'): React.ReactElement => {\n        return (\n            <Flex className=\"configuration-property string-property\" flexWrap={{default: \"nowrap\"}}>\n                <FlexItem grow={{default: \"grow\"}}>\n                    <div className=\"property-name\">\n                        <span className=\"name\">{property.label}</span>\n                    </div>\n                    <div className=\"property-description\">{property.description}</div>\n                    <If condition={!isEditing}>\n                        <div className=\"property-value\">{property.value}</div>\n                    </If>\n                    <If condition={isEditing}>\n                        <div className=\"property-editor\">\n                            <PropertyInput name={ property.name }\n                                           value={ property.value }\n                                           type={ type }\n                                           onChange={ onPropertyValueChange }\n                                           onValid={ onPropertyValueValid }\n                                           onCancel={ onCancelEdit }\n                                           onSave={ onSavePropertyValue }\n                            />\n                        </div>\n                    </If>\n                </FlexItem>\n                <FlexItem className=\"actions\" align={{default: \"alignRight\"}}>\n                    <If condition={!isEditing}>\n                        <Button variant=\"plain\" className=\"action single\" onClick={onStartEditing}><PencilAltIcon /></Button>\n                    </If>\n                    <If condition={isEditing}>\n                        <Button variant=\"plain\" className=\"action\" onClick={onSavePropertyValue} isDisabled={!isValid}><CheckIcon /></Button>\n                        <Button variant=\"plain\" className=\"action\" onClick={onCancelEdit}><CloseIcon /></Button>\n                    </If>\n                </FlexItem>\n            </Flex>\n        );\n    }\n\n    if (property.type === \"java.lang.Boolean\") {\n        return renderBooleanProp();\n    } else if (property.type === \"java.lang.Integer\") {\n        return renderStringProp(\"number\");\n    } else if (property.type === \"java.lang.Long\") {\n        return renderStringProp(\"number\");\n    } else {\n        return renderStringProp(\"text\");\n    }\n\n}\n","/**\n * @license\n * Copyright 2022 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./settings.css\";\nimport {\n    Card,\n    CardBody,\n    CardTitle,\n    PageSection,\n    PageSectionVariants,\n    SearchInput,\n    TextContent\n} from \"@patternfly/react-core\";\nimport { PageComponent, PageProps, PageState } from \"../basePage\";\nimport { Services } from \"../../../services\";\nimport { IfNotEmpty, RootPageHeader } from \"../../components\";\nimport { ConfigurationProperty } from \"../../../models/configurationProperty.model\";\nimport { ConfigProperty } from \"./components\";\nimport { If } from \"../../components/common/if\";\n\n\ninterface PropertyGroup {\n    id: string,\n    label: string,\n    propertyNames: string[];\n    properties?: ConfigurationProperty[];\n}\n\nconst PROPERTY_GROUPS: PropertyGroup[] = [\n    {\n        id: \"authn\",\n        label: \"Authentication settings\",\n        propertyNames: [\n            \"registry.auth.basic-auth-client-credentials.enabled\",\n        ]\n    },\n    {\n        id: \"authz\",\n        label: \"Authorization settings\",\n        propertyNames: [\n            \"registry.auth.owner-only-authorization\",\n            \"registry.auth.owner-only-authorization.limit-group-access\",\n            \"registry.auth.anonymous-read-access.enabled\",\n            \"registry.auth.authenticated-read-access.enabled\",\n        ]\n    },\n    {\n        id: \"compatibility\",\n        label: \"Compatibility settings\",\n        propertyNames: [\n            \"registry.ccompat.legacy-id-mode.enabled\",\n        ]\n    },\n    {\n        id: \"console\",\n        label: \"Web console settings\",\n        propertyNames: [\n            \"registry.download.href.ttl\",\n            \"registry.ui.features.readOnly\"\n        ]\n    },\n];\n\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface SettingsPageProps extends PageProps {\n\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface SettingsPageState extends PageState {\n    properties?: ConfigurationProperty[];\n    searchedProperties?: ConfigurationProperty[];\n    searchCriteria: string;\n}\n\n/**\n * The settings page.\n */\nexport class SettingsPage extends PageComponent<SettingsPageProps, SettingsPageState> {\n\n    constructor(props: Readonly<SettingsPageProps>) {\n        super(props);\n    }\n\n    public renderPage(): React.ReactElement {\n        return (\n            <React.Fragment>\n                <PageSection className=\"ps_settings-header\" variant={PageSectionVariants.light} padding={{ default : \"noPadding\" }}>\n                    <RootPageHeader tabKey={3} />\n                </PageSection>\n                <PageSection className=\"ps_settings-description\" variant={PageSectionVariants.light}>\n                    <TextContent>\n                        Configure global settings for this Service Registry instance.\n                    </TextContent>\n                    <TextContent style={{marginTop: \"10px\", marginBottom: \"5px\", maxWidth: \"450px\"}}>\n                        <SearchInput placeholder={`Filter by keyword`}\n                                     aria-label=\"Filter by keyword\"\n                                     value={this.state.searchCriteria}\n                                     onChange={this.onSearchCriteria}\n                                     onSearch={this.onSearchSettings}\n                                     onClear={this.onSearchClear}\n                        />\n                    </TextContent>\n                </PageSection>\n                <PageSection variant={PageSectionVariants.default} isFilled={true}>\n                    <IfNotEmpty collection={this.state.searchedProperties} emptyStateMessage={`No settings found matching your search criteria.`}>\n                        {\n                            this.propertyGroups().map(group =>\n                                <If key={group.id} condition={group.properties !== undefined && group.properties.length > 0}>\n                                    <Card key={group.id} className=\"config-property-group\">\n                                        <CardTitle className=\"title\">{group.label}</CardTitle>\n                                        <CardBody className=\"config-properties\">\n                                            {\n                                                group.properties?.map(prop =>\n                                                    <ConfigProperty key={prop.name}\n                                                                    property={prop}\n                                                                    onChange={this.onPropertyChange}\n                                                                    onReset={this.onPropertyReset}\n                                                    />\n                                                )\n                                            }\n                                        </CardBody>\n                                    </Card>\n                                </If>\n                            )\n                        }\n                    </IfNotEmpty>\n                </PageSection>\n            </React.Fragment>\n        );\n    }\n\n    protected initializePageState(): SettingsPageState {\n        return {\n            searchCriteria: \"\"\n        };\n    }\n\n    // @ts-ignore\n    protected createLoaders(): Promise {\n        return Services.getAdminService().listConfigurationProperties().then( properties => {\n                this.setMultiState({\n                    isLoading: false,\n                    properties\n                });\n                this.filterProperties();\n            });\n    }\n\n    private groupFor(groups: PropertyGroup[], prop: ConfigurationProperty): PropertyGroup {\n        for (const group of groups) {\n            if (group.propertyNames.indexOf(prop.name) >= 0) {\n                return group;\n            }\n        }\n        // Default to the last group (additional properties).\n        return groups[groups.length - 1];\n    }\n\n    private propertyGroups(): PropertyGroup[] {\n        const groups: PropertyGroup[] = [...PROPERTY_GROUPS];\n        groups.forEach(group => group.properties = []);\n        const additionalGroup: PropertyGroup = {\n            id: \"additional\",\n            label: \"Additional properties\",\n            properties: [],\n            propertyNames: []\n        };\n        groups.push(additionalGroup);\n        this.state.searchedProperties?.forEach(prop => {\n            this.groupFor(groups, prop).properties?.push(prop);\n        });\n        groups.forEach(group => {\n            group.properties = group.properties?.sort(\n                (prop1, prop2) => prop1.label.localeCompare(prop2.label));\n        });\n        return groups;\n    }\n\n    private acceptProperty = (property: ConfigurationProperty): boolean => {\n        if (!this.state.searchCriteria || this.state.searchCriteria.trim().length === 0) {\n            return true;\n        }\n        const sc: string = this.state.searchCriteria.toLocaleLowerCase();\n        return property.label.toLocaleLowerCase().indexOf(sc) >= 0 ||\n            property.description.toLocaleLowerCase().indexOf(sc) >= 0;\n    };\n\n    private filterProperties(): void {\n        const filteredProperties: ConfigurationProperty[] | undefined = this.state.properties?.filter(this.acceptProperty);\n        this.setSingleState(\"searchedProperties\", filteredProperties);\n    }\n\n    private onSearchCriteria = (criteria: string): void => {\n        this.setSingleState(\"searchCriteria\", criteria);\n    };\n\n    private onSearchSettings = (): void => {\n        this.filterProperties();\n    };\n\n    private onSearchClear = (): void => {\n        this.setMultiState({\n            searchCriteria: \"\"\n        }, this.onSearchSettings);\n    }\n\n    private onPropertyChange = (property: ConfigurationProperty, newValue: string): void => {\n        property.value = newValue;\n        Services.getAdminService().setConfigurationProperty(property.name, newValue).then(() => {\n            // The property was updated successfully.  Update the UI to display all config\n            // properties (the list may have changed by changing one of the values).\n            this.createLoaders();\n            Services.getAlertsService().settingChanged(property, newValue);\n        }).catch(error => {\n            // Failed to set the property... report the error somehow.\n            this.handleServerError(error, \"Error setting configuration property\");\n        });\n    };\n\n    private onPropertyReset = (property: ConfigurationProperty): void => {\n        Services.getAdminService().resetConfigurationProperty(property.name).then(() => {\n            // The property was updated successfully.  Update the UI to display all config\n            // properties (the list may have changed by changing one of the values).\n            this.createLoaders();\n        }).catch(error => {\n            // Failed to set the property... report the error somehow.\n            this.handleServerError(error, \"Error resetting configuration property\");\n        });\n    }\n\n}\n","/**\n * @license\n * Copyright 2022 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./settings.css\";\nimport { SettingsPage, SettingsPageProps } from \"./settings\";\nimport { FederatedComponentProps, FederatedUtils } from \"../../federated\";\n\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface FederatedSettingsPageProps extends SettingsPageProps, FederatedComponentProps {\n}\n\n/**\n * The settings page.\n */\nexport default class FederatedSettingsPage extends SettingsPage {\n\n    constructor(props: Readonly<FederatedSettingsPageProps>) {\n        super(props);\n    }\n\n    protected postConstruct(): void {\n        FederatedUtils.updateConfiguration(this.props as FederatedComponentProps);\n        super.postConstruct();\n    }\n\n}\n"],"names":["PageErrorType","props","navigateBack","window","history","back","render","PageSection","className","variant","PageSectionVariants","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","LockedIcon","Title","headingLevel","size","EmptyStateBody","EmptyStateSecondaryActions","Button","onClick","this","ExclamationCircleIcon","setTimeout","loadPageData","initializeState","initializePageState","isLoading","componentDidCatch","error","errorInfo","handleError","React","isError","is403Error","AccessErrorPage","state","is419Error","RateLimitErrorPage","isFilled","Flex","FlexItem","Spinner","renderPage","postConstruct","createLoaders","handleServerError","errorMessage","Server","getPathParam","paramName","paramValue","match","params","decodeURIComponent","loaders","Array","isArray","updateCurrentUser","length","setSingleState","Promise","all","then","catch","debug","retries","getRetries","incrementRetries","Math","pow","undefined","pageLoadRetries","status","errorType","setMultiState","type","handleInputChange","value","oldValid","isValid","validate","currentValue","isDirty","onValid","onChange","handleKeyPress","event","code","onCancel","onSave","InputGroup","TextInput","name","validated","onKeyDown","trim","num","Number","isInteger","ConfigProperty","property","useState","isEditing","setEditing","newPropertyValue","setNewPropertyValue","setValid","onCheckboxChange","checked","onPropertyValueChange","newValue","onPropertyValueValid","valid","onCancelEdit","onStartEditing","onSavePropertyValue","renderStringProp","flexWrap","default","grow","label","description","If","condition","PropertyInput","align","PencilAltIcon","isDisabled","CheckIcon","CloseIcon","Switch","id","isChecked","PROPERTY_GROUPS","propertyNames","acceptProperty","searchCriteria","sc","toLocaleLowerCase","indexOf","onSearchCriteria","criteria","onSearchSettings","filterProperties","onSearchClear","onPropertyChange","setConfigurationProperty","settingChanged","onPropertyReset","resetConfigurationProperty","padding","tabKey","TextContent","style","marginTop","marginBottom","maxWidth","SearchInput","placeholder","onSearch","onClear","collection","searchedProperties","emptyStateMessage","propertyGroups","map","group","key","properties","Card","CardTitle","CardBody","prop","onReset","listConfigurationProperties","groupFor","groups","forEach","push","sort","prop1","prop2","localeCompare","filteredProperties","filter","SettingsPage"],"sourceRoot":""}