{"version":3,"file":"4712.6b02445f.js","mappings":"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","sources":["webpack://@apicurio/registry-ui/./src/app/components/common/ifAuth.tsx","webpack://@apicurio/registry-ui/./src/app/components/common/ifFeature.tsx","webpack://@apicurio/registry-ui/./src/app/components/common/ifNotEmpty.tsx","webpack://@apicurio/registry-ui/./src/app/components/header/header.tsx","webpack://@apicurio/registry-ui/./src/app/components/header/pageheader.tsx","webpack://@apicurio/registry-ui/./src/app/components/schemaMapping/schemaMapping.federated.tsx","webpack://@apicurio/registry-ui/./src/app/pages/roles/roles.tsx","webpack://@apicurio/registry-ui/./src/app/pages/rules/rules.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifact/artifact.tsx","webpack://@apicurio/registry-ui/./src/app/pages/root/root.tsx","webpack://@apicurio/registry-ui/./src/app/pages/404/404.tsx","webpack://@apicurio/registry-ui/./src/app/pages/settings/components/propertyInput.tsx","webpack://@apicurio/registry-ui/./src/app/pages/settings/components/configProperty.tsx","webpack://@apicurio/registry-ui/./src/app/pages/settings/settings.tsx","webpack://@apicurio/registry-ui/./src/app/app.tsx","webpack://@apicurio/registry-ui/./src/bootstrap.tsx","webpack://@apicurio/registry-ui/./src/models/artifactMetaData.model.ts","webpack://@apicurio/registry-ui/./src/models/artifactTypes.model.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport { PureComponent, PureComponentProps, PureComponentState } from \"../baseComponent\";\nimport { Services } from \"../../../services\";\nimport { AuthService } from \"../../../services/auth\";\n\n/**\n * Properties\n */\nexport interface IfAuthProps extends PureComponentProps {\n    enabled?: boolean;\n    isAuthenticated?: boolean;\n    isAdmin?: boolean;\n    isDeveloper?: boolean;\n    isOwner?: boolean;\n    isAdminOrOwner?: boolean;\n    owner?: string;\n    children?: React.ReactNode;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface IfAuthState extends PureComponentState {\n}\n\n\n/**\n * Wrapper around a set of arbitrary child elements and displays them only if the\n * indicated authentication parameters are true.\n */\nexport class IfAuth extends PureComponent<IfAuthProps, IfAuthState> {\n\n    constructor(props: Readonly<IfAuthProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        if (this.accept()) {\n            return <React.Fragment children={this.props.children} />\n        } else {\n            return <React.Fragment />\n        }\n    }\n\n    protected initializeState(): IfAuthState {\n        return {};\n    }\n\n    private accept(): boolean {\n        const auth: AuthService = Services.getAuthService();\n        let rval: boolean = true;\n        if (this.props.enabled !== undefined) {\n            rval = rval && (auth.isAuthenticationEnabled() === this.props.enabled);\n        }\n        if (this.props.isAuthenticated !== undefined) {\n            rval = rval && (auth.isAuthenticated() === this.props.isAuthenticated);\n        }\n        if (this.props.isAdmin !== undefined) {\n            rval = rval && (auth.isUserAdmin() === this.props.isAdmin);\n        }\n        if (this.props.isDeveloper !== undefined) {\n            rval = rval && (auth.isUserDeveloper(this.props.owner) === this.props.isDeveloper);\n        }\n        if (this.props.isOwner !== undefined && this.props.owner) {\n            if (this.props.isOwner) {\n                rval = rval && (auth.isUserId(this.props.owner));\n            } else {\n                rval = rval && (!auth.isUserId(this.props.owner));\n            }\n        }\n        if (this.props.isAdminOrOwner === true && this.props.owner) {\n            rval = rval && (\n                auth.isUserAdmin() === true ||\n                auth.isUserId(this.props.owner)\n            );\n        }\n        return rval;\n    }\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport { PureComponent, PureComponentProps, PureComponentState } from \"../baseComponent\";\nimport { Services } from \"../../../services\";\n\n/**\n * Properties\n */\nexport interface IfFeatureProps extends PureComponentProps {\n    feature: string;\n    is?: any;\n    isNot?: any;\n    children?: React.ReactNode;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface IfFeatureState extends PureComponentState {\n}\n\n\n/**\n * Wrapper around a set of arbitrary child elements and displays them only if the\n * indicated feature matches the given criteria.  Use this if you want to show/hide\n * UI elements based on the configured application feature set.\n */\nexport class IfFeature extends PureComponent<IfFeatureProps, IfFeatureState> {\n\n    constructor(props: Readonly<IfFeatureProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        if (this.accept()) {\n            return <React.Fragment children={this.props.children} />\n        } else {\n            return <React.Fragment />\n        }\n    }\n\n    protected initializeState(): IfFeatureState {\n        return {};\n    }\n\n    private accept(): boolean {\n        const features: any = Services.getConfigService().features();\n        const featureValue: any = features[this.props.feature];\n        if (this.props.is !== undefined) {\n            return featureValue === this.props.is;\n        } else if (this.props.isNot !== undefined) {\n            return featureValue !== this.props.isNot;\n        } else {\n            return featureValue !== undefined;\n        }\n    }\n\n}\n","import React, { FunctionComponent } from \"react\";\nimport { EmptyState, EmptyStateBody, EmptyStateVariant, Title } from \"@patternfly/react-core\";\n\n/**\n * Properties\n */\nexport interface IfNotEmptyProps {\n    collection?: any[] | undefined;\n    emptyState?: React.ReactNode;\n    emptyStateTitle?: string;\n    emptyStateMessage?: string;\n    children?: React.ReactNode;\n}\n\n/**\n * Wrapper around a set of arbitrary child elements and displays them only if the\n * provided collection is not empty.  If the provided collection is empty, then\n * an empty state control is displayed instead.\n */\nexport const IfNotEmpty: FunctionComponent<IfNotEmptyProps> = ({collection, emptyState, emptyStateTitle, emptyStateMessage, children}: IfNotEmptyProps) => {\n    const isEmpty = () => {\n        return !collection || collection.length === 0;\n    };\n\n    const empty: React.ReactNode = emptyState || (\n        <EmptyState variant={EmptyStateVariant.xs}>\n            <Title headingLevel=\"h4\" size=\"md\">{emptyStateTitle || \"None found\"}</Title>\n            <EmptyStateBody>{emptyStateMessage || \"No items found.\"}</EmptyStateBody>\n        </EmptyState>\n    );\n\n    return isEmpty() ?\n        <React.Fragment children={empty}/> :\n        <React.Fragment children={children} />\n};\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./header.css\";\nimport { Brand, PageHeader, PageHeaderTools, PageHeaderToolsGroup, PageHeaderToolsItem } from \"@patternfly/react-core\";\nimport brandImg from \"./apicurio_logo_darkbkg_350px.png\";\nimport { PureComponent, PureComponentProps, PureComponentState } from \"../baseComponent\";\nimport { IfAuth } from \"../common/ifAuth\";\nimport { AvatarDropdown } from \"./avatarDropdown\";\n\n\n// tslint:disable-next-line:no-empty-interface\nexport interface AppHeaderProps extends PureComponentProps {\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface AppHeaderState extends PureComponentState {\n}\n\n\nexport class AppHeader extends PureComponent<AppHeaderProps, AppHeaderState> {\n\n    constructor(props: Readonly<AppHeaderProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        let pageToolbar: React.ReactElement;\n        pageToolbar = (\n            <PageHeaderTools className=\"header-toolbar\">\n                <PageHeaderToolsGroup>\n                    <PageHeaderToolsItem id=\"avatar\">\n                        <IfAuth enabled={true}>\n                            <AvatarDropdown />\n                        </IfAuth>\n                    </PageHeaderToolsItem>\n                </PageHeaderToolsGroup>\n            </PageHeaderTools>\n        );\n\n        return (<PageHeader\n            logo={<Brand onClick={this.navigateTo(this.linkTo(\"/artifacts\"))} src={brandImg} alt=\"Apicurio Registry\"/>}\n            showNavToggle={false}\n            headerTools={pageToolbar}\n        />);\n    }\n\n    protected initializeState(): AppHeaderState {\n        return {};\n    }\n\n}\n","/**\n * @license\n * Copyright 2021 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport { Tab, Tabs, TabTitleText } from \"@patternfly/react-core\";\nimport \"./pageheader.css\";\nimport { PureComponent, PureComponentProps, PureComponentState } from \"../baseComponent\";\nimport { IfAuth } from \"../common\";\nimport { Services } from \"../../../services\";\n\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface RootPageHeaderProps extends PureComponentProps {\n    tabKey: number;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface RootPageHeaderState extends PureComponentState {\n}\n\n\n/**\n * Models the page header for the Artifacts page.\n */\nexport class RootPageHeader extends PureComponent<RootPageHeaderProps, RootPageHeaderState> {\n\n    constructor(props: Readonly<RootPageHeaderProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        const tabs: any[] = [\n            <Tab key={0} eventKey={0} title={<TabTitleText>Artifacts</TabTitleText>} />,\n            <Tab key={1} eventKey={1} title={<TabTitleText>Global rules</TabTitleText>} />\n        ];\n        if (Services.getConfigService().featureRoleManagement()) {\n            tabs.push(\n                <Tab key={2} eventKey={2} title={<TabTitleText>Access</TabTitleText>} />\n            );\n        }\n        if (Services.getConfigService().featureSettings()) {\n            tabs.push(\n                <Tab key={3} eventKey={3} title={<TabTitleText>Settings</TabTitleText>} />\n            );\n        }\n        return (\n            <div>\n                <IfAuth isAdmin={true}>\n                    <Tabs activeKey={this.props.tabKey} onSelect={this.handleTabClick} children={tabs} />\n                </IfAuth>\n            </div>\n        );\n    }\n\n    protected initializeState(): RootPageHeaderState {\n        return {};\n    }\n\n    private handleTabClick = (event: React.MouseEvent<HTMLElement, MouseEvent>, eventKey: number | string): void => {\n        if (eventKey !== this.props.tabKey) {\n            if (eventKey === 0) {\n                // navigate to artifacts\n                this.navigateTo(this.linkTo(\"/artifacts\"))();\n            }\n            if (eventKey === 1) {\n                // navigate to global rules\n                this.navigateTo(this.linkTo(\"/rules\"))();\n            }\n            if (eventKey === 2) {\n                // navigate to permissions page\n                this.navigateTo(this.linkTo(\"/roles\"))();\n            }\n            if (eventKey === 3) {\n                // navigate to settings page\n                this.navigateTo(this.linkTo(\"/settings\"))();\n            }\n        }\n    }\n}\n","/**\n * @license\n * Copyright 2021 Red Hat\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SchemaMapping, SchemaMappingProps } from \"./schemaMapping\";\nimport { FederatedComponentProps, FederatedUtils } from \"../../federated\";\n\nexport interface FederatedSchemaMappingProps extends SchemaMappingProps, FederatedComponentProps {\n}\n\nexport default class FederatedSchemaMapping extends SchemaMapping {\n\n    constructor(props: Readonly<FederatedSchemaMappingProps>) {\n        super(props);\n    }\n\n    protected postConstruct(): void {\n        FederatedUtils.updateConfiguration(this.props as FederatedSchemaMappingProps);\n        super.postConstruct();\n    }\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./roles.css\";\nimport {\n    Button,\n    ButtonVariant,\n    InputGroup,\n    PageSection,\n    PageSectionVariants,\n    Select,\n    SelectOption,\n    SelectOptionObject,\n    SelectVariant,\n    TextInput,\n    Toolbar,\n    ToolbarContent,\n    ToolbarFilter,\n    ToolbarGroup,\n    ToolbarItem\n} from \"@patternfly/react-core\";\nimport { SearchIcon } from \"@patternfly/react-icons\";\nimport { PageComponent, PageProps, PageState } from \"../basePage\";\nimport { RoleMapping } from \"../../../models\";\nimport { Principal, Services } from \"../../../services\";\nimport { GrantAccessModal, RoleList, RoleMappingsEmptyState } from \"./components\";\nimport { PleaseWaitModal, RootPageHeader } from \"../../components\";\nimport { If } from \"../../components/common/if\";\n\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface RolesPageProps extends PageProps {\n    principalSelect: any\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface RolesPageState extends PageState {\n    isCreateRoleMappingModalOpen: boolean;\n    isRoleMappingUpdate: boolean;\n    roles: RoleMapping[];\n    roleFilter: RoleMapping;\n    roleListFilterOpened: boolean;\n    roleFilterSelected: string;\n    roleFilterTextInputValue: string;\n    roleFilterSelectInputValue: string;\n    roleFilterSelectInputOpened: boolean;\n    selectedRole: RoleMapping | undefined;\n    isPleaseWaitModalOpen: boolean;\n    pleaseWaitMessage: string;\n}\n\nconst roleFilterOptions = ['Account', 'Role'];\n/**\n * The global roles page.\n */\nexport class RolesPage extends PageComponent<RolesPageProps, RolesPageState> {\n\n    constructor(props: Readonly<RolesPageProps>) {\n        super(props);\n    }\n\n    public renderPage(): React.ReactElement {\n        return (\n            <React.Fragment>\n                <PageSection className=\"ps_roles-header\" variant={PageSectionVariants.light} padding={{ default : \"noPadding\" }}>\n                    <RootPageHeader tabKey={2} />\n                </PageSection>\n                <PageSection variant={PageSectionVariants.default} isFilled={true} className=\"ps_role-section\">\n                    {\n                        this.state.roles.length === 0 ?\n                            <RoleMappingsEmptyState onCreateRoleMapping={this.onCreateRoleMapping}/>\n                            :\n                            <>\n                                <Toolbar id=\"toolbar\" clearAllFilters={() => {\n                                    this.setSingleState(\"roleFilter\", {\n                                        principalId: \"\",\n                                        role: \"\",\n                                        principalName: \"\"\n                                    });\n                                }}>\n                                    <ToolbarContent>\n                                        <ToolbarGroup>\n                                            <ToolbarItem className=\"ps_role-filter-select-toolbar-item\">\n                                                <Select\n                                                    variant={SelectVariant.single}\n                                                    aria-label=\"Filter On\"\n                                                    onToggle={this.onRoleFilterToggle}\n                                                    onSelect={this.onRoleFilterSelect}\n                                                    selections={this.state.roleFilterSelected}\n                                                    isOpen={this.state.roleListFilterOpened}\n                                                >\n                                                    {roleFilterOptions.map((option, index) => (\n                                                        <SelectOption key={index} value={option} />\n                                                    ))}\n                                                </Select>\n                                            </ToolbarItem>\n                                            <ToolbarItem>\n                                                <InputGroup>\n                                                    {\n                                                        this.isRoleFilterSelected() ?\n                                                            <Select\n                                                                variant={SelectVariant.single}\n                                                                aria-label=\"Role\"\n                                                                onToggle={this.onRoleFilterSelectToggle}\n                                                                onSelect={this.onRoleFilterSelectChange}\n                                                                isOpen={this.state.roleFilterSelectInputOpened}\n                                                                placeholderText=\"Filter by role\"\n                                                            >\n                                                                <SelectOption key={1} value=\"Administrator\" />\n                                                                <SelectOption key={2} value=\"Manager\" />\n                                                                <SelectOption key={3} value=\"Viewer\" />\n                                                            </Select>\n                                                            :\n                                                            <TextInput value={this.state.roleFilterTextInputValue}\n                                                                       placeholder=\"Filter by account\"\n                                                                       name=\"roleFilterInput\" id=\"roleFilterInput\"\n                                                                       type=\"search\" aria-label=\"role filter input\"\n                                                                       onKeyDown={this.onRoleFilterTextInputKeydown}\n                                                                       onChange={this.onRoleFilterInputChange} />\n                                                    }\n                                                    <If condition={this.isAccountFilterSelected}>\n                                                        <Button variant={ButtonVariant.control} aria-label=\"search button for search input\" onClick={this.onRoleFilterApplyClick}>\n                                                            <SearchIcon />\n                                                        </Button>\n                                                    </If>\n                                                </InputGroup>\n                                            </ToolbarItem>\n                                            <ToolbarItem>\n                                                <Button variant=\"primary\" data-testid=\"btn-grant-access\" onClick={this.onCreateRoleMapping}>Grant access</Button>\n                                            </ToolbarItem>\n                                            <ToolbarFilter chips={this.state.roleFilter.principalId.length > 0 ? [this.state.roleFilter.principalId] : undefined}\n                                                deleteChip={() => {\n                                                    this.setSingleState(\"roleFilter\", {\n                                                        principalId: \"\",\n                                                        role: this.state.roleFilter.role,\n                                                        principalName: \"\"\n                                                    });\n                                                }}\n                                                categoryName=\"Account\"> </ToolbarFilter>\n                                            <ToolbarFilter chips={this.state.roleFilter.role.length > 0 ? [this.state.roleFilter.role] : undefined}\n                                                deleteChip={() => {\n                                                    this.setSingleState(\"roleFilter\", {\n                                                        principalId: this.state.roleFilter.principalId,\n                                                        role: \"\",\n                                                        principalName: this.state.roleFilter.principalName,\n                                                    });\n                                                }}\n                                                categoryName=\"Role\"> </ToolbarFilter>\n\n                                        </ToolbarGroup>\n                                    </ToolbarContent>\n                                </Toolbar>\n                                <RoleList roles={this.state.roles} roleFilter={this.state.roleFilter} onRevoke={this.onRevokeRoleMapping} onEditRoleMapping={this.onEditRoleMapping}></RoleList>\n                            </>}\n                </PageSection>\n                <GrantAccessModal isOpen={this.state.isCreateRoleMappingModalOpen}\n                    isUpdateAccess={this.state.isRoleMappingUpdate}\n                    onClose={this.closeRoleMappingModal}\n                    onGrant={this.createRoleMapping}\n                    roles={this.state.isRoleMappingUpdate ? this.state.roles : null}\n                    defaultRole={this.state.selectedRole} />\n                <PleaseWaitModal message={this.state.pleaseWaitMessage}\n                                 isOpen={this.state.isPleaseWaitModalOpen} />\n            </React.Fragment>\n        );\n    }\n\n    protected initializePageState(): RolesPageState {\n        return {\n            isCreateRoleMappingModalOpen: false,\n            isPleaseWaitModalOpen: false,\n            isRoleMappingUpdate: false,\n            pleaseWaitMessage: \"\",\n            selectedRole: undefined,\n            roles: [],\n            roleFilter: { principalId: \"\", role: \"\", principalName: \"\" },\n            roleListFilterOpened: false,\n            roleFilterSelected: roleFilterOptions[0],\n            roleFilterTextInputValue: \"\",\n            roleFilterSelectInputValue: \"\",\n            roleFilterSelectInputOpened: false\n        };\n    }\n\n    // @ts-ignore\n    protected createLoaders(): Promise {\n        return Services.getAdminService().getRoleMappings().then(roles => {\n            this.setMultiState({\n                isLoading: false,\n                roles\n            });\n        });\n    }\n\n    private onRoleFilterToggle = (isExpanded: boolean): void => {\n        this.setSingleState(\"roleListFilterOpened\", isExpanded)\n    }\n    private onRoleFilterSelectToggle = (isExpanded: boolean): void => {\n        this.setSingleState(\"roleFilterSelectInputOpened\", isExpanded)\n    }\n\n    private onRoleFilterSelect = (_event: any, selection: string | SelectOptionObject, isPlaceholder: boolean | undefined) => {\n        this.setMultiState({\n            roleFilterSelected: selection as string,\n            roleListFilterOpened: false\n        });\n    };\n\n    private onRoleFilterInputChange = (value: string) => {\n        this.setSingleState(\"roleFilterTextInputValue\", value)\n    }\n    private onRoleFilterTextInputKeydown = (event: any) => {\n        if (event.key === \"Enter\") {\n            this.onRoleFilterApplyClick();\n        }\n    };\n    private onRoleFilterApplyClick = () => {\n        let newRoleMappingFilter: RoleMapping = {\n            principalId: this.state.roleFilterSelected == roleFilterOptions[0] ? this.state.roleFilterTextInputValue : this.state.roleFilter?.principalId,\n            role: this.state.roleFilterSelected == roleFilterOptions[1] ? this.state.roleFilterSelectInputValue : this.state.roleFilter.role,\n            principalName: this.state.roleFilterSelected == roleFilterOptions[0] ? this.state.roleFilterTextInputValue : this.state.roleFilter?.principalId\n        }\n        this.setMultiState({\n            roleFilter: newRoleMappingFilter,\n            roleFilterTextInputValue: \"\"\n        });\n    }\n    private onCreateRoleMapping = (): void => {\n        this.setSingleState(\"isCreateRoleMappingModalOpen\", true);\n    };\n\n    private isAccountFilterSelected = (): boolean => {\n        return this.state.roleFilterSelected == roleFilterOptions[0];\n    };\n    private isRoleFilterSelected = (): boolean => {\n        return this.state.roleFilterSelected == roleFilterOptions[1];\n    };\n\n    private onRoleFilterSelectChange = (_event: any, selection: string | SelectOptionObject, isPlaceholder: boolean | undefined) => {\n        this.setMultiState({\n            roleFilterSelectInputValue: selection as string,\n            roleFilterSelectInputOpened: false\n        }, () => this.onRoleFilterApplyClick());\n    };\n\n    private closeRoleMappingModal = (): void => {\n        this.setMultiState({\n            selectedRole: undefined,\n            isRoleMappingUpdate: false,\n            isCreateRoleMappingModalOpen: false\n        });\n    };\n\n    private onEditRoleMapping = (role: RoleMapping) => {\n        this.setMultiState({\n            selectedRole: role,\n            isRoleMappingUpdate: true\n        })\n        this.onCreateRoleMapping();\n    }\n\n    private updateRoleMapping = (principal: Principal, role: string): void => {\n        this.pleaseWait(true, \"Granting access, please wait...\");\n        Services.getAdminService().updateRoleMapping(principal.id, role).then((mapping) => {\n            const currentRoleMappings = this.state.roles;\n            currentRoleMappings.forEach((role, index) => {\n                if (role.principalId === mapping.principalId) {\n                    currentRoleMappings[index] = {\n                        ...mapping,\n                        principalName: principal.displayName as string\n                    };\n                }\n            });\n\n            this.pleaseWait(false, \"\");\n            this.setSingleState(\"roles\", [\n                ...currentRoleMappings\n            ]);\n        }).catch(e => this.handleServerError(e, \"Error updating access.\"));\n    };\n\n    private createRoleMapping = (principal: Principal, role: string, isUpdate: boolean): void => {\n        this.closeRoleMappingModal();\n        if (isUpdate) {\n            this.updateRoleMapping(principal, role);\n        } else {\n            this.pleaseWait(true, \"Granting access, please wait...\");\n            Services.getAdminService().createRoleMapping(principal.id, role, principal.displayName as string).then((mapping) => {\n                this.pleaseWait(false, \"\");\n                this.setSingleState(\"roles\", [\n                    mapping, ...this.state.roles\n                ]);\n            }).catch(e => {\n                if (e?.error_code === 409) {\n                    // If we get a conflict when trying to create, that means the mapping already exists\n                    // and we should instead update.\n                    this.updateRoleMapping(principal, role);\n                } else {\n                    this.handleServerError(e, \"Error granting access.\");\n                }\n            });\n        }\n    };\n\n    private onRevokeRoleMapping = (principalId: string): void => {\n        this.pleaseWait(true, `Revoking access for ${principalId}, please wait...`);\n        Services.getAdminService().deleteRoleMapping(principalId).then(() => {\n            this.pleaseWait(false, \"\");\n            this.removeMapping(principalId);\n        }).catch(e => this.handleServerError(e, \"Error revoking access.\"));\n    };\n\n    private pleaseWait = (isOpen: boolean, message: string): void => {\n        this.setMultiState({\n            isPleaseWaitModalOpen: isOpen,\n            pleaseWaitMessage: message\n        });\n    };\n\n    private removeMapping(principalId: string): void {\n        const newRoles: RoleMapping[] =\n            this.state.roles.filter(rm => {\n                return rm.principalId !== principalId;\n            });\n        this.setSingleState(\"roles\", newRoles);\n    }\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./rules.css\";\nimport { PageSection, PageSectionVariants, TextContent } from \"@patternfly/react-core\";\nimport { PageComponent, PageProps, PageState } from \"../basePage\";\nimport { RuleList } from \"../../components/ruleList\";\nimport { Rule } from \"../../../models\";\nimport { Services } from \"../../../services\";\nimport { RootPageHeader } from \"../../components\";\n\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface RulesPageProps extends PageProps {\n\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface RulesPageState extends PageState {\n    rules: Rule[] | null;\n}\n\n/**\n * The global rules page.\n */\nexport class RulesPage extends PageComponent<RulesPageProps, RulesPageState> {\n\n    constructor(props: Readonly<RulesPageProps>) {\n        super(props);\n    }\n\n    public renderPage(): React.ReactElement {\n        return (\n            <React.Fragment>\n                <PageSection className=\"ps_rules-header\" variant={PageSectionVariants.light} padding={{ default : \"noPadding\" }}>\n                    <RootPageHeader tabKey={1} />\n                </PageSection>\n                <PageSection className=\"ps_rules-description\" variant={PageSectionVariants.light}>\n                    <TextContent>\n                        Manage the list of global rules for this registry. Rules can be enabled, disabled, and individually configured.\n                    </TextContent>\n                </PageSection>\n                <PageSection variant={PageSectionVariants.default} isFilled={true}>\n                    <React.Fragment>\n                        <RuleList rules={this.rules()}\n                                  onEnableRule={this.doEnableRule}\n                                  onDisableRule={this.doDisableRule}\n                                  onConfigureRule={this.doConfigureRule} />\n                    </React.Fragment>\n                </PageSection>\n            </React.Fragment>\n        );\n    }\n\n    protected initializePageState(): RulesPageState {\n        return {\n            rules: null\n        };\n    }\n\n    // @ts-ignore\n    protected createLoaders(): Promise {\n        return Services.getAdminService().getRules().then( rules => {\n                this.setMultiState({\n                    isLoading: false,\n                    rules\n                });\n            });\n    }\n\n    private rules(): Rule[] {\n        if (this.state.rules) {\n            return this.state.rules;\n        } else {\n            return [];\n        }\n    }\n\n    private doEnableRule = (ruleType: string): void => {\n        Services.getLoggerService().debug(\"[RulesPage] Enabling global rule:\", ruleType);\n        let config: string = \"FULL\";\n        if (ruleType === \"COMPATIBILITY\") {\n            config = \"BACKWARD\";\n        }\n        Services.getAdminService().createRule(ruleType, config).catch(error => {\n            this.handleServerError(error, `Error enabling \"${ ruleType }\" global rule.`);\n        });\n        this.setSingleState(\"rules\", [...this.rules(), {config, type: ruleType}]);\n    };\n\n    private doDisableRule = (ruleType: string): void => {\n        Services.getLoggerService().debug(\"[RulesPage] Disabling global rule:\", ruleType);\n        Services.getAdminService().deleteRule(ruleType).catch(error => {\n            this.handleServerError(error, `Error disabling \"${ ruleType }\" global rule.`);\n        });\n        this.setSingleState(\"rules\", this.rules().filter(r => r.type !== ruleType));\n    };\n\n    private doConfigureRule = (ruleType: string, config: string): void => {\n        Services.getLoggerService().debug(\"[RulesPage] Configuring global rule:\", ruleType, config);\n        Services.getAdminService().updateRule(ruleType, config).catch(error => {\n            this.handleServerError(error, `Error configuring \"${ ruleType }\" global rule.`);\n        });\n        this.setSingleState(\"rules\", this.rules().map(r => {\n            if (r.type === ruleType) {\n                return {config, type: r.type};\n            } else {\n                return r;\n            }\n        }));\n    };\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport { PageComponent, PageProps, PageState } from \"../basePage\";\nimport { Services } from \"../../../services\";\nimport { Redirect } from \"react-router-dom\";\n\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface ArtifactRedirectPageProps extends PageProps {\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface ArtifactRedirectPageState extends PageState {\n}\n\n/**\n * The artifact details redirect page.\n */\nexport class ArtifactRedirectPage extends PageComponent<ArtifactRedirectPageProps, ArtifactRedirectPageState> {\n\n    constructor(props: Readonly<ArtifactRedirectPageProps>) {\n        super(props);\n    }\n\n    public renderPage(): React.ReactElement {\n        const groupId: any = this.groupIdParam();\n        const artifactId: any = this.artifactIdParam();\n        const redirect: string = this.linkTo(`/artifacts/${ encodeURIComponent(groupId) }/${ encodeURIComponent(artifactId) }/versions/latest`);\n        Services.getLoggerService().info(\"[ArtifactRedirectPage] Redirecting to: %s\", redirect);\n        return (\n            <Redirect to={redirect}  />\n        );\n    }\n\n    protected groupIdParam(): string {\n        return this.getPathParam(\"groupId\");\n    }\n\n    protected artifactIdParam(): string {\n        return this.getPathParam(\"artifactId\");\n    }\n\n    protected initializePageState(): ArtifactRedirectPageState {\n        return {};\n    }\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport { PageComponent, PageProps, PageState } from \"../basePage\";\nimport { Redirect } from \"react-router\";\n\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface RootRedirectPageProps extends PageProps {\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface RootRedirectPageState extends PageState {\n}\n\n/**\n * The artifact details redirect page.\n */\nexport class RootRedirectPage extends PageComponent<RootRedirectPageProps, RootRedirectPageState> {\n\n    constructor(props: Readonly<RootRedirectPageProps>) {\n        super(props);\n    }\n\n    public renderPage(): React.ReactElement {\n        const redirect: string = `/artifacts`;\n        return (\n            <Redirect to={redirect}  />\n        );\n    }\n\n    protected initializePageState(): RootRedirectPageState {\n        return {};\n    }\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport { PageComponent, PageProps, PageState } from \"../basePage\";\nimport {\n    Button,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateVariant,\n    PageSection,\n    PageSectionVariants,\n    Title\n} from \"@patternfly/react-core\";\nimport { ExclamationCircleIcon } from \"@patternfly/react-icons\";\n\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface NotFoundPageProps extends PageProps {\n\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface NotFoundPageState extends PageState {\n}\n\n/**\n * The global rules page.\n */\nexport class NotFoundPage extends PageComponent<NotFoundPageProps, NotFoundPageState> {\n\n    constructor(props: Readonly<NotFoundPageProps>) {\n        super(props);\n    }\n\n    public renderPage(): React.ReactElement {\n        return (\n            <React.Fragment>\n                <PageSection className=\"ps_rules-header\" variant={PageSectionVariants.light}>\n                    <EmptyState variant={EmptyStateVariant.full}>\n                        <EmptyStateIcon icon={ExclamationCircleIcon} />\n                        <Title headingLevel=\"h5\" size=\"lg\">\n                            404 Error: page not found\n                        </Title>\n                        <EmptyStateBody>\n                            This page couldn't be found.  If you think this is a bug, please report the issue.\n                        </EmptyStateBody>\n                        <Button variant=\"primary\"\n                                data-testid=\"error-btn-artifacts\"\n                                onClick={this.navigateTo(this.linkTo(\"/artifacts\"))}>Show all artifacts</Button>\n                    </EmptyState>\n                </PageSection>\n            </React.Fragment>\n        );\n    }\n\n    protected initializePageState(): NotFoundPageState {\n        return {};\n    }\n\n}\n","/**\n * @license\n * Copyright 2022 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport \"./configProperty.css\";\nimport { InputGroup, TextInput } from \"@patternfly/react-core\";\nimport { PureComponent, PureComponentProps, PureComponentState } from \"../../../components\";\n\n/**\n * Properties\n */\nexport interface PropertyInputProps extends PureComponentProps {\n    name: string;\n    value: string;\n    type:\n        | 'text'\n        | 'number'\n        ;\n    onChange: (newValue: string) => void;\n    onValid: (valid: boolean) => void;\n    onCancel: () => void;\n    onSave: () => void;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface PropertyInputState extends PureComponentState {\n    currentValue: string;\n    isValid: boolean;\n    isDirty: boolean;\n}\n\n/**\n * Models a single editable config property.\n */\nexport class PropertyInput extends PureComponent<PropertyInputProps, PropertyInputState> {\n\n    constructor(props: Readonly<PropertyInputProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return <InputGroup>\n            <TextInput name={ this.props.name }\n                       value={ this.state.currentValue }\n                       validated={ this.validated() }\n                       onChange={ this.handleInputChange }\n                       onKeyDown={ this.handleKeyPress }\n                       aria-label=\"configuration property input\"/>\n        </InputGroup>\n    }\n\n    protected initializeState(): PropertyInputState {\n        return {\n            currentValue: this.props.value,\n            isDirty: false,\n            isValid: true\n        };\n    }\n\n    private validated(): 'success' | 'warning' | 'error' | 'default' {\n        return this.state.isValid ? \"default\" : \"error\";\n    }\n\n    private handleInputChange = (value: string): void => {\n        const oldValid: boolean = this.state.isValid;\n        const isValid: boolean = this.validate(value);\n        this.setMultiState({\n            currentValue: value,\n            isDirty: value !== this.props.value,\n            isValid\n        }, () => {\n            if (oldValid !== isValid) {\n                this.props.onValid(isValid);\n            }\n            this.props.onChange(value);\n        });\n    };\n\n    private validate(value: string): boolean {\n        if (this.props.type === \"text\") {\n            return value.trim().length > 0;\n        } else if (this.props.type === \"number\") {\n            if (value.trim().length === 0) {\n                return false;\n            }\n            const num: number = Number(value);\n            return Number.isInteger(num);\n        }\n        return true;\n    }\n\n    private handleKeyPress = (event: any): void => {\n        if (event.code === \"Escape\") {\n            this.props.onCancel();\n        }\n        if (event.code === \"Enter\" && this.state.isDirty && this.state.isValid) {\n            this.props.onSave();\n        }\n    };\n\n}\n","/**\n * @license\n * Copyright 2022 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React, { FunctionComponent, useState } from \"react\";\nimport \"./configProperty.css\";\nimport { Button, Flex, FlexItem, Switch } from \"@patternfly/react-core\";\nimport { ConfigurationProperty } from \"../../../../models/configurationProperty.model\";\nimport { PropertyInput } from \"./propertyInput\";\nimport { If } from \"../../../components/common/if\";\nimport { CheckIcon, CloseIcon, PencilAltIcon } from \"@patternfly/react-icons\";\n\n/**\n * Properties\n */\nexport interface ConfigPropertyProps {\n    property: ConfigurationProperty;\n    onChange: (property: ConfigurationProperty, newValue: string) => void;\n    onReset: (property: ConfigurationProperty) => void;\n}\n\n\nexport const ConfigProperty: FunctionComponent<ConfigPropertyProps> = ({property, onChange, onReset}: ConfigPropertyProps) => {\n    const [ isEditing, setEditing ] = useState(false);\n    const [ newPropertyValue, setNewPropertyValue ] = useState(property.value);\n    const [ isValid, setValid ] = useState(true);\n\n    const onCheckboxChange = (checked: boolean): void => {\n        const newValue: string = checked ? \"true\" : \"false\";\n        onChange(property, newValue);\n    };\n\n    const onPropertyValueChange = (newValue: string): void => {\n        setNewPropertyValue(newValue);\n    };\n\n    const onPropertyValueValid = (valid: boolean): void => {\n        setValid(valid);\n    };\n\n    const onCancelEdit = (): void => {\n        setNewPropertyValue(property.value);\n        setEditing(false);\n    };\n\n    const onStartEditing = (): void => {\n        setValid(true);\n        setEditing(true);\n    };\n\n    const onSavePropertyValue = (): void => {\n        onChange(property, newPropertyValue);\n        setEditing(false);\n    };\n\n    const renderBooleanProp = (): React.ReactElement => {\n        return (\n            <Flex className=\"configuration-property boolean-property\" flexWrap={{default: \"nowrap\"}}>\n                <FlexItem grow={{default: \"grow\"}}>\n                    <div className=\"property-name\">\n                        <span className=\"name\">{property.label}</span>\n                        <span className=\"sep\">:</span>\n                        <span className=\"value\">{property.value === \"true\" ? \"On\" : \"Off\"}</span>\n                    </div>\n                    <div className=\"property-description\">{property.description}</div>\n                </FlexItem>\n                <FlexItem className=\"actions\" align={{default: \"alignRight\"}}>\n                    <Switch id={property.name} aria-label={property.label}\n                            className=\"action\"\n                            isChecked={property.value === \"true\"}\n                            onChange={onCheckboxChange} />\n                </FlexItem>\n            </Flex>\n        );\n    };\n\n    const renderStringProp = (type: 'text' | 'number'): React.ReactElement => {\n        return (\n            <Flex className=\"configuration-property string-property\" flexWrap={{default: \"nowrap\"}}>\n                <FlexItem grow={{default: \"grow\"}}>\n                    <div className=\"property-name\">\n                        <span className=\"name\">{property.label}</span>\n                    </div>\n                    <div className=\"property-description\">{property.description}</div>\n                    <If condition={!isEditing}>\n                        <div className=\"property-value\">{property.value}</div>\n                    </If>\n                    <If condition={isEditing}>\n                        <div className=\"property-editor\">\n                            <PropertyInput name={ property.name }\n                                           value={ property.value }\n                                           type={ type }\n                                           onChange={ onPropertyValueChange }\n                                           onValid={ onPropertyValueValid }\n                                           onCancel={ onCancelEdit }\n                                           onSave={ onSavePropertyValue }\n                            />\n                        </div>\n                    </If>\n                </FlexItem>\n                <FlexItem className=\"actions\" align={{default: \"alignRight\"}}>\n                    <If condition={!isEditing}>\n                        <Button variant=\"plain\" className=\"action single\" onClick={onStartEditing}><PencilAltIcon /></Button>\n                    </If>\n                    <If condition={isEditing}>\n                        <Button variant=\"plain\" className=\"action\" onClick={onSavePropertyValue} isDisabled={!isValid}><CheckIcon /></Button>\n                        <Button variant=\"plain\" className=\"action\" onClick={onCancelEdit}><CloseIcon /></Button>\n                    </If>\n                </FlexItem>\n            </Flex>\n        );\n    }\n\n    if (property.type === \"java.lang.Boolean\") {\n        return renderBooleanProp();\n    } else if (property.type === \"java.lang.Integer\") {\n        return renderStringProp(\"number\");\n    } else if (property.type === \"java.lang.Long\") {\n        return renderStringProp(\"number\");\n    } else {\n        return renderStringProp(\"text\");\n    }\n\n}\n","/**\n * @license\n * Copyright 2022 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./settings.css\";\nimport {\n    Card,\n    CardBody,\n    CardTitle,\n    PageSection,\n    PageSectionVariants,\n    SearchInput,\n    TextContent\n} from \"@patternfly/react-core\";\nimport { PageComponent, PageProps, PageState } from \"../basePage\";\nimport { Services } from \"../../../services\";\nimport { IfNotEmpty, RootPageHeader } from \"../../components\";\nimport { ConfigurationProperty } from \"../../../models/configurationProperty.model\";\nimport { ConfigProperty } from \"./components\";\nimport { If } from \"../../components/common/if\";\n\n\ninterface PropertyGroup {\n    id: string,\n    label: string,\n    propertyNames: string[];\n    properties?: ConfigurationProperty[];\n}\n\nconst PROPERTY_GROUPS: PropertyGroup[] = [\n    {\n        id: \"authn\",\n        label: \"Authentication settings\",\n        propertyNames: [\n            \"registry.auth.basic-auth-client-credentials.enabled\",\n        ]\n    },\n    {\n        id: \"authz\",\n        label: \"Authorization settings\",\n        propertyNames: [\n            \"registry.auth.owner-only-authorization\",\n            \"registry.auth.owner-only-authorization.limit-group-access\",\n            \"registry.auth.anonymous-read-access.enabled\",\n            \"registry.auth.authenticated-read-access.enabled\",\n        ]\n    },\n    {\n        id: \"compatibility\",\n        label: \"Compatibility settings\",\n        propertyNames: [\n            \"registry.ccompat.legacy-id-mode.enabled\",\n        ]\n    },\n    {\n        id: \"console\",\n        label: \"Web console settings\",\n        propertyNames: [\n            \"registry.download.href.ttl\",\n            \"registry.ui.features.readOnly\"\n        ]\n    },\n];\n\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface SettingsPageProps extends PageProps {\n\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface SettingsPageState extends PageState {\n    properties?: ConfigurationProperty[];\n    searchedProperties?: ConfigurationProperty[];\n    searchCriteria: string;\n}\n\n/**\n * The settings page.\n */\nexport class SettingsPage extends PageComponent<SettingsPageProps, SettingsPageState> {\n\n    constructor(props: Readonly<SettingsPageProps>) {\n        super(props);\n    }\n\n    public renderPage(): React.ReactElement {\n        return (\n            <React.Fragment>\n                <PageSection className=\"ps_settings-header\" variant={PageSectionVariants.light} padding={{ default : \"noPadding\" }}>\n                    <RootPageHeader tabKey={3} />\n                </PageSection>\n                <PageSection className=\"ps_settings-description\" variant={PageSectionVariants.light}>\n                    <TextContent>\n                        Configure global settings for this Service Registry instance.\n                    </TextContent>\n                    <TextContent style={{marginTop: \"10px\", marginBottom: \"5px\", maxWidth: \"450px\"}}>\n                        <SearchInput placeholder={`Filter by keyword`}\n                                     aria-label=\"Filter by keyword\"\n                                     value={this.state.searchCriteria}\n                                     onChange={this.onSearchCriteria}\n                                     onSearch={this.onSearchSettings}\n                                     onClear={this.onSearchClear}\n                        />\n                    </TextContent>\n                </PageSection>\n                <PageSection variant={PageSectionVariants.default} isFilled={true}>\n                    <IfNotEmpty collection={this.state.searchedProperties} emptyStateMessage={`No settings found matching your search criteria.`}>\n                        {\n                            this.propertyGroups().map(group =>\n                                <If key={group.id} condition={group.properties !== undefined && group.properties.length > 0}>\n                                    <Card key={group.id} className=\"config-property-group\">\n                                        <CardTitle className=\"title\">{group.label}</CardTitle>\n                                        <CardBody className=\"config-properties\">\n                                            {\n                                                group.properties?.map(prop =>\n                                                    <ConfigProperty key={prop.name}\n                                                                    property={prop}\n                                                                    onChange={this.onPropertyChange}\n                                                                    onReset={this.onPropertyReset}\n                                                    />\n                                                )\n                                            }\n                                        </CardBody>\n                                    </Card>\n                                </If>\n                            )\n                        }\n                    </IfNotEmpty>\n                </PageSection>\n            </React.Fragment>\n        );\n    }\n\n    protected initializePageState(): SettingsPageState {\n        return {\n            searchCriteria: \"\"\n        };\n    }\n\n    // @ts-ignore\n    protected createLoaders(): Promise {\n        return Services.getAdminService().listConfigurationProperties().then( properties => {\n                this.setMultiState({\n                    isLoading: false,\n                    properties\n                });\n                this.filterProperties();\n            });\n    }\n\n    private groupFor(groups: PropertyGroup[], prop: ConfigurationProperty): PropertyGroup {\n        for (const group of groups) {\n            if (group.propertyNames.indexOf(prop.name) >= 0) {\n                return group;\n            }\n        }\n        // Default to the last group (additional properties).\n        return groups[groups.length - 1];\n    }\n\n    private propertyGroups(): PropertyGroup[] {\n        const groups: PropertyGroup[] = [...PROPERTY_GROUPS];\n        groups.forEach(group => group.properties = []);\n        const additionalGroup: PropertyGroup = {\n            id: \"additional\",\n            label: \"Additional properties\",\n            properties: [],\n            propertyNames: []\n        };\n        groups.push(additionalGroup);\n        this.state.searchedProperties?.forEach(prop => {\n            this.groupFor(groups, prop).properties?.push(prop);\n        });\n        groups.forEach(group => {\n            group.properties = group.properties?.sort(\n                (prop1, prop2) => prop1.label.localeCompare(prop2.label));\n        });\n        return groups;\n    }\n\n    private acceptProperty = (property: ConfigurationProperty): boolean => {\n        if (!this.state.searchCriteria || this.state.searchCriteria.trim().length === 0) {\n            return true;\n        }\n        const sc: string = this.state.searchCriteria.toLocaleLowerCase();\n        return property.label.toLocaleLowerCase().indexOf(sc) >= 0 ||\n            property.description.toLocaleLowerCase().indexOf(sc) >= 0;\n    };\n\n    private filterProperties(): void {\n        const filteredProperties: ConfigurationProperty[] | undefined = this.state.properties?.filter(this.acceptProperty);\n        this.setSingleState(\"searchedProperties\", filteredProperties);\n    }\n\n    private onSearchCriteria = (criteria: string): void => {\n        this.setSingleState(\"searchCriteria\", criteria);\n    };\n\n    private onSearchSettings = (): void => {\n        this.filterProperties();\n    };\n\n    private onSearchClear = (): void => {\n        this.setMultiState({\n            searchCriteria: \"\"\n        }, this.onSearchSettings);\n    }\n\n    private onPropertyChange = (property: ConfigurationProperty, newValue: string): void => {\n        property.value = newValue;\n        Services.getAdminService().setConfigurationProperty(property.name, newValue).then(() => {\n            // The property was updated successfully.  Update the UI to display all config\n            // properties (the list may have changed by changing one of the values).\n            this.createLoaders();\n            Services.getAlertsService().settingChanged(property, newValue);\n        }).catch(error => {\n            // Failed to set the property... report the error somehow.\n            this.handleServerError(error, \"Error setting configuration property\");\n        });\n    };\n\n    private onPropertyReset = (property: ConfigurationProperty): void => {\n        Services.getAdminService().resetConfigurationProperty(property.name).then(() => {\n            // The property was updated successfully.  Update the UI to display all config\n            // properties (the list may have changed by changing one of the values).\n            this.createLoaders();\n        }).catch(error => {\n            // Failed to set the property... report the error somehow.\n            this.handleServerError(error, \"Error resetting configuration property\");\n        });\n    }\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport \"./app.css\";\n\nimport React from \"react\";\nimport { Page } from \"@patternfly/react-core\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { AppHeader } from \"./components/header\";\nimport { RulesPage } from \"./pages/rules\";\nimport { ArtifactsPage } from \"./pages/artifacts\";\nimport { ArtifactRedirectPage } from \"./pages/artifact\";\nimport { ArtifactVersionPage } from \"./pages/artifactVersion\";\nimport { RootRedirectPage } from \"./pages/root\";\nimport { NotFoundPage } from \"./pages/404\";\nimport { Services } from \"../services\";\nimport { RolesPage, SettingsPage } from \"./pages\";\n\n/**\n * The main application class.\n */\nexport default class App extends React.PureComponent<{}, {}> {\n  constructor(props: Readonly<any>) {\n    super(props);\n  }\n\n  public render() {\n    const contextPath:\n      | string\n      | undefined = Services.getConfigService().uiContextPath();\n    Services.getLoggerService().info(\n      \"[App] Using app contextPath: \",\n      contextPath\n    );\n\n    // Function to force the Artifact Version Page to fully remount each time we navigate to it.  This\n    // is needed because we want the page to fully rerender whenever the browser location changes, which\n    // happens when switching between versions of the artifact content (e.g. switch from version 1 to version 3).\n    const artifactVersionPage = (props: any): React.ReactElement => {\n      const location: string = props.location.pathname;\n      return <ArtifactVersionPage key={location} {...props} />;\n    };\n\n    return (\n      <Router basename={contextPath}>\n        <Page\n          className=\"pf-m-redhat-font\"\n          isManagedSidebar={false}\n          header={<AppHeader />}\n        >\n          <Switch>\n            <Route path=\"/\" exact={true} component={RootRedirectPage} />\n            <Route path=\"/rules\" exact={true} component={RulesPage} />\n            <Route path=\"/roles\" exact={true} component={RolesPage} />\n            <Route path=\"/settings\" exact={true} component={SettingsPage} />\n            <Route path=\"/artifacts\" exact={true} component={ArtifactsPage} />\n            <Route\n              path=\"/artifacts/:groupId/:artifactId\"\n              exact={true}\n              component={ArtifactRedirectPage}\n            />\n            <Route\n              path=\"/artifacts/:groupId/:artifactId/versions/:version\"\n              exact={true}\n              component={artifactVersionPage}\n            />\n            <Route component={NotFoundPage} />\n          </Switch>\n        </Page>\n      </Router>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app/app\";\nimport { Services } from \"./services\";\n\nconst renderApp = () =>\n  ReactDOM.render(<App />, document.getElementById(\"root\") as HTMLElement);\nServices.getAuthService().authenticateAndRender(renderApp);\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nexport class ArtifactMetaData {\n\n    public groupId: string|null;\n    public id: string;\n    public name: string|null;\n    public description: string|null;\n    public labels: string[]|null;\n    public properties: { [key: string]: string };\n    public type: string;\n    public version: string;\n    public createdBy: string;\n    public createdOn: Date;\n    public modifiedBy: string;\n    public modifiedOn: Date;\n    public globalId: number;\n    public contentId: number|null;\n    public state: string;\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// tslint:disable-next-line:interface-name\nexport class ArtifactTypes {\n\n    public static AVRO: string = \"AVRO\";\n    public static PROTOBUF: string = \"PROTOBUF\";\n    public static JSON: string = \"JSON\";\n    public static OPENAPI: string = \"OPENAPI\";\n    public static ASYNCAPI: string = \"ASYNCAPI\";\n    public static GRAPHQL: string = \"GRAPHQL\";\n    public static KCONNECT: string = \"KCONNECT\";\n    public static WSDL: string = \"WSDL\";\n    public static XSD: string = \"XSD\";\n    public static XML: string = \"XML\";\n\n}\n"],"names":["props","render","this","accept","children","initializeState","auth","rval","undefined","enabled","isAuthenticationEnabled","isAuthenticated","isAdmin","isUserAdmin","isDeveloper","isUserDeveloper","owner","isOwner","isUserId","isAdminOrOwner","featureValue","features","feature","is","isNot","IfNotEmpty","collection","emptyState","emptyStateTitle","emptyStateMessage","empty","EmptyState","variant","EmptyStateVariant","Title","headingLevel","size","EmptyStateBody","length","pageToolbar","PageHeaderTools","className","PageHeaderToolsGroup","PageHeaderToolsItem","id","PageHeader","logo","Brand","onClick","navigateTo","linkTo","src","alt","showNavToggle","headerTools","handleTabClick","event","eventKey","tabKey","tabs","Tab","key","title","TabTitleText","featureRoleManagement","push","featureSettings","Tabs","activeKey","onSelect","postConstruct","roleFilterOptions","onRoleFilterToggle","isExpanded","setSingleState","onRoleFilterSelectToggle","onRoleFilterSelect","_event","selection","isPlaceholder","setMultiState","roleFilterSelected","roleListFilterOpened","onRoleFilterInputChange","value","onRoleFilterTextInputKeydown","onRoleFilterApplyClick","newRoleMappingFilter","principalId","state","roleFilterTextInputValue","roleFilter","role","roleFilterSelectInputValue","principalName","onCreateRoleMapping","isAccountFilterSelected","isRoleFilterSelected","onRoleFilterSelectChange","roleFilterSelectInputOpened","closeRoleMappingModal","selectedRole","isRoleMappingUpdate","isCreateRoleMappingModalOpen","onEditRoleMapping","updateRoleMapping","principal","pleaseWait","then","mapping","currentRoleMappings","roles","forEach","index","displayName","catch","e","handleServerError","createRoleMapping","isUpdate","error_code","onRevokeRoleMapping","deleteRoleMapping","removeMapping","isOpen","message","isPleaseWaitModalOpen","pleaseWaitMessage","renderPage","PageSection","PageSectionVariants","padding","default","isFilled","Toolbar","clearAllFilters","ToolbarContent","ToolbarGroup","ToolbarItem","Select","SelectVariant","onToggle","selections","map","option","SelectOption","InputGroup","placeholderText","TextInput","placeholder","name","type","onKeyDown","onChange","If","condition","Button","ButtonVariant","SearchIcon","ToolbarFilter","chips","deleteChip","categoryName","onRevoke","isUpdateAccess","onClose","onGrant","defaultRole","initializePageState","createLoaders","getRoleMappings","isLoading","newRoles","filter","rm","doEnableRule","ruleType","debug","config","createRule","error","rules","doDisableRule","deleteRule","r","doConfigureRule","updateRule","TextContent","onEnableRule","onDisableRule","onConfigureRule","getRules","groupId","groupIdParam","artifactId","artifactIdParam","redirect","encodeURIComponent","info","Redirect","to","getPathParam","EmptyStateIcon","icon","ExclamationCircleIcon","handleInputChange","oldValid","isValid","validate","currentValue","isDirty","onValid","handleKeyPress","code","onCancel","onSave","validated","trim","num","Number","isInteger","ConfigProperty","property","useState","isEditing","setEditing","newPropertyValue","setNewPropertyValue","setValid","onCheckboxChange","checked","onPropertyValueChange","newValue","onPropertyValueValid","valid","onCancelEdit","onStartEditing","onSavePropertyValue","renderStringProp","Flex","flexWrap","FlexItem","grow","label","description","PropertyInput","align","PencilAltIcon","isDisabled","CheckIcon","CloseIcon","Switch","isChecked","PROPERTY_GROUPS","propertyNames","acceptProperty","searchCriteria","sc","toLocaleLowerCase","indexOf","onSearchCriteria","criteria","onSearchSettings","filterProperties","onSearchClear","onPropertyChange","setConfigurationProperty","settingChanged","onPropertyReset","resetConfigurationProperty","style","marginTop","marginBottom","maxWidth","SearchInput","onSearch","onClear","searchedProperties","propertyGroups","group","properties","Card","CardTitle","CardBody","prop","onReset","listConfigurationProperties","groupFor","groups","sort","prop1","prop2","localeCompare","filteredProperties","contextPath","uiContextPath","basename","Page","isManagedSidebar","header","Route","path","exact","component","RootRedirectPage","RulesPage","SettingsPage","ArtifactRedirectPage","location","pathname","NotFoundPage","authenticateAndRender","document","getElementById","AVRO","PROTOBUF","JSON","OPENAPI","ASYNCAPI","GRAPHQL","KCONNECT","WSDL","XSD","XML"],"sourceRoot":""}