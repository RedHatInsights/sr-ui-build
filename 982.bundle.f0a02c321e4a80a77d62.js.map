{"version":3,"file":"982.bundle.f0a02c321e4a80a77d62.js","mappings":"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","sources":["webpack://@apicurio/registry-ui/./src/app/pages/artifactVersion/artifactVersion.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifactVersion/components/modals/editMetaDataModal.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifactVersion/components/pageheader/pageheader.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifactVersion/components/pageheader/version-selector.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifactVersion/components/tabs/content.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifactVersion/components/tabs/documentation.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifactVersion/components/tabs/errorTab.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifactVersion/components/tabs/info.tsx","webpack://@apicurio/registry-ui/./src/app/pages/artifactVersion/components/uploadForm/uploadForm.tsx","webpack://@apicurio/registry-ui/./src/app/pages/basePage.tsx","webpack://@apicurio/registry-ui/./src/app/components/errorPage/accessErrorPage.tsx","webpack://@apicurio/registry-ui/./src/app/components/errorPage/rateLimitErrorPage.tsx"],"sourcesContent":["/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport \"./artifactVersion.css\";\nimport {\n    Breadcrumb,\n    BreadcrumbItem,\n    Button,\n    Modal,\n    PageSection,\n    PageSectionVariants,\n    Tab,\n    Tabs\n} from '@patternfly/react-core';\nimport {PageComponent, PageProps, PageState} from \"../basePage\";\nimport {ContentTabContent, DocumentationTabContent, InfoTabContent} from \"./components/tabs\";\nimport {ArtifactVersionPageHeader} from \"./components/pageheader\";\nimport {UploadVersionForm} from \"./components/uploadForm\";\nimport {Link} from \"react-router-dom\";\nimport {EditMetaDataModal} from \"./components/modals\";\nimport {InvalidContentModal} from \"../../components/modals\";\nimport {IfFeature} from \"../../components\";\nimport {ArtifactMetaData, ArtifactTypes, ContentTypes, Rule, SearchedVersion} from \"../../../models\";\nimport {CreateVersionData, EditableMetaData, Services} from \"../../../services\";\nimport {PleaseWaitModal} from \"../../components/modals/pleaseWaitModal\";\n\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface ArtifactVersionPageProps extends PageProps {\n}\n\n/**\n * State\n */\nexport interface ArtifactVersionPageState extends PageState {\n    activeTabKey: number;\n    artifact: ArtifactMetaData | null;\n    artifactContent: string;\n    artifactIsText: boolean;\n    isInvalidContentModalOpen: boolean;\n    isUploadFormValid: boolean;\n    isUploadModalOpen: boolean;\n    isDeleteModalOpen: boolean;\n    isEditModalOpen: boolean;\n    isPleaseWaitModalOpen: boolean;\n    pleaseWaitMessage: string;\n    rules: Rule[] | null;\n    uploadFormData: string | null;\n    versions: SearchedVersion[] | null;\n    invalidContentError: any | null;\n}\n\nfunction is404(e: any) {\n    if (typeof e === \"string\") {\n        try {\n            const eo: any = JSON.parse(e);\n            if (eo && eo.error_code && eo.error_code === 404) {\n                return true;\n            }\n        } catch (e) {\n            // Do nothing\n        }\n    }\n    return false;\n}\n\n/**\n * The artifact version page.\n */\nexport class ArtifactVersionPage extends PageComponent<ArtifactVersionPageProps, ArtifactVersionPageState> {\n\n    constructor(props: Readonly<ArtifactVersionPageProps>) {\n        super(props);\n    }\n\n    public renderPage(): React.ReactElement {\n        const artifact: ArtifactMetaData = this.state.artifact ? this.state.artifact : new ArtifactMetaData();\n        const tabs: React.ReactNode[] = [\n            <Tab eventKey={0} title=\"Overview\" key=\"overview\" tabContentId=\"tab-info\">\n                <InfoTabContent artifact={artifact}\n                                isLatest={this.versionParam() === \"latest\"}\n                                rules={this.rules()}\n                                onEnableRule={this.doEnableRule}\n                                onDisableRule={this.doDisableRule}\n                                onConfigureRule={this.doConfigureRule}\n                                onDownloadArtifact={this.doDownloadArtifact}\n                                onEditMetaData={this.openEditMetaDataModal}\n                />\n            </Tab>,\n            <Tab eventKey={1} title=\"Documentation\" key=\"documentation\">\n                <DocumentationTabContent artifactContent={this.state.artifactContent} artifactType={artifact.type} />\n            </Tab>,\n            <Tab eventKey={2} title=\"Content\" key=\"content\">\n                <ContentTabContent artifactContent={this.state.artifactContent} artifactType={artifact.type} />\n            </Tab>,\n        ];\n        if (!this.showDocumentationTab()) {\n            tabs.splice(1, 1);\n        }\n\n        let groupId: string = this.groupIdParam();\n        let hasGroup: boolean = groupId != \"default\";\n        let breadcrumbs = (\n            <Breadcrumb>\n                <BreadcrumbItem><Link to={this.linkTo(\"/artifacts\")} data-testid=\"breadcrumb-lnk-artifacts\">Artifacts</Link></BreadcrumbItem>\n                <BreadcrumbItem><Link to={this.linkTo(`/artifacts?group=${ encodeURIComponent(groupId) }`)}\n                                      data-testid=\"breadcrumb-lnk-group\">{ groupId }</Link></BreadcrumbItem>\n                <BreadcrumbItem isActive={true}>{ this.artifactId() }</BreadcrumbItem>\n            </Breadcrumb>\n        );\n        if (!hasGroup) {\n            breadcrumbs = (\n                <Breadcrumb>\n                    <BreadcrumbItem><Link to=\"/artifacts\" data-testid=\"breadcrumb-lnk-artifacts\">Artifacts</Link></BreadcrumbItem>\n                    <BreadcrumbItem isActive={true}>{ this.artifactId() }</BreadcrumbItem>\n                </Breadcrumb>\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <IfFeature feature=\"breadcrumbs\" is={true}>\n                    <PageSection className=\"ps_header-breadcrumbs\" variant={PageSectionVariants.light} children={breadcrumbs} />\n                </IfFeature>\n                <PageSection className=\"ps_artifact-version-header\" variant={PageSectionVariants.light}>\n                    <ArtifactVersionPageHeader title={this.nameOrId()}\n                                               versions={this.versions()}\n                                               version={this.versionParam()}\n                                               onUploadVersion={this.onUploadVersion}\n                                               onDeleteArtifact={this.onDeleteArtifact}\n                                               groupId={groupId}\n                                               artifactId={this.artifactId()} />\n                </PageSection>\n                <PageSection variant={PageSectionVariants.light} isFilled={true} padding={{default : \"noPadding\"}} className=\"artifact-details-main\">\n                    <Tabs className=\"artifact-page-tabs\"\n                          id=\"artifact-page-tabs\"\n                          unmountOnExit={true}\n                          isFilled={false}\n                          activeKey={this.state.activeTabKey}\n                          children={tabs}\n                          onSelect={this.handleTabClick}\n                    />\n                </PageSection>\n                <Modal\n                    title=\"Upload Artifact Version\"\n                    variant=\"large\"\n                    isOpen={this.state.isUploadModalOpen}\n                    onClose={this.onUploadModalClose}\n                    className=\"upload-artifact-modal pf-m-redhat-font\"\n                    actions={[\n                        <Button key=\"upload\" variant=\"primary\" data-testid=\"modal-btn-upload\" onClick={this.doUploadArtifactVersion} isDisabled={!this.state.isUploadFormValid}>Upload</Button>,\n                        <Button key=\"cancel\" variant=\"link\" data-testid=\"modal-btn-cancel\" onClick={this.onUploadModalClose}>Cancel</Button>\n                    ]}\n                >\n                    <UploadVersionForm onChange={this.onUploadFormChange} onValid={this.onUploadFormValid} />\n                </Modal>\n                <Modal\n                    title=\"Delete Artifact\"\n                    variant=\"small\"\n                    isOpen={this.state.isDeleteModalOpen}\n                    onClose={this.onDeleteModalClose}\n                    className=\"delete-artifact-modal pf-m-redhat-font\"\n                    actions={[\n                        <Button key=\"delete\" variant=\"primary\" data-testid=\"modal-btn-delete\" onClick={this.doDeleteArtifact}>Delete</Button>,\n                        <Button key=\"cancel\" variant=\"link\" data-testid=\"modal-btn-cancel\" onClick={this.onDeleteModalClose}>Cancel</Button>\n                    ]}\n                >\n                    <p>Do you want to delete this artifact and all of its versions?  This action cannot be undone.</p>\n                </Modal>\n                <EditMetaDataModal name={this.artifactName()}\n                                   description={this.artifactDescription()}\n                                   labels={this.artifactLabels()}\n                                   properties={this.artifactProperties()}\n                                   isOpen={this.state.isEditModalOpen}\n                                   onClose={this.onEditModalClose}\n                                   onEditMetaData={this.doEditMetaData}\n                />\n                <InvalidContentModal error={this.state.invalidContentError}\n                                     isOpen={this.state.isInvalidContentModalOpen}\n                                     onClose={this.closeInvalidContentModal} />\n                <PleaseWaitModal message={this.state.pleaseWaitMessage}\n                                 isOpen={this.state.isPleaseWaitModalOpen} />\n            </React.Fragment>\n        );\n    }\n\n    protected initializePageState(): ArtifactVersionPageState {\n        return {\n            activeTabKey: 0,\n            artifact: null,\n            artifactContent: \"\",\n            artifactIsText: true,\n            invalidContentError: null,\n            isDeleteModalOpen: false,\n            isEditModalOpen: false,\n            isInvalidContentModalOpen: false,\n            isPleaseWaitModalOpen: false,\n            isUploadFormValid: false,\n            isUploadModalOpen: false,\n            pleaseWaitMessage: \"\",\n            rules: null,\n            uploadFormData: null,\n            versions: null\n        };\n    }\n\n    protected groupIdParam(): string {\n        return this.getPathParam(\"groupId\");\n    }\n\n    protected artifactIdParam(): string {\n        return this.getPathParam(\"artifactId\");\n    }\n\n    protected versionParam(): string {\n        return this.getPathParam(\"version\");\n    }\n\n    // @ts-ignore\n    protected createLoaders(): Promise[] | null {\n        let groupId: string|null = this.groupIdParam();\n        if (groupId == \"default\") {\n            groupId = null;\n        }\n        const artifactId: string = this.artifactIdParam();\n        Services.getLoggerService().info(\"Loading data for artifact: \", artifactId);\n        return [\n            Services.getGroupsService().getArtifactMetaData(groupId, artifactId, this.versionParam()).then(md => this.setSingleState(\"artifact\", md)),\n            Services.getGroupsService().getArtifactContent(groupId, artifactId, this.versionParam())\n                .then(content => this.setSingleState(\"artifactContent\", content))\n                .catch(e => {\n                    Services.getLoggerService().warn(\"Failed to get artifact content: \", e);\n                    if (is404(e)) {\n                        this.setSingleState(\"artifactContent\", \"Artifact version content not available (404 Not Found).\");\n                    } else {\n                        throw e;\n                    }\n                }\n            ),\n            Services.getGroupsService().getArtifactRules(groupId, artifactId).then(rules => this.setSingleState(\"rules\", rules)),\n            Services.getGroupsService().getArtifactVersions(groupId, artifactId).then(versions => this.setSingleState(\"versions\", versions.reverse()))\n        ];\n    }\n\n    private handleTabClick = (event: any, tabIndex: any): void => {\n        this.setSingleState(\"activeTabKey\", tabIndex);\n    };\n\n    private onUploadVersion = (): void => {\n        this.setSingleState(\"isUploadModalOpen\", true);\n    };\n\n    private onDeleteArtifact = (): void => {\n        this.setSingleState(\"isDeleteModalOpen\", true);\n    };\n\n    private showDocumentationTab(): boolean {\n        if (this.state.artifact) {\n            return this.state.artifact.type === \"OPENAPI\" && this.state.artifact.state !== \"DISABLED\";\n        } else {\n            return false;\n        }\n    }\n\n    private rules(): Rule[] {\n        return this.state.rules ? this.state.rules : [];\n    }\n\n    private doEnableRule = (ruleType: string): void => {\n        Services.getLoggerService().debug(\"[ArtifactVersionPage] Enabling rule:\", ruleType);\n        let config: string = \"FULL\";\n        if (ruleType === \"COMPATIBILITY\") {\n            config = \"BACKWARD\";\n        }\n        Services.getGroupsService().createArtifactRule(this.groupId(), this.artifactId(), ruleType, config).catch(error => {\n            this.handleServerError(error, `Error enabling \"${ ruleType }\" artifact rule.`);\n        });\n        this.setSingleState(\"rules\", [...this.rules(), {config, type: ruleType}]);\n    };\n\n    private doDisableRule = (ruleType: string): void => {\n        Services.getLoggerService().debug(\"[ArtifactVersionPage] Disabling rule:\", ruleType);\n        Services.getGroupsService().deleteArtifactRule(this.groupId(), this.artifactId(), ruleType).catch(error => {\n            this.handleServerError(error, `Error disabling \"${ ruleType }\" artifact rule.`);\n        });\n        this.setSingleState(\"rules\", this.rules().filter(r => r.type !== ruleType));\n    };\n\n    private doConfigureRule = (ruleType: string, config: string): void => {\n        Services.getLoggerService().debug(\"[ArtifactVersionPage] Configuring rule:\", ruleType, config);\n        Services.getGroupsService().updateArtifactRule(this.groupId(), this.artifactId(), ruleType, config).catch(error => {\n            this.handleServerError(error, `Error configuring \"${ ruleType }\" artifact rule.`);\n        });\n        this.setSingleState(\"rules\", this.rules().map(r => {\n            if (r.type === ruleType) {\n                return {config, type: r.type};\n            } else {\n                return r;\n            }\n        }));\n    };\n\n    private doDownloadArtifact = (): void => {\n        const content: string = this.state.artifactContent;\n\n        let contentType: string = ContentTypes.APPLICATION_JSON;\n        let fext: string = \"json\";\n        if (this.state.artifact?.type === ArtifactTypes.PROTOBUF) {\n            contentType = ContentTypes.APPLICATION_PROTOBUF;\n            fext = \"proto\";\n        }\n        if (this.state.artifact?.type === ArtifactTypes.WSDL) {\n            contentType = ContentTypes.APPLICATION_XML;\n            fext = \"wsdl\";\n        }\n        if (this.state.artifact?.type === ArtifactTypes.XSD) {\n            contentType = ContentTypes.APPLICATION_XML;\n            fext = \"xsd\";\n        }\n        if (this.state.artifact?.type === ArtifactTypes.XML) {\n            contentType = ContentTypes.APPLICATION_XML;\n            fext = \"xml\";\n        }\n        if (this.state.artifact?.type === ArtifactTypes.GRAPHQL) {\n            contentType = ContentTypes.APPLICATION_JSON;\n            fext = \"graphql\";\n        }\n\n        const fname: string = this.artifactNameOrId() + \".\" + fext;\n        Services.getDownloaderService().downloadToFS(content, contentType, fname);\n    };\n\n    private nameOrId(): string {\n        if (!this.state.artifact) {\n            return \"\";\n        }\n        return this.state.artifact.name ? this.state.artifact.name : this.state.artifact.id;\n    }\n\n    private versions(): SearchedVersion[] {\n        return this.state.versions ? this.state.versions : [];\n    }\n\n    private artifactId(): string {\n        return this.state.artifact ? this.state.artifact.id : \"\";\n    }\n\n    private groupId(): string|null {\n        return this.state.artifact ? this.state.artifact.groupId : null;\n    }\n\n    private artifactType(): string {\n        return this.state.artifact ? this.state.artifact.type : \"\";\n    }\n\n    private artifactNameOrId(): string {\n        return this.state.artifact ? (\n            this.state.artifact.name ? this.state.artifact.name : this.state.artifact.id\n        ) : \"\";\n    }\n\n    private artifactName(): string {\n        return this.state.artifact ? (\n            this.state.artifact.name ? this.state.artifact.name : \"\"\n        ) : \"\";\n    }\n\n    private artifactDescription(): string {\n        return this.state.artifact ? (\n            this.state.artifact.description ? this.state.artifact.description : \"\"\n        ) : \"\";\n    }\n\n    private artifactLabels(): string[] {\n        return this.state.artifact ? (\n            this.state.artifact.labels ? this.state.artifact.labels : []\n        ) : [];\n    }\n\n    private artifactProperties(): { [key: string]: string } {\n        return this.state.artifact?.properties || {};\n    }\n\n    private onUploadFormValid = (isValid: boolean): void => {\n        this.setSingleState(\"isUploadFormValid\", isValid);\n    };\n\n    private onUploadFormChange = (data: string): void => {\n        this.setSingleState(\"uploadFormData\", data);\n    };\n\n    private onUploadModalClose = (): void => {\n        this.setSingleState(\"isUploadModalOpen\", false);\n    };\n\n    private onDeleteModalClose = (): void => {\n        this.setSingleState(\"isDeleteModalOpen\", false);\n    };\n\n    private doUploadArtifactVersion = (): void => {\n        this.onUploadModalClose();\n        this.pleaseWait(true, \"Uploading new version, please wait...\");\n        if (this.state.uploadFormData !== null) {\n            const data: CreateVersionData = {\n                content: this.state.uploadFormData,\n                type: this.artifactType()\n            };\n            Services.getGroupsService().createArtifactVersion(this.groupId(), this.artifactId(), data).then(versionMetaData => {\n                const groupId: string = versionMetaData.groupId ? versionMetaData.groupId : \"default\";\n                const artifactVersionLocation: string = `/artifacts/${ encodeURIComponent(groupId) }/${ encodeURIComponent(versionMetaData.id) }/versions/${versionMetaData.version}`;\n                Services.getLoggerService().info(\"[ArtifactVersionPage] Artifact version successfully uploaded.  Redirecting to details: \", artifactVersionLocation);\n                this.navigateTo(this.linkTo(artifactVersionLocation))();\n            }).catch( error => {\n                this.pleaseWait(false, \"\");\n                if (error && (error.error_code === 400 || error.error_code === 409)) {\n                    this.handleInvalidContentError(error);\n                } else {\n                    this.handleServerError(error, \"Error uploading artifact version.\");\n                }\n                this.setMultiState({uploadFormData: null, isUploadFormValid: false});\n            });\n        }\n    };\n\n    private doDeleteArtifact = (): void => {\n        this.onDeleteModalClose();\n        this.pleaseWait(true, \"Deleting artifact, please wait...\");\n        Services.getGroupsService().deleteArtifact(this.groupId(), this.artifactId()).then( () => {\n            this.pleaseWait(false, \"\");\n            this.navigateTo(this.linkTo(\"/artifacts\"))();\n        });\n    };\n\n    private openEditMetaDataModal = (): void => {\n        this.setSingleState(\"isEditModalOpen\", true);\n    };\n\n    private onEditModalClose = (): void => {\n        this.setSingleState(\"isEditModalOpen\", false);\n    };\n\n    private doEditMetaData = (metaData: EditableMetaData): void => {\n        Services.getGroupsService().updateArtifactMetaData(this.groupId(), this.artifactId(), this.versionParam(), metaData).then( () => {\n            if (this.state.artifact) {\n                this.setSingleState(\"artifact\", {\n                    ...this.state.artifact,\n                    ...metaData\n                });\n            }\n        }).catch( error => {\n            this.handleServerError(error, \"Error editing artifact metadata.\");\n        });\n        this.onEditModalClose();\n    };\n\n    private closeInvalidContentModal = (): void => {\n        this.setSingleState(\"isInvalidContentModalOpen\", false);\n    };\n\n    private pleaseWait = (isOpen: boolean, message: string): void => {\n        this.setMultiState({\n            isPleaseWaitModalOpen: isOpen,\n            pleaseWaitMessage: message\n        });\n    };\n\n    private handleInvalidContentError(error: any): void {\n        Services.getLoggerService().info(\"INVALID CONTENT ERROR\", error);\n        this.setMultiState({\n            invalidContentError: error,\n            isInvalidContentModalOpen: true\n        });\n    }\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from 'react';\nimport \"./editMetaDataModal.css\";\nimport { PureComponent, PureComponentProps, PureComponentState } from \"../../../../components\";\nimport { Button, Form, FormGroup, Grid, GridItem, Modal, TextArea, TextInput, TextInputProps } from \"@patternfly/react-core\";\nimport { MinusCircleIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { EditableMetaData } from '../../../../../services';\n\n\n/**\n * Properties\n */\nexport interface EditMetaDataModalProps extends PureComponentProps {\n    name: string;\n    description: string;\n    labels: string[];\n    properties: { [key: string]: string };\n    isOpen: boolean;\n    onClose: () => void;\n    onEditMetaData: (metaData: EditableMetaData) => void;\n}\n\ntype ValidatedValue = \"error\" | \"default\" | \"warning\" | \"success\" | undefined;\n\nconst initialFormState = {\n    hasErrors: false,\n    newPropertyKey: {\n        value: \"\",\n        validated: 'default' as ValidatedValue,\n        errorMessage: \"\"\n    },\n    newArtifactPropertyValue: {\n        value: \"\",\n        validated: 'default' as ValidatedValue,\n        errorMessage: \"\"\n    }\n};\n\n/**\n * State\n */\nexport interface EditMetaDataModalState extends PureComponentState {\n    labels: string;\n    formState: {\n        newPropertyKey: {\n            value: string;\n            errorMessage: string;\n            validated: ValidatedValue;\n        }\n        newArtifactPropertyValue: {\n            value: string;\n            errorMessage: string;\n            validated: ValidatedValue;\n        }\n        hasErrors: boolean;\n    }\n    metaData: EditableMetaData;\n}\n\n/**\n * Models the toolbar for the Artifacts page.\n */\nexport class EditMetaDataModal extends PureComponent<EditMetaDataModalProps, EditMetaDataModalState> {\n\n    constructor(props: Readonly<EditMetaDataModalProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <Modal\n                title=\"Edit version metadata\"\n                variant=\"large\"\n                isOpen={this.props.isOpen}\n                onClose={this.props.onClose}\n                className=\"edit-artifact-metaData pf-m-redhat-font\"\n                actions={[\n                    <Button key=\"edit\" variant=\"primary\" data-testid=\"modal-btn-edit\" onClick={this.doEdit} isDisabled={this.state.formState.hasErrors}>Save</Button>,\n                    <Button key=\"cancel\" variant=\"link\" data-testid=\"modal-btn-cancel\" onClick={this.props.onClose}>Cancel</Button>\n                ]}\n            >\n                <p>Use the form below to update the Name and Description of the artifact.</p>\n                <Form>\n                    <Grid hasGutter md={6}>\n                        <GridItem span={12}>\n                            <FormGroup\n                                label=\"Name\"\n                                fieldId=\"form-name\"\n                            >\n                                <TextInput\n                                    isRequired={false}\n                                    type=\"text\"\n                                    id=\"form-name\"\n                                    data-testid=\"form-name\"\n                                    name=\"form-name\"\n                                    aria-describedby=\"form-name-helper\"\n                                    value={this.state.metaData.name}\n                                    placeholder=\"Name of the artifact\"\n                                    onChange={this.onNameChange}\n                                />\n                            </FormGroup>\n                        </GridItem>\n\n                        <GridItem span={12}>\n                            <FormGroup\n                                label=\"Description\"\n                                fieldId=\"form-description\"\n                            >\n                                <TextArea\n                                    isRequired={false}\n                                    id=\"form-description\"\n                                    data-testid=\"form-description\"\n                                    name=\"form-description\"\n                                    aria-describedby=\"form-description-helper\"\n                                    value={this.state.metaData.description}\n                                    placeholder=\"Description of the artifact\"\n                                    onChange={this.onDescriptionChange}\n                                />\n                            </FormGroup>\n                        </GridItem>\n\n                        <GridItem span={12}>\n                            <FormGroup\n                                label=\"Labels\"\n                                fieldId=\"form-labels\"\n                                helperText=\"A comma-separated list of labels to apply to the artifact.\"\n                            >\n                                <TextInput\n                                    isRequired={false}\n                                    type=\"text\"\n                                    id=\"form-labels\"\n                                    data-testid=\"form-labels\"\n                                    name=\"form-labels\"\n                                    aria-describedby=\"form-labels-helper\"\n                                    value={this.state.labels}\n                                    placeholder=\"Artifact labels\"\n                                    onChange={this.onLabelsChange}\n                                />\n                            </FormGroup>\n                        </GridItem>\n                        {this.renderExistingArtifactPropertiesInForm()}\n                        <FormGroup\n                            fieldId=\"form-properties-key\"\n                            validated={this.state.formState.newPropertyKey.validated}\n                            helperTextInvalid={this.state.formState.newPropertyKey.errorMessage}\n                            label={Object.keys(this.state.metaData.properties).length == 0 ? 'Key' : ''}>\n                            <TextInput\n                                type=\"text\"\n                                placeholder='Enter key'\n                                id=\"form-properties-key\"\n                                name=\"form-properties-key\"\n                                validated={this.state.formState.newPropertyKey.validated}\n                                value={this.state.formState.newPropertyKey.value}\n                                onChange={(newVal) => this.updateArtifactPropertyFormKey(newVal)}\n                            />\n                        </FormGroup>\n                        <FormGroup\n                            fieldId=\"form-properties-value\"\n                            label={Object.keys(this.state.metaData.properties).length == 0 ? 'Value' : ''}\n                            validated={this.state.formState.newArtifactPropertyValue.validated}\n                            helperTextInvalid={this.state.formState.newArtifactPropertyValue.errorMessage}\n                        >\n                            <div className='prop-value-group'>\n                                <TextInput\n                                    type=\"text\"\n                                    id=\"form-properties-value\"\n                                    placeholder=\"Enter value\"\n                                    name=\"form-properties-value\"\n                                    validated={this.state.formState.newArtifactPropertyValue.validated}\n                                    value={this.state.formState.newArtifactPropertyValue.value}\n                                    onChange={(newVal) => this.updateArtifactPropertyFormValue(newVal)}\n                                />\n                                <Button key={'remove-button-new'} variant=\"link\" icon={<MinusCircleIcon />} iconPosition=\"right\" className='pf-m-plain' isDisabled />\n                            </div>\n                        </FormGroup>\n                        <GridItem span={12}>\n                            <Button variant=\"link\" icon={<PlusCircleIcon />} className=\"add-property-button\" onClick={() => this.addArtifactProperty(this.state.formState.newPropertyKey.value, this.state.formState.newArtifactPropertyValue.value)}>\n                                Add property\n                            </Button>{' '}\n                        </GridItem>\n                    </Grid>\n                </Form>\n            </Modal>\n        );\n    }\n\n    public componentDidUpdate(prevProps: Readonly<EditMetaDataModalProps>): void {\n        if (this.props.isOpen && !prevProps.isOpen) {\n            this.setMultiState({\n                labels: this.props.labels.join(\", \"),\n                metaData: {\n                    description: this.props.description,\n                    labels: this.props.labels,\n                    properties: this.props.properties,\n                    name: this.props.name\n                }\n            });\n        }\n    }\n\n    protected initializeState(): EditMetaDataModalState {\n        return {\n            labels: \"\",\n            formState: initialFormState,\n            metaData: {\n                description: \"\",\n                labels: [],\n                properties: {},\n                name: \"\"\n            }\n        };\n    }\n\n    private labels(): string {\n        if (this.state.metaData.labels) {\n            return this.state.metaData.labels.join(\", \");\n        } else {\n            return \"\";\n        }\n    }\n\n    private doEdit = (): void => {\n        this.props.onEditMetaData(this.state.metaData);\n    };\n\n    private onNameChange = (value: string): void => {\n        this.setSingleState(\"metaData\", {\n            ...this.state.metaData,\n            name: value\n        });\n    };\n\n    private onLabelsChange = (value: string): void => {\n        let labels: string[] = [];\n        if (value && value.trim().length > 0) {\n            labels = value.trim().split(\",\").map(item => item.trim());\n        }\n        this.setMultiState({\n            labels: value,\n            metaData: {\n                ...this.state.metaData,\n                labels\n            }\n        });\n    };\n\n    private onDescriptionChange = (value: string): void => {\n        this.setSingleState(\"metaData\", {\n            ...this.state.metaData,\n            description: value\n        });\n    };\n\n    private renderExistingArtifactPropertiesInForm = () => {\n        const rows = Object.keys(this.state.metaData.properties).map((k: string, i: number) => {\n            return <React.Fragment key={k}>\n                <FormGroup fieldId={'form-properties-key' + k} label={i == 0 ? 'Key' : ''}>\n                    <TextInput\n                        type=\"text\"\n                        isDisabled\n                        placeholder='Enter key'\n                        id={'form-properties-key' + k}\n                        name={'form-properties-key' + k}\n                        value={k}\n                    />\n                </FormGroup>\n                <FormGroup fieldId={'form-properties-value' + k} label={i == 0 ? 'Value' : ''}>\n                    <div className='prop-value-group'>\n\n                        <TextInput\n                            type=\"text\"\n                            id={'form-properties-value' + k}\n                            placeholder=\"Enter value\"\n                            name={'form-properties-value' + k}\n                            value={this.state.metaData.properties[k]}\n                            onChange={(newVal) => this.updateArtifactPropertyValue(k, newVal)}\n                        />\n                        <Button key={'remove-button-' + k} variant=\"link\" icon={<MinusCircleIcon />} iconPosition=\"right\" className='pf-m-plain' onClick={() => this.removeArtifactProperty(k)} />\n                    </div>\n                </FormGroup>\n            </React.Fragment>\n        });\n\n        return rows;\n    }\n\n    /**\n     * Update the form value for the artifact property key\n     * @param key \n     */\n    private updateArtifactPropertyFormKey(key: string) {\n        let validated: ValidatedValue = 'default';\n        let errorMessage: string = '';\n        if (this.state.metaData.properties[key]) {\n            errorMessage = `Key '${key}' is already in use`;\n            validated = 'error';\n        } else {\n            errorMessage = '';\n        }\n\n        const propertyValueErrorData = this.getPropertyValueErrorInfo(this.state.formState.newArtifactPropertyValue.value, key);\n\n        this.setMultiState({\n            ...this.state,\n            formState: {\n                ...this.state.formState,\n                hasErrors: errorMessage != '',\n                newPropertyKey: {\n                    ...this.state.formState.newPropertyKey,\n                    errorMessage: errorMessage,\n                    value: key,\n                    validated,\n                },\n                newArtifactPropertyValue: {\n                    value: this.state.formState.newArtifactPropertyValue.value,\n                    errorMessage: propertyValueErrorData.errorMessage,\n                    validated: propertyValueErrorData.validated\n                }\n            }\n        })\n    }\n\n    /**\n     * Update the form value for the artifact property value\n     * @param value \n     */\n    private updateArtifactPropertyFormValue(value: string = '') {\n        const errorData = this.getPropertyValueErrorInfo(value, this.state.formState.newPropertyKey.value);\n\n        this.setMultiState({\n            ...this.state,\n            formState: {\n                ...this.state.formState,\n                hasErrors: errorData.errorMessage != '',\n                newArtifactPropertyValue: {\n                    ...this.state.formState.newArtifactPropertyValue,\n                    value,\n                    errorMessage: errorData.errorMessage,\n                    validated: errorData.validated,\n                }\n            }\n        })\n    }\n\n    private updateArtifactPropertyValue(key: string, value: string) {\n        const metadata: EditableMetaData = { ...this.state.metaData };\n        metadata.properties[key] = value;\n        this.setSingleState('metaData', metadata);\n    }\n\n    private removeArtifactProperty(key: string) {\n        const metadata = Object.assign({}, this.state.metaData);\n        delete metadata.properties[key];\n        this.setSingleState('metaData', metadata);\n    }\n\n    private addArtifactProperty(key: string, value: string) {\n        const metadata = Object.assign({}, this.state.metaData);\n        metadata.properties[key] = value;\n        this.setMultiState({\n            ...this.state,\n            metaData: metadata,\n            formState: initialFormState,\n        })\n    }\n\n    /**\n     * Calculate the error values for the artifact property form value\n     * @param value \n     * @param key \n     * @returns \n     */\n    private getPropertyValueErrorInfo(value: string, key: string): { errorMessage: string, validated: ValidatedValue } {\n        if (value === '' && key !== '') {\n            return {\n                errorMessage: `Key '${key}' must have a corresponding value`,\n                validated: 'error'\n            }\n        }\n        return {\n            errorMessage: '',\n            validated: 'default'\n        }\n    }\n}","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./pageheader.css\";\nimport {\n    Button,\n    Flex,\n    FlexItem,\n    Text,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\nimport {IfAuth, PureComponent, PureComponentProps, PureComponentState} from \"../../../../components\";\nimport {VersionSelector} from \"./version-selector\";\nimport {TrashIcon} from \"@patternfly/react-icons\";\nimport {IfFeature} from \"../../../../components/common/ifFeature\";\nimport {SearchedVersion} from \"../../../../../models\";\n\n\n/**\n * Properties\n */\nexport interface ArtifactVersionPageHeaderProps extends PureComponentProps {\n    title: string;\n    groupId: string;\n    artifactId: string;\n    onDeleteArtifact: () => void;\n    onUploadVersion: () => void;\n    version: string;\n    versions: SearchedVersion[];\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface ArtifactVersionPageHeaderState extends PureComponentState {\n}\n\n\n/**\n * Models the page header for the Artifact page.\n */\nexport class ArtifactVersionPageHeader extends PureComponent<ArtifactVersionPageHeaderProps, ArtifactVersionPageHeaderState> {\n\n    constructor(props: Readonly<ArtifactVersionPageHeaderProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <Flex className=\"example-border\">\n                <FlexItem>\n                    <TextContent>\n                        <Text component={TextVariants.h1}>{ this.props.title }</Text>\n                    </TextContent>\n                </FlexItem>\n                <FlexItem align={{ default : 'alignRight' }}>\n                    <VersionSelector version={this.props.version} versions={this.props.versions}\n                                     groupId={this.props.groupId} artifactId={this.props.artifactId} />\n                    <IfAuth isDeveloper={true}>\n                        <IfFeature feature=\"readOnly\" isNot={true}>\n                            <Button id=\"delete-artifact-button\" variant=\"secondary\" data-testid=\"header-btn-delete\" onClick={this.props.onDeleteArtifact}>Delete</Button>\n                            <Button id=\"upload-version-button\" variant=\"primary\" data-testid=\"header-btn-upload-version\" onClick={this.props.onUploadVersion}>Upload new version</Button>\n                        </IfFeature>\n                    </IfAuth>\n                </FlexItem>\n            </Flex>\n        );\n    }\n\n    protected initializeState(): ArtifactVersionPageHeaderState {\n        return {};\n    }\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./version-selector.css\";\nimport {Button, ButtonVariant, Dropdown, DropdownToggle, InputGroup, TextInput} from '@patternfly/react-core';\nimport {PureComponent, PureComponentProps, PureComponentState} from \"../../../../components\";\nimport {SearchIcon} from \"@patternfly/react-icons\";\nimport Moment from \"react-moment\";\nimport {Link} from \"react-router-dom\";\nimport {SearchedVersion} from \"../../../../../models\";\nimport {Services} from \"../../../../../services\";\n\n\n/**\n * Properties\n */\nexport interface VersionSelectorProps extends PureComponentProps {\n    groupId: string;\n    artifactId: string;\n    version: string;\n    versions: SearchedVersion[];\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface VersionSelectorState extends PureComponentState {\n    isOpen: boolean;\n}\n\n\n/**\n * Models the page header for the Artifact page.\n */\nexport class VersionSelector extends PureComponent<VersionSelectorProps, VersionSelectorState> {\n\n    constructor(props: Readonly<VersionSelectorProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <Dropdown\n                className={this.dropdownClasses()}\n                toggle={<DropdownToggle data-testid=\"versions-toggle\" onToggle={this.onToggle}>Version: { this.props.version }</DropdownToggle>}\n                isOpen={this.state.isOpen}\n            >\n                <div className=\"version-filter\" style={{display: \"none\"}}>\n                    <InputGroup>\n                        <TextInput name=\"filter\" id=\"versionFilter\" type=\"search\" data-testid=\"versions-form-filter\" aria-label=\"Version filter\" />\n                        <Button variant={ButtonVariant.control} data-testid=\"versions-form-btn-search\" aria-label=\"search button for search input\">\n                            <SearchIcon />\n                        </Button>\n                    </InputGroup>\n                </div>\n                <div className=\"version-header\">\n                    <div className=\"version-item\">\n                        <span className=\"name\">Version</span>\n                        <span className=\"date\">Created On</span>\n                    </div>\n                </div>\n                <div className=\"version-list\">\n                    <Link key=\"latest\"\n                          data-testid=\"versions-lnk-latest\"\n                          to={this.linkTo(`/artifacts/${encodeURIComponent(this.props.groupId)}/${encodeURIComponent(this.props.artifactId)}/versions/latest`)}\n                          className=\"version-item latest\">\n                        <span className=\"name\">latest</span>\n                        <span className=\"date\" />\n                    </Link>\n                    {\n                        this.props.versions.map((v, idx) =>\n                            <Link key={v.version}\n                                  data-testid={`versions-lnk-${idx}`}\n                                  to={this.linkTo(`/artifacts/${encodeURIComponent(this.props.groupId)}/${encodeURIComponent(this.props.artifactId)}/versions/${v.version}`)}\n                                  className=\"version-item\">\n                                <span className=\"name\">{ v.version }</span>\n                                <span className=\"date\"><Moment date={v.createdOn} fromNow={true} /></span>\n                            </Link>\n                        )\n                    }\n                </div>\n            </Dropdown>\n        );\n    }\n\n    protected initializeState(): VersionSelectorState {\n        return {\n            isOpen: false\n        };\n    }\n\n    private dropdownClasses(): string {\n        const classes: string[] = [ \"version-selector-dropdown\" ];\n        if (Services.getConfigService().featureReadOnly()) {\n            classes.push(\"dropdown-align-right\");\n        }\n        return classes.join(' ');\n    }\n\n    private onToggle = (isOpen: boolean): void => {\n        this.setSingleState(\"isOpen\", isOpen);\n    };\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./content.css\";\nimport {PureComponent, PureComponentProps, PureComponentState} from \"../../../../components\";\nimport AceEditor from \"react-ace\";\nimport \"ace-builds/src-noconflict/mode-json\";\nimport \"ace-builds/src-noconflict/mode-protobuf\";\nimport \"ace-builds/src-noconflict/mode-xml\";\nimport \"ace-builds/src-noconflict/mode-graphqlschema\";\nimport \"ace-builds/src-noconflict/theme-monokai\";\n\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface ContentTabContentProps extends PureComponentProps {\n    artifactContent: string;\n    artifactType: string;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface ContentTabContentState extends PureComponentState {\n    content: string;\n    editorWidth: string;\n    editorHeight: string;\n}\n\n\n/**\n * Models the content of the Artifact Info tab.\n */\nexport class ContentTabContent extends PureComponent<ContentTabContentProps, ContentTabContentState> {\n\n    constructor(props: Readonly<ContentTabContentProps>) {\n        super(props);\n    }\n\n    public componentDidMount(): void {\n        // TODO do this again whenever the browser is resized!\n        const elem: HTMLElement|null = document.getElementById(\"ace-wrapper\");\n        if (elem) {\n            const height: number|null = elem.clientHeight;\n            if (height) {\n                this.setSingleState(\"editorHeight\", height + \"px\");\n            }\n        }\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <div className=\"ace-wrapper\" id=\"ace-wrapper\">\n                <AceEditor\n                    data-testid=\"ace-content\"\n                    mode={this.editorMode()}\n                    theme=\"monokai\"\n                    name=\"artifactContent\"\n                    className=\"artifactContent\"\n                    width={this.state.editorWidth}\n                    height={this.state.editorHeight}\n                    fontSize={14}\n                    showPrintMargin={false}\n                    showGutter={true}\n                    highlightActiveLine={false}\n                    value={this.state.content}\n                    readOnly={true}\n                    setOptions={{\n                        enableBasicAutocompletion: false,\n                        enableLiveAutocompletion: false,\n                        enableSnippets: false,\n                        showLineNumbers: true,\n                        tabSize: 2,\n                        useWorker: false\n                    }}\n                />\n            </div>\n        );\n    }\n\n    protected initializeState(): ContentTabContentState {\n        return {\n            content: this.formatContent(),\n            editorHeight: \"500px\",\n            editorWidth: \"100%\"\n        };\n    }\n\n    private editorMode(): string {\n        if (this.props.artifactType === \"PROTOBUF\") {\n            return \"protobuf\";\n        }\n        if (this.props.artifactType === \"WSDL\" || this.props.artifactType === \"XSD\" || this.props.artifactType === \"XML\") {\n            return \"xml\";\n        }\n        if (this.props.artifactType === \"GRAPHQL\") {\n            return \"graphqlschema\";\n        }\n        return \"json\";\n    }\n\n    private formatContent(): string {\n        try {\n            const pval: any = JSON.parse(this.props.artifactContent);\n            if (pval) {\n                return JSON.stringify(pval, null, 2);\n            }\n        } catch (e) {\n            // Do nothing\n        }\n        return this.props.artifactContent;\n    }\n\n}\n\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./documentation.css\";\nimport {PureComponent, PureComponentProps, PureComponentState} from \"../../../../components\";\nimport {RedocStandalone} from \"redoc\";\nimport { ErrorTabContent } from \"./errorTab\";\nimport { Services } from \"src/services\";\n\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface DocumentationTabContentProps extends PureComponentProps {\n    artifactContent: string;\n    artifactType: string;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface DocumentationTabContentState extends PureComponentState {\n    parsedContent: any | undefined;\n    error: any | undefined\n}\n\n\n/**\n * Models the content of the Artifact Info tab.\n */\nexport class DocumentationTabContent extends PureComponent<DocumentationTabContentProps, DocumentationTabContentState> {\n\n    constructor(props: Readonly<DocumentationTabContentProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        if (this.isError()){\n            return <ErrorTabContent error={{errorMessage: \"Artifact isn't a valid OpenAPI structure\", error: this.state.error}}/>\n        }\n\n        let visualizer: React.ReactElement | null = null;\n        if (this.props.artifactType === \"OPENAPI\") {\n            visualizer = <RedocStandalone spec={this.state.parsedContent} />;\n        }\n\n        if (visualizer !== null) {\n            return visualizer;\n        } else {\n            return <h1>Unsupported Type: { this.props.artifactType }</h1>\n        }\n    }\n\n    protected initializeState(): DocumentationTabContentState {\n        try {\n            return {\n                parsedContent: JSON.parse(this.props.artifactContent),\n                error: undefined\n            };\n        } catch(ex) {\n            Services.getLoggerService().warn(\"Failed to parse content:\");\n            Services.getLoggerService().error(ex);\n            return {\n                parsedContent: undefined,\n                error: ex\n            };\n        }\n        \n    }\n\n    private isError() : boolean {\n        if(this.state.error){\n            return true;\n        }else{\n            return false;\n        }\n    }\n}\n","import React, { ReactNode } from \"react\";\nimport {PureComponent, PureComponentProps, PureComponentState} from \"../../../../components\";\nimport AceEditor from \"react-ace\";\nimport \"ace-builds/src-noconflict/mode-text\";\nimport \"ace-builds/src-noconflict/theme-tomorrow\";\nimport { Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateSecondaryActions, EmptyStateVariant, Title } from \"@patternfly/react-core\";\nimport { ExclamationTriangleIcon } from \"@patternfly/react-icons\";\n\nexport interface TabError {\n    errorMessage: string,\n    error: any\n}\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface ErrorTabContentProps extends PureComponentProps {\n    error?: TabError | undefined\n    children?: ReactNode\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface ErrorTabContentState extends PureComponentState {\n    isShowDetails: boolean;\n    editorWidth: string;\n    editorHeight: string;   \n}\n\n\nexport class ErrorTabContent extends PureComponent<ErrorTabContentProps, ErrorTabContentState> {\n\n    constructor(props: Readonly<ErrorTabContentProps>) {\n        super(props);\n    }\n\n    public render() {\n        return (\n            <div className=\"centerizer\">\n                    <EmptyState variant={EmptyStateVariant.large}>\n                            <EmptyStateIcon icon={ExclamationTriangleIcon} />\n                            <Title headingLevel=\"h5\" size=\"lg\">{ this.errorMessage() }</Title>\n                            <EmptyStateBody>\n                                { this.errorDescription() }\n                            </EmptyStateBody>\n                            <EmptyStateSecondaryActions>\n                                <Button variant=\"link\"\n                                        data-testid=\"error-btn-details\"\n                                        onClick={this.showDetails}>Show details</Button>\n                            </EmptyStateSecondaryActions>\n                        </EmptyState>\n                        <div className=\"separator\">&nbsp;</div>\n                        {\n                            this.state.isShowDetails ?\n                                <div className=\"ace-wrapper pf-c-empty-state pf-m-lg\" id=\"ace-wrapper\">\n                                    <AceEditor\n                                        data-testid=\"ace-details\"\n                                        mode=\"json\"\n                                        theme=\"tomorrow\"\n                                        name=\"errorDetail\"\n                                        className=\"errorDetail\"\n                                        width={this.state.editorWidth}\n                                        height={this.state.editorHeight}\n                                        fontSize={14}\n                                        showPrintMargin={false}\n                                        showGutter={false}\n                                        highlightActiveLine={false}\n                                        value={this.errorDetail()}\n                                        readOnly={true}\n                                        setOptions={{\n                                            enableBasicAutocompletion: false,\n                                            enableLiveAutocompletion: false,\n                                            enableSnippets: false,\n                                            showLineNumbers: true,\n                                            tabSize: 2,\n                                            useWorker: false\n                                        }}\n                                    />\n                                </div>\n                                :\n                                <div/>\n                        }\n            </div>\n        )\n    }\n    \n    protected initializeState(): ErrorTabContentState {\n        return {\n            editorHeight: \"250px\",\n            editorWidth: \"100%\",\n            isShowDetails: false\n        };\n    }\n\n    private errorMessage(): string {\n        if (this.props.error) {\n            return this.props.error.errorMessage;\n        } else {\n            return \"Internal server error\";\n        }\n    }\n\n    // Error description can be in node children - if it is missing, default description is used\n    private errorDescription(): ReactNode {\n        if (this.props.children) {\n            return this.props.children;\n        } else {\n            return (\n                \"The content you are trying to visualize is not valid (we could not parse it).  If possible, we'll try to provide you with some more information about \" +\n                \"the problem (see below).\"\n            );\n        }\n    }\n\n    private errorDetail(): string {\n        if (this.props.error && this.props.error.error && this.props.error.error.detail) {\n            return this.props.error.error.detail;\n        }else if (this.props.error && this.props.error.error && this.props.error.error.message) {\n            return this.props.error.error.message;\n        } else if (this.props.error && this.props.error.error) {\n            return JSON.stringify(this.props.error.error, null, 3);\n        } else {\n            return \"Error info not available\";\n        }\n    }\n\n    private showDetails = (): void => {\n        this.setSingleState(\"isShowDetails\", true);\n    };\n\n}\n\n\n\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./info.css\";\nimport {\n    ArtifactTypeIcon, IfAuth,\n    PureComponent,\n    PureComponentProps,\n    PureComponentState,\n    RuleList\n} from \"../../../../components\";\nimport { Button, DescriptionList, DescriptionListDescription, DescriptionListGroup, DescriptionListTerm, Flex, FlexItem, Label, Split, SplitItem } from \"@patternfly/react-core\";\nimport { DownloadIcon, PencilAltIcon } from \"@patternfly/react-icons\";\nimport Moment from \"react-moment\";\nimport { IfFeature } from \"../../../../components/common/ifFeature\";\nimport { ArtifactMetaData, Rule } from \"../../../../../models\";\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface InfoTabContentProps extends PureComponentProps {\n    artifact: ArtifactMetaData;\n    isLatest: boolean;\n    rules: Rule[];\n    onEnableRule: (ruleType: string) => void;\n    onDisableRule: (ruleType: string) => void;\n    onConfigureRule: (ruleType: string, config: string) => void;\n    onDownloadArtifact: () => void;\n    onEditMetaData: () => void;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface InfoTabContentState extends PureComponentState {\n}\n\n\n/**\n * Models the content of the Artifact Info tab.\n */\nexport class InfoTabContent extends PureComponent<InfoTabContentProps, InfoTabContentState> {\n\n    constructor(props: Readonly<InfoTabContentProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <Flex className=\"artifact-tab-content\">\n                <FlexItem className=\"artifact-basics\">\n                    <div className=\"title-and-type\">\n                        <Split>\n                            <SplitItem className=\"type\"><ArtifactTypeIcon type={this.props.artifact.type} /></SplitItem>\n                            <SplitItem className=\"title\" isFilled={true}>Version metadata</SplitItem>\n                            <SplitItem className=\"actions\">\n                                <IfAuth isDeveloper={true}>\n                                    <IfFeature feature=\"readOnly\" isNot={true}>\n                                        <Button id=\"edit-action\"\n                                            data-testid=\"artifact-btn-edit\"\n                                            title=\"Edit artifact metadata\"\n                                            onClick={this.props.onEditMetaData}\n                                            variant=\"link\"><PencilAltIcon />{' '}Edit</Button>\n                                    </IfFeature>\n                                </IfAuth>\n                            </SplitItem>\n                        </Split>\n                    </div>\n                    <DescriptionList className=\"metaData\">\n                        <DescriptionListGroup>\n                            <DescriptionListTerm>Name</DescriptionListTerm>\n                            <DescriptionListDescription className={!this.props.artifact.name ? 'empty-state-text' : ''}>{this.artifactName()}</DescriptionListDescription>\n                        </DescriptionListGroup>\n                        <DescriptionListGroup>\n                            <DescriptionListTerm>ID</DescriptionListTerm>\n                            <DescriptionListDescription>{this.props.artifact.id}</DescriptionListDescription>\n                        </DescriptionListGroup>\n                        <DescriptionListGroup>\n                            <DescriptionListTerm>Description</DescriptionListTerm>\n                            <DescriptionListDescription className={!this.props.artifact.description ? 'empty-state-text' : ''}>{this.description()}</DescriptionListDescription>\n                        </DescriptionListGroup>\n                        <DescriptionListGroup>\n                            <DescriptionListTerm>Status</DescriptionListTerm>\n                            <DescriptionListDescription>{this.props.artifact.state}</DescriptionListDescription>\n                        </DescriptionListGroup>\n                        <DescriptionListGroup>\n                            <DescriptionListTerm>Created</DescriptionListTerm>\n                            <DescriptionListDescription><Moment date={this.props.artifact.createdOn} fromNow={true} /></DescriptionListDescription>\n                        </DescriptionListGroup>\n                        <DescriptionListGroup>\n                            <DescriptionListTerm>Modified</DescriptionListTerm>\n                            <DescriptionListDescription>{<Moment date={this.props.artifact.modifiedOn} fromNow={true} />}</DescriptionListDescription>\n                        </DescriptionListGroup>\n                        <DescriptionListGroup>\n                            <DescriptionListTerm>Global ID</DescriptionListTerm>\n                            <DescriptionListDescription>{this.props.artifact.globalId}</DescriptionListDescription>\n                        </DescriptionListGroup>\n                        <DescriptionListGroup>\n                            <DescriptionListTerm>Content ID</DescriptionListTerm>\n                            <DescriptionListDescription>{this.props.artifact.contentId}</DescriptionListDescription>\n                        </DescriptionListGroup>\n                        <DescriptionListGroup>\n                            <DescriptionListTerm>Labels</DescriptionListTerm>\n                            {this.labels().length ?\n                                <DescriptionListDescription>{\n                                    this.labels().map((label) =>\n                                        <span key={'label' + label}><Label color=\"blue\">{label}</Label>{' '}</span>\n                                    )\n                                }</DescriptionListDescription> :\n                                <DescriptionListDescription className=\"empty-state-text\">No labels</DescriptionListDescription>\n                            }\n\n                        </DescriptionListGroup>\n                        <DescriptionListGroup>\n                            <DescriptionListTerm>Properties</DescriptionListTerm>\n                            {!this.props.artifact.properties || !Object.keys(this.props.artifact.properties).length ?\n                                <DescriptionListDescription className=\"empty-state-text\">No properties</DescriptionListDescription> :\n                                <DescriptionListDescription>{Object.entries(this.props.artifact.properties).map(([key, value]) =>\n                                    <span key={key}><Label color=\"purple\">{key + '=' + value}</Label>{' '}</span>\n                                )}</DescriptionListDescription>\n                            }\n                        </DescriptionListGroup>\n                    </DescriptionList>\n                    <div className=\"actions\">\n                        <Button id=\"download-action\"\n                                data-testid=\"artifact-btn-download\"\n                                title=\"Download artifact content\"\n                                onClick={this.props.onDownloadArtifact}\n                                variant=\"secondary\"><DownloadIcon /> Download</Button>\n                    </div>\n                </FlexItem>\n                <FlexItem className=\"artifact-rules\">\n                    <div className=\"rules-label\">Content rules</div>\n                    <RuleList rules={this.props.rules}\n                        onEnableRule={this.props.onEnableRule}\n                        onDisableRule={this.props.onDisableRule}\n                        onConfigureRule={this.props.onConfigureRule}\n                    />\n                </FlexItem>\n            </Flex>\n        );\n    }\n\n    protected initializeState(): InfoTabContentState {\n        return {};\n    }\n\n    private nameOrId(): string {\n        return this.props.artifact.name ? this.props.artifact.name : this.props.artifact.id;\n    }\n\n    private labels(): string[] {\n        return this.props.artifact.labels || [];\n    }\n\n    private description(): string {\n        return this.props.artifact.description || `No description`;\n    }\n\n    private artifactName(): string {\n        return this.props.artifact.name || 'No name';\n    }\n\n    private isArtifactInGroup = (): boolean => {\n        const groupId: string | null = this.props.artifact.groupId;\n        return groupId != null && groupId !== \"default\";\n    };\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from 'react';\nimport \"./uploadForm.css\";\nimport {PureComponent, PureComponentProps, PureComponentState} from \"../../../../components\";\nimport {FileUpload, Form, FormGroup} from \"@patternfly/react-core\";\n\n\n/**\n * Properties\n */\nexport interface UploadVersionFormProps extends PureComponentProps {\n    onValid: (valid: boolean) => void;\n    onChange: (data: string) => void;\n}\n\n/**\n * State\n */\nexport interface UploadVersionFormState extends PureComponentState {\n    content: string;\n    contentFilename: string;\n    contentIsLoading: boolean;\n    valid: boolean;\n}\n\n/**\n * Models the toolbar for the Artifacts page.\n */\nexport class UploadVersionForm extends PureComponent<UploadVersionFormProps, UploadVersionFormState> {\n\n    constructor(props: Readonly<UploadVersionFormProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <Form>\n                <FormGroup\n                    label=\"Artifact\"\n                    isRequired={true}\n                    fieldId=\"form-artifact\"\n                >\n                    <FileUpload\n                        id=\"artifact-content\"\n                        data-testid=\"form-upload\"\n                        type=\"text\"\n                        filename={this.state.contentFilename}\n                        value={this.state.content}\n                        isRequired={true}\n                        allowEditingUploadedText={true}\n                        onChange={this.onContentChange}\n                        onReadStarted={this.onFileReadStarted}\n                        onReadFinished={this.onFileReadFinished}\n                        isLoading={this.state.contentIsLoading}\n                    />\n                </FormGroup>\n            </Form>\n        );\n    }\n\n    protected initializeState(): UploadVersionFormState {\n        return {\n            content: \"\",\n            contentFilename: \"\",\n            contentIsLoading: false,\n            valid: false\n        };\n    }\n\n    private onContentChange = (value: any, filename: string, event: any): void => {\n        this.setSingleState(\"content\", value, () => {\n            this.fireOnChange();\n            this.checkValid();\n        });\n    };\n\n    private onFileReadStarted = (): void => {\n        this.setSingleState(\"contentIsLoading\", true);\n    };\n\n    private onFileReadFinished = (): void => {\n        this.setSingleState(\"contentIsLoading\", false);\n    };\n\n    private checkValid(): void {\n        const data: string = this.currentData();\n        const oldValid: boolean = this.state.valid;\n        const newValid: boolean = this.isValid(data);\n        const validityChanged: boolean = oldValid !== newValid;\n        this.setState({\n            valid: newValid\n        }, () => {\n            if (validityChanged) {\n                this.fireOnValid();\n            }\n        });\n    }\n\n    private isValid(data: string): boolean {\n        return !!data;\n    }\n\n    private currentData(): string {\n        return this.state.content;\n    }\n\n    private fireOnChange(): void {\n        if (this.props.onChange) {\n            this.props.onChange(this.currentData());\n        }\n    }\n\n    private fireOnValid(): void {\n        if (this.props.onValid) {\n            this.props.onValid(this.state.valid);\n        }\n    }\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport {ErrorPage, PageError, PureComponent, PureComponentProps, PureComponentState} from \"../components\";\nimport {Services} from \"../../services\";\nimport {Flex, FlexItem, PageSection, PageSectionVariants, Spinner} from \"@patternfly/react-core\";\nimport {AccessErrorPage} from \"../components/errorPage/accessErrorPage\";\nimport {RateLimitErrorPage} from \"../components/errorPage/rateLimitErrorPage\";\n\n// TODO this should be configurable via standard UI config settings\nconst MAX_RETRIES: number = 1;\n\nexport enum PageErrorType {\n    React, Server\n}\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface PageProps extends PureComponentProps {\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface PageState extends PureComponentState {\n    pageLoadRetries?: number;\n    isLoading?: boolean;\n    isError?: boolean;\n    error?: PageError;\n}\n\n\n/**\n * The artifacts page.\n */\nexport abstract class PageComponent<P extends PageProps, S extends PageState> extends PureComponent<P, S> {\n\n    protected constructor(props: Readonly<P>) {\n        super(props);\n        setTimeout(() => {\n            this.loadPageData();\n        }, 10);\n    }\n\n    protected initializeState(): S {\n        return {\n            ...this.initializePageState(),\n            isLoading: true\n        };\n    }\n\n    protected abstract initializePageState(): S;\n\n    public componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {\n        this.handleError(PageErrorType.React, error, errorInfo);\n    }\n\n    public render(): React.ReactElement {\n        if (this.isError()) {\n            if (this.is403Error()) {\n                return (\n                    <AccessErrorPage error={this.state.error}/>\n                );\n            } else if (this.is419Error()) {\n                return (\n                    <RateLimitErrorPage error={this.state.error}/>\n                );\n            } else {\n                return (\n                    <ErrorPage error={this.state.error}/>\n                );\n            }\n        } else if (this.isLoading()) {\n            return (\n                <React.Fragment>\n                    <PageSection variant={PageSectionVariants.default} isFilled={true}>\n                        <Flex>\n                            <FlexItem><Spinner size=\"lg\"/></FlexItem>\n                            <FlexItem><span>Loading...</span></FlexItem>\n                        </Flex>\n                    </PageSection>\n                </React.Fragment>\n            );\n        } else {\n            return this.renderPage();\n        }\n    }\n\n    /**\n     * Renders the page content.  Subclasses should implement this instead of render() so that\n     * errors are handled/displayed properly.\n     */\n    protected abstract renderPage(): React.ReactElement;\n\n    protected postConstruct(): void {\n        // @ts-ignore\n        PureComponent.setHistory(this.props.history);\n        super.postConstruct();\n    }\n\n    // @ts-ignore\n    protected createLoaders(): Promise | Promise[] | null {\n        return null;\n    }\n\n    protected handleServerError(error: any, errorMessage: string): void {\n        this.handleError(PageErrorType.Server, error, errorMessage);\n    }\n\n    protected getPathParam(paramName: string): string {\n        // @ts-ignore\n        const paramValue: string = this.props.match.params[paramName];\n        const paramValueDecoded: string = decodeURIComponent(paramValue);\n        return paramValueDecoded;\n    }\n\n    protected isLoading(): boolean {\n        return this.state.isLoading ? true : false;\n    }\n\n    private loadPageData(): void {\n        // @ts-ignore\n        let loaders: Promise | Promise[] | null = this.createLoaders();\n\n        // If not loading anything, convert from null to empty array\n        if (loaders == null) {\n            loaders = [];\n        }\n\n        // Convert to array if not already\n        if (!Array.isArray(loaders)) {\n            loaders = [ loaders ];\n        }\n\n        // Always add the \"update current user\" loader\n        loaders = [\n            Services.getUsersService().updateCurrentUser(),\n            ...loaders\n        ];\n\n        if (loaders.length === 0) {\n            this.setSingleState(\"isLoading\", false);\n        } else {\n            this.setSingleState(\"isLoading\", true);\n            Promise.all(loaders).then(() => {\n                this.setSingleState(\"isLoading\", false);\n            }).catch(error => {\n                Services.getLoggerService().debug(\"[PageComponent] Page data load failed, retrying.\");\n                const retries: number = this.getRetries();\n                if (retries < MAX_RETRIES) {\n                    this.incrementRetries();\n                    setTimeout(() => {\n                        this.loadPageData();\n                    }, Math.pow(2, retries) * 100);\n                } else {\n                    this.handleServerError(error, \"Error loading page data.\");\n                }\n            });\n        }\n    }\n\n    private getRetries(): number {\n        return this.state.pageLoadRetries !== undefined ? this.state.pageLoadRetries as number : 0;\n    }\n\n    private incrementRetries(): void {\n        const retries: number = this.getRetries() + 1;\n        this.setSingleState(\"pageLoadRetries\", retries);\n    }\n\n    private isError(): boolean {\n        return this.state.isError ? true : false;\n    }\n\n    private is403Error(): boolean {\n        return this.state.error && this.state.error.error.status && (this.state.error.error.status == 403);\n    }\n\n    private is419Error(): boolean {\n        return this.state.error && this.state.error.error.status && (this.state.error.error.status == 419);\n    }\n\n    private handleError(errorType: PageErrorType, error: any, errorMessage: any): void {\n        Services.getLoggerService().error(\"[PageComponent] Handling an error of type: \", errorType);\n        Services.getLoggerService().error(\"[PageComponent] \", errorMessage);\n        Services.getLoggerService().error(\"[PageComponent] \", error);\n        this.setMultiState({\n            error: {\n                error,\n                errorMessage,\n                type: errorType\n            },\n            isError: true\n        });\n    }\n}\n","/**\n * @license\n * Copyright 2021 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from 'react';\nimport \"./errorPage.css\";\nimport {\n    Button,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateSecondaryActions,\n    EmptyStateVariant,\n    PageSection,\n    PageSectionVariants,\n    Title\n} from '@patternfly/react-core';\nimport {LockedIcon} from \"@patternfly/react-icons\";\nimport \"ace-builds/src-noconflict/mode-text\";\nimport \"ace-builds/src-noconflict/theme-tomorrow\";\nimport {ErrorPage, ErrorPageProps} from \"./errorPage\";\n\n\nexport class AccessErrorPage extends ErrorPage {\n\n    constructor(props: Readonly<ErrorPageProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <React.Fragment>\n                <PageSection className=\"ps_error\" variant={PageSectionVariants.light}>\n                    <div className=\"centerizer\">\n                        <EmptyState variant={EmptyStateVariant.large}>\n                            <EmptyStateIcon icon={LockedIcon} />\n                            <Title headingLevel=\"h5\" size=\"lg\">Access permissions needed</Title>\n                            <EmptyStateBody>\n                                To access this Service Registry instance, contact your organization administrators.\n                            </EmptyStateBody>\n                            <EmptyStateSecondaryActions>\n                                <Button variant=\"link\"\n                                        data-testid=\"error-btn-back\"\n                                        onClick={this.navigateBack}>Return to previous page</Button>\n                            </EmptyStateSecondaryActions>\n                        </EmptyState>\n                    </div>\n                </PageSection>\n            </React.Fragment>\n        );\n    }\n\n    protected navigateBack = (): void => {\n        window.history.back();\n    };\n\n}\n","/**\n * @license\n * Copyright 2022 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from 'react';\nimport \"./errorPage.css\";\nimport {\n    Button,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateSecondaryActions,\n    EmptyStateVariant,\n    PageSection,\n    PageSectionVariants,\n    Title\n} from '@patternfly/react-core';\nimport {ExclamationCircleIcon} from \"@patternfly/react-icons\";\nimport \"ace-builds/src-noconflict/mode-text\";\nimport \"ace-builds/src-noconflict/theme-tomorrow\";\nimport {ErrorPage, ErrorPageProps} from \"./errorPage\";\n\n\nexport class RateLimitErrorPage extends ErrorPage {\n\n    constructor(props: Readonly<ErrorPageProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <React.Fragment>\n                <PageSection className=\"ps_error\" variant={PageSectionVariants.light}>\n                    <div className=\"centerizer\">\n                        <EmptyState variant={EmptyStateVariant.large}>\n                            <EmptyStateIcon icon={ExclamationCircleIcon} />\n                            <Title headingLevel=\"h5\" size=\"lg\">Current usage is too high</Title>\n                            <EmptyStateBody>\n                                This Service Registry instance is throttled due to a high request rate. Ensure\n                                that existing applications are properly configured to cache the schemas.\n                            </EmptyStateBody>\n                            <EmptyStateSecondaryActions>\n                                <Button variant=\"link\"\n                                        data-testid=\"error-btn-back\"\n                                        onClick={this.navigateBack}>Return to previous page</Button>\n                            </EmptyStateSecondaryActions>\n                        </EmptyState>\n                    </div>\n                </PageSection>\n            </React.Fragment>\n        );\n    }\n\n    protected navigateBack = (): void => {\n        window.history.back();\n    };\n\n}\n"],"names":["props","handleTabClick","event","tabIndex","setSingleState","onUploadVersion","onDeleteArtifact","doEnableRule","ruleType","Services","debug","config","createArtifactRule","groupId","artifactId","catch","error","handleServerError","rules","type","doDisableRule","deleteArtifactRule","filter","r","doConfigureRule","updateArtifactRule","map","doDownloadArtifact","content","state","artifactContent","contentType","ContentTypes","fext","artifact","ArtifactTypes","fname","artifactNameOrId","downloadToFS","onUploadFormValid","isValid","onUploadFormChange","data","onUploadModalClose","onDeleteModalClose","doUploadArtifactVersion","pleaseWait","uploadFormData","artifactType","createArtifactVersion","then","versionMetaData","artifactVersionLocation","encodeURIComponent","id","version","info","navigateTo","linkTo","error_code","handleInvalidContentError","setMultiState","isUploadFormValid","doDeleteArtifact","deleteArtifact","openEditMetaDataModal","onEditModalClose","doEditMetaData","metaData","updateArtifactMetaData","versionParam","closeInvalidContentModal","isOpen","message","isPleaseWaitModalOpen","pleaseWaitMessage","renderPage","this","ArtifactMetaData","tabs","Tab","eventKey","title","key","tabContentId","isLatest","onEnableRule","onDisableRule","onConfigureRule","onDownloadArtifact","onEditMetaData","showDocumentationTab","splice","groupIdParam","hasGroup","breadcrumbs","Breadcrumb","BreadcrumbItem","Link","to","isActive","feature","is","PageSection","className","variant","PageSectionVariants","children","nameOrId","versions","isFilled","padding","default","Tabs","unmountOnExit","activeKey","activeTabKey","onSelect","Modal","isUploadModalOpen","onClose","actions","Button","onClick","isDisabled","onChange","onValid","isDeleteModalOpen","name","artifactName","description","artifactDescription","labels","artifactLabels","properties","artifactProperties","isEditModalOpen","invalidContentError","isInvalidContentModalOpen","initializePageState","artifactIsText","getPathParam","artifactIdParam","createLoaders","getArtifactMetaData","md","getArtifactContent","e","warn","eo","JSON","parse","is404","getArtifactRules","getArtifactVersions","reverse","initialFormState","hasErrors","newPropertyKey","value","validated","errorMessage","newArtifactPropertyValue","doEdit","onNameChange","onLabelsChange","trim","length","split","item","onDescriptionChange","renderExistingArtifactPropertiesInForm","Object","keys","k","i","FormGroup","fieldId","label","TextInput","placeholder","newVal","updateArtifactPropertyValue","icon","MinusCircleIcon","iconPosition","removeArtifactProperty","render","formState","Form","Grid","hasGutter","GridItem","span","isRequired","TextArea","helperText","helperTextInvalid","updateArtifactPropertyFormKey","updateArtifactPropertyFormValue","PlusCircleIcon","addArtifactProperty","componentDidUpdate","prevProps","join","initializeState","propertyValueErrorData","getPropertyValueErrorInfo","errorData","metadata","assign","Flex","FlexItem","TextContent","Text","component","TextVariants","align","isDeveloper","isNot","onToggle","Dropdown","dropdownClasses","toggle","DropdownToggle","style","display","InputGroup","ButtonVariant","SearchIcon","v","idx","date","createdOn","fromNow","classes","featureReadOnly","push","componentDidMount","elem","document","getElementById","height","clientHeight","mode","editorMode","theme","width","editorWidth","editorHeight","fontSize","showPrintMargin","showGutter","highlightActiveLine","readOnly","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","useWorker","formatContent","pval","stringify","isError","visualizer","RedocStandalone","spec","parsedContent","undefined","ex","showDetails","EmptyState","EmptyStateVariant","EmptyStateIcon","ExclamationTriangleIcon","Title","headingLevel","size","EmptyStateBody","errorDescription","EmptyStateSecondaryActions","isShowDetails","errorDetail","detail","isArtifactInGroup","Split","SplitItem","PencilAltIcon","DescriptionList","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","modifiedOn","globalId","contentId","Label","color","entries","DownloadIcon","onContentChange","filename","fireOnChange","checkValid","onFileReadStarted","onFileReadFinished","FileUpload","contentFilename","allowEditingUploadedText","onReadStarted","onReadFinished","isLoading","contentIsLoading","valid","currentData","oldValid","newValid","validityChanged","setState","fireOnValid","PageErrorType","navigateBack","window","history","back","LockedIcon","ExclamationCircleIcon","setTimeout","loadPageData","componentDidCatch","errorInfo","handleError","React","is403Error","AccessErrorPage","is419Error","RateLimitErrorPage","Spinner","postConstruct","Server","paramName","paramValue","match","params","decodeURIComponent","loaders","Array","isArray","updateCurrentUser","Promise","all","retries","getRetries","incrementRetries","Math","pow","pageLoadRetries","status","errorType"],"sourceRoot":""}