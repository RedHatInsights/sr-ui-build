{"version":3,"file":"2675.45387a99.js","mappings":"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","sources":["webpack://@apicurio/registry-ui/./src/app/components/common/if.tsx","webpack://@apicurio/registry-ui/./src/app/pages/basePage.tsx","webpack://@apicurio/registry-ui/./src/app/components/errorPage/accessErrorPage.tsx","webpack://@apicurio/registry-ui/./src/app/components/errorPage/rateLimitErrorPage.tsx","webpack://@apicurio/registry-ui/./src/app/pages/roles/components/empty/empty.tsx","webpack://@apicurio/registry-ui/./src/app/pages/roles/components/modals/selectPrincipalAccount.tsx","webpack://@apicurio/registry-ui/./src/app/pages/roles/components/modals/grantAccessModal.tsx","webpack://@apicurio/registry-ui/./src/app/pages/roles/components/roleList/roleList.tsx"],"sourcesContent":["/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport { PureComponent, PureComponentProps, PureComponentState } from \"../baseComponent\";\n\n/**\n * Properties\n */\nexport interface IfProps extends PureComponentProps {\n    condition: boolean | (() => boolean);\n    children?: React.ReactNode;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface IfState extends PureComponentState {\n}\n\n\n/**\n * Wrapper around a set of arbitrary child elements and displays them only if the\n * indicated condition is true.\n */\nexport class If extends PureComponent<IfProps, IfState> {\n\n    constructor(props: Readonly<IfProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        if (this.accept()) {\n            return <React.Fragment children={this.props.children} />\n        } else {\n            return <React.Fragment />\n        }\n    }\n\n    protected initializeState(): IfState {\n        return {};\n    }\n\n    private accept(): boolean {\n        if (typeof this.props.condition === \"boolean\") {\n            return this.props.condition;\n        } else {\n            return this.props.condition();\n        }\n    }\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport { ErrorPage, PageError, PureComponent, PureComponentProps, PureComponentState } from \"../components\";\nimport { Services } from \"../../services\";\nimport { Flex, FlexItem, PageSection, PageSectionVariants, Spinner } from \"@patternfly/react-core\";\nimport { AccessErrorPage } from \"../components/errorPage/accessErrorPage\";\nimport { RateLimitErrorPage } from \"../components/errorPage/rateLimitErrorPage\";\n\n// TODO this should be configurable via standard UI config settings\nconst MAX_RETRIES: number = 1;\n\nexport enum PageErrorType {\n    React, Server\n}\n\n/**\n * Properties\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface PageProps extends PureComponentProps {\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface PageState extends PureComponentState {\n    pageLoadRetries?: number;\n    isLoading?: boolean;\n    isError?: boolean;\n    error?: PageError;\n}\n\n\n/**\n * The artifacts page.\n */\nexport abstract class PageComponent<P extends PageProps, S extends PageState> extends PureComponent<P, S> {\n\n    protected constructor(props: Readonly<P>) {\n        super(props);\n        setTimeout(() => {\n            this.loadPageData();\n        }, 10);\n    }\n\n    protected initializeState(): S {\n        return {\n            ...this.initializePageState(),\n            isLoading: true\n        };\n    }\n\n    protected abstract initializePageState(): S;\n\n    public componentDidCatch(error: Error, errorInfo: React.ErrorInfo): void {\n        this.handleError(PageErrorType.React, error, errorInfo);\n    }\n\n    public render(): React.ReactElement {\n        if (this.isError()) {\n            if (this.is403Error()) {\n                return (\n                    <AccessErrorPage error={this.state.error}/>\n                );\n            } else if (this.is419Error()) {\n                return (\n                    <RateLimitErrorPage error={this.state.error}/>\n                );\n            } else {\n                return (\n                    <ErrorPage error={this.state.error}/>\n                );\n            }\n        } else if (this.isLoading()) {\n            return (\n                <React.Fragment>\n                    <PageSection variant={PageSectionVariants.default} isFilled={true}>\n                        <Flex>\n                            <FlexItem><Spinner size=\"lg\"/></FlexItem>\n                            <FlexItem><span>Loading...</span></FlexItem>\n                        </Flex>\n                    </PageSection>\n                </React.Fragment>\n            );\n        } else {\n            return this.renderPage();\n        }\n    }\n\n    /**\n     * Renders the page content.  Subclasses should implement this instead of render() so that\n     * errors are handled/displayed properly.\n     */\n    protected abstract renderPage(): React.ReactElement;\n\n    protected postConstruct(): void {\n        // @ts-ignore\n        PureComponent.setHistory(this.props.history);\n        super.postConstruct();\n    }\n\n    // @ts-ignore\n    protected createLoaders(): Promise | Promise[] | null {\n        return null;\n    }\n\n    protected handleServerError(error: any, errorMessage: string): void {\n        this.handleError(PageErrorType.Server, error, errorMessage);\n    }\n\n    protected getPathParam(paramName: string): string {\n        // @ts-ignore\n        const paramValue: string = this.props.match.params[paramName];\n        const paramValueDecoded: string = decodeURIComponent(paramValue);\n        return paramValueDecoded;\n    }\n\n    protected isLoading(): boolean {\n        return this.state.isLoading ? true : false;\n    }\n\n    private loadPageData(): void {\n        // @ts-ignore\n        let loaders: Promise | Promise[] | null = this.createLoaders();\n\n        // If not loading anything, convert from null to empty array\n        if (loaders == null) {\n            loaders = [];\n        }\n\n        // Convert to array if not already\n        if (!Array.isArray(loaders)) {\n            loaders = [ loaders ];\n        }\n\n        // Always add the \"update current user\" loader\n        loaders = [\n            Services.getUsersService().updateCurrentUser(),\n            ...loaders\n        ];\n\n        if (loaders.length === 0) {\n            this.setSingleState(\"isLoading\", false);\n        } else {\n            this.setSingleState(\"isLoading\", true);\n            Promise.all(loaders).then(() => {\n                this.setSingleState(\"isLoading\", false);\n            }).catch(error => {\n                Services.getLoggerService().debug(\"[PageComponent] Page data load failed, retrying.\");\n                const retries: number = this.getRetries();\n                if (retries < MAX_RETRIES) {\n                    this.incrementRetries();\n                    setTimeout(() => {\n                        this.loadPageData();\n                    }, Math.pow(2, retries) * 100);\n                } else {\n                    this.handleServerError(error, \"Error loading page data.\");\n                }\n            });\n        }\n    }\n\n    private getRetries(): number {\n        return this.state.pageLoadRetries !== undefined ? this.state.pageLoadRetries as number : 0;\n    }\n\n    private incrementRetries(): void {\n        const retries: number = this.getRetries() + 1;\n        this.setSingleState(\"pageLoadRetries\", retries);\n    }\n\n    private isError(): boolean {\n        return this.state.isError ? true : false;\n    }\n\n    private is403Error(): boolean {\n        return this.state.error && this.state.error.error.status && (this.state.error.error.status == 403);\n    }\n\n    private is419Error(): boolean {\n        return this.state.error && this.state.error.error.status && (this.state.error.error.status == 419);\n    }\n\n    private handleError(errorType: PageErrorType, error: any, errorMessage: any): void {\n        Services.getLoggerService().error(\"[PageComponent] Handling an error of type: \", errorType);\n        Services.getLoggerService().error(\"[PageComponent] \", errorMessage);\n        Services.getLoggerService().error(\"[PageComponent] \", error);\n        this.setMultiState({\n            error: {\n                error,\n                errorMessage,\n                type: errorType\n            },\n            isError: true\n        });\n    }\n}\n","/**\n * @license\n * Copyright 2021 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./errorPage.css\";\nimport {\n    Button,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateSecondaryActions,\n    EmptyStateVariant,\n    PageSection,\n    PageSectionVariants,\n    Title\n} from \"@patternfly/react-core\";\nimport { LockedIcon } from \"@patternfly/react-icons\";\nimport \"ace-builds/src-noconflict/mode-text\";\nimport \"ace-builds/src-noconflict/theme-tomorrow\";\nimport { ErrorPage, ErrorPageProps } from \"./errorPage\";\n\n\nexport class AccessErrorPage extends ErrorPage {\n\n    constructor(props: Readonly<ErrorPageProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <React.Fragment>\n                <PageSection className=\"ps_error\" variant={PageSectionVariants.light}>\n                    <div className=\"centerizer\">\n                        <EmptyState variant={EmptyStateVariant.large}>\n                            <EmptyStateIcon icon={LockedIcon} />\n                            <Title headingLevel=\"h5\" size=\"lg\">Access permissions needed</Title>\n                            <EmptyStateBody>\n                                To access this Service Registry instance, contact your organization administrators.\n                            </EmptyStateBody>\n                            <EmptyStateSecondaryActions>\n                                <Button variant=\"link\"\n                                        data-testid=\"error-btn-back\"\n                                        onClick={this.navigateBack}>Return to previous page</Button>\n                            </EmptyStateSecondaryActions>\n                        </EmptyState>\n                    </div>\n                </PageSection>\n            </React.Fragment>\n        );\n    }\n\n    protected navigateBack = (): void => {\n        window.history.back();\n    };\n\n}\n","/**\n * @license\n * Copyright 2022 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport \"./errorPage.css\";\nimport {\n    Button,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateIcon,\n    EmptyStateSecondaryActions,\n    EmptyStateVariant,\n    PageSection,\n    PageSectionVariants,\n    Title\n} from \"@patternfly/react-core\";\nimport { ExclamationCircleIcon } from \"@patternfly/react-icons\";\nimport \"ace-builds/src-noconflict/mode-text\";\nimport \"ace-builds/src-noconflict/theme-tomorrow\";\nimport { ErrorPage, ErrorPageProps } from \"./errorPage\";\n\n\nexport class RateLimitErrorPage extends ErrorPage {\n\n    constructor(props: Readonly<ErrorPageProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <React.Fragment>\n                <PageSection className=\"ps_error\" variant={PageSectionVariants.light}>\n                    <div className=\"centerizer\">\n                        <EmptyState variant={EmptyStateVariant.large}>\n                            <EmptyStateIcon icon={ExclamationCircleIcon} />\n                            <Title headingLevel=\"h5\" size=\"lg\">Current usage is too high</Title>\n                            <EmptyStateBody>\n                                This Service Registry instance is throttled due to a high request rate. Ensure\n                                that existing applications are properly configured to cache the schemas.\n                            </EmptyStateBody>\n                            <EmptyStateSecondaryActions>\n                                <Button variant=\"link\"\n                                        data-testid=\"error-btn-back\"\n                                        onClick={this.navigateBack}>Return to previous page</Button>\n                            </EmptyStateSecondaryActions>\n                        </EmptyState>\n                    </div>\n                </PageSection>\n            </React.Fragment>\n        );\n    }\n\n    protected navigateBack = (): void => {\n        window.history.back();\n    };\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport { Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title } from \"@patternfly/react-core\";\nimport { PlusCircleIcon } from \"@patternfly/react-icons\";\nimport { PureComponent, PureComponentProps, PureComponentState } from \"../../../../components\";\nimport { If } from \"../../../../components/common/if\";\nimport { Services } from \"../../../../../services\";\n\n/**\n * Properties\n */\nexport interface RoleMappingsEmptyStateProps extends PureComponentProps {\n    isFiltered?: boolean;\n    onCreateRoleMapping?: ()=>void;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface RoleMappingsEmptyStateState extends PureComponentState {\n}\n\n\n/**\n * Models the empty state for the Artifacts page (when there are no artifacts).\n */\nexport class RoleMappingsEmptyState extends PureComponent<RoleMappingsEmptyStateProps, RoleMappingsEmptyStateState> {\n\n    constructor(props: Readonly<RoleMappingsEmptyStateProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n        return (\n            <EmptyState variant={EmptyStateVariant.full}>\n                <EmptyStateIcon icon={PlusCircleIcon}/>\n                <Title headingLevel=\"h5\" size=\"lg\">\n                    No roles assigned\n                </Title>\n                <If condition={() => this.props.isFiltered === true}>\n                    <EmptyStateBody>No role mappings match your filter settings.  Change your filter or perhaps create a new role mapping.</EmptyStateBody>\n                </If>\n                <If condition={() => !this.props.isFiltered}>\n                    <EmptyStateBody>{ this.emptyStateBodyText() }</EmptyStateBody>\n                    <Button variant=\"primary\" data-testid=\"btn-grant-access\" onClick={this.props.onCreateRoleMapping}>Grant access</Button>\n                </If>\n            </EmptyState>\n        );\n    }\n\n    protected initializeState(): RoleMappingsEmptyStateState {\n        return {};\n    }\n\n    private emptyStateBodyText() {\n        if (Services.getConfigService().featureMultiTenant()) {\n            return \"The Service Registry instance owner and organization administrators have access to resources in this instance. Grant other accounts access by assigning roles.\";\n        } else {\n            return \"There are currently no role mappings configured for the registry.  Click the \\\"Grant access\\\" button above to grant access to a user.\";\n        }\n    }\n}\n","/**\n * @license\n * Copyright 2021 Red Hat\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\";\nimport { Divider, Select, SelectGroup, SelectOption, SelectVariant, } from \"@patternfly/react-core\";\nimport { PureComponent, PureComponentProps, PureComponentState } from \"../../../../components\";\nimport { Principal } from \"../../../../../services/config\";\nimport { RoleMapping } from \"../../../../../models\";\n\nexport interface SelectPrincipalAccountProps extends PureComponentProps {\n    id: string | undefined;\n    onIdUpdate: (id: string) => void;\n    initialOptions: Principal[];\n    onToggle: (isOpen: boolean) => void;\n    isUpdateAccess: boolean;\n    isUsersOnly?: boolean;\n    defaultRole?: RoleMapping;\n}\n\nexport interface SelectPrincipalAccountState extends PureComponentState {\n    id: string | undefined;\n    isOpen: boolean;\n}\n\nexport class SelectPrincipalAccount extends PureComponent<SelectPrincipalAccountProps, SelectPrincipalAccountState> {\n\n    constructor(props: Readonly<SelectPrincipalAccountProps>) {\n        super(props);\n    }\n\n    componentDidUpdate(prevProps: SelectPrincipalAccountProps){\n        if (this.props.id && this.props.id !== prevProps.id) {\n            this.setSingleState(\"id\", this.props.id);\n        }\n    }\n\n    private onToggle = (isOpen: boolean) => {\n        this.setSingleState(\"isOpen\", isOpen);\n        this.props.onToggle(isOpen);\n    };\n\n    private clearSelection = () => {\n        this.setMultiState({\n            id: \"\",\n            isOpen: false\n        });\n        this.props.onIdUpdate(\"\");\n    };\n\n    private onSelect = (_event: any, selection: any, isPlaceholder: any) => {\n        if (isPlaceholder) {\n            this.clearSelection();\n        } else {\n            this.setSingleState(\"id\", selection);\n            this.onToggle(false);\n            this.props.onIdUpdate(selection);\n        }\n    };\n\n    protected initializeState(): SelectPrincipalAccountState {\n        return {\n            id: \"\",\n            isOpen: false\n        };\n    }\n\n    public render(): React.ReactElement {\n        const {isUpdateAccess, defaultRole} = this.props;\n        const children: React.ReactElement[] = this.filter(null, \"\");\n\n        return (\n            <Select\n                variant={SelectVariant.typeahead}\n                typeAheadAriaLabel={\"Select an account\"}\n                createText={\"Use\"}\n                onToggle={this.onToggle}\n                onSelect={this.onSelect}\n                onClear={this.clearSelection}\n                selections={this.state.id}\n                isOpen={this.state.isOpen}\n                isInputValuePersisted={true}\n                placeholderText={isUpdateAccess ? defaultRole?.principalId : \"Select an account\"}\n                isCreatable={true}\n                menuAppendTo=\"parent\"\n                maxHeight={400}\n                isGrouped={true}\n                onFilter={this.filter}\n                children={children}\n                isDisabled={isUpdateAccess}\n            />\n        );\n    };\n\n    private filter = (event: any, criteria: string): React.ReactElement[] => {\n        const principalToSelectOption: (p: Principal, index: number) => React.ReactElement = (principal: Principal, index: number): React.ReactElement => {\n            return (\n                <SelectOption\n                    key={index}\n                    value={principal.id}\n                    description={principal.displayName}\n                >\n                    {principal.id}\n                </SelectOption>\n            )\n        };\n\n        const filteredSAs: Principal[] = this.props.initialOptions.filter(\n            (principal) =>\n                principal.principalType === \"SERVICE_ACCOUNT\"\n        ).filter(\n            (principal) =>\n                !this.props.isUsersOnly && (\n                    principal.id.toLowerCase().includes(criteria.toLowerCase()) ||\n                    principal.displayName?.toLowerCase().includes(criteria.toLowerCase())\n                )\n        );\n        const filteredUsers: Principal[] = this.props.initialOptions.filter(\n            (principal) =>\n                principal.principalType === \"USER_ACCOUNT\"\n        ).filter(\n            (principal) =>\n                principal.id.toLowerCase().includes(criteria.toLowerCase()) ||\n                principal.displayName?.toLowerCase().includes(criteria.toLowerCase())\n        );\n\n        let rval: React.ReactElement[] = [];\n\n        if (filteredSAs.length > 0) {\n            rval.push(\n                <SelectGroup label={\"Service accounts\"} key=\"service_accounts_group\">\n                    {\n                        filteredSAs.sort((a, b) => a.displayName && b.displayName ? a.displayName.localeCompare(b.displayName) : -1).\n                            map(principalToSelectOption)\n                    }\n                </SelectGroup>,\n            );\n        }\n\n        if (filteredSAs.length > 0 && filteredUsers.length > 0) {\n            rval.push(\n                <Divider key='divider' />,\n            );\n        }\n\n        if (filteredUsers.length > 0) {\n            rval.push(\n                <SelectGroup label={\"User accounts\"} key=\"user_accounts_group\">\n                    {\n                        filteredUsers.map(principalToSelectOption)\n                    }\n                </SelectGroup>,\n            );\n        }\n\n        return rval;\n    }\n\n}\n","/**\n * @license\n * Copyright 2021 Red Hat\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport {\n    Button,\n    DescriptionList,\n    DescriptionListDescription,\n    DescriptionListGroup,\n    DescriptionListTerm,\n    Form,\n    FormGroup,\n    Modal,\n    Popover,\n    Radio,\n    SelectOptionObject,\n    TextInput\n} from \"@patternfly/react-core\";\nimport { Principal, Services } from \"../../../../../services\";\nimport { PureComponent, PureComponentProps, PureComponentState } from \"../../../../components\";\nimport { RoleMapping, RoleTypes } from \"../../../../../models\";\nimport { OutlinedQuestionCircleIcon } from \"@patternfly/react-icons\";\nimport { SelectPrincipalAccount } from \"./selectPrincipalAccount\";\nimport \"./grantAccessModal.css\";\n\n/**\n * Properties\n */\nexport interface GrantAccessModalProps extends PureComponentProps {\n    isOpen: boolean;\n    isUpdateAccess: boolean;\n    serviceRegistryInstance?: string;\n    accountId?: string;\n    roles: null | RoleMapping[];\n    defaultRole?: RoleMapping;\n    onClose: () => void;\n    onGrant: (principal: Principal, role: string, isUpdate: boolean) => void;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface GrantAccessModalState extends PureComponentState {\n    isAccountIDSelectOpen: boolean;\n    isValid: boolean;\n    accountId: string | undefined;\n    accountName: string | undefined;\n    role: string | undefined;\n    escapeClosesModal: boolean;\n    isFetchingMappingRole: boolean;\n    currentRole: string | undefined;\n}\n\n\n/**\n * Models the modal dialog for granting access to a user.\n */\nexport class GrantAccessModal extends PureComponent<GrantAccessModalProps, GrantAccessModalState> {\n\n    constructor(props: Readonly<GrantAccessModalProps>) {\n        super(props);\n    }\n\n    public componentDidMount() {\n        this.setMultiState({\n            accountId: \"\",\n            accountName: \"\",\n            role: undefined\n        });\n    }\n\n    public componentDidUpdate(prevProps: GrantAccessModalProps, prevState: GrantAccessModalState) {\n        if (this.props.defaultRole !== prevProps.defaultRole) {\n            if (this.props.defaultRole) {\n                this.setMultiState({\n                    accountId: this.props.defaultRole.principalId,\n                    accountName: this.props.defaultRole.principalName,\n                    currentRole: this.props.defaultRole.role,\n                    role: this.props.defaultRole.role\n                });\n            }\n        }\n\n        if (prevState.accountId !== this.state.accountId || prevState.role !== this.state.role) {\n            this.setSingleState(\"isValid\", this.checkValid(this.state.accountId, this.state.role));\n        }\n    }\n\n    public render(): React.ReactElement {\n        const {isFetchingMappingRole, accountId} = this.state;\n        const {isUpdateAccess, defaultRole} = this.props;\n        const principals: Principal[] | undefined = Services.getConfigService().principals();\n\n        return (\n            <Modal\n                title=\"Grant access\"\n                description={this.modalDescription()}\n                variant=\"medium\"\n                isOpen={this.props.isOpen}\n                onClose={this.closeModal}\n                className=\"grant-access-modal pf-m-redhat-font\"\n                onEscapePress={this.escapePressed}\n                onKeyPress={this.onKey}\n                onKeyDown={this.onKey}\n                onKeyUp={this.onKey}\n                actions={[\n                    <Button key=\"grant\" variant=\"primary\" data-testid=\"modal-btn-grant\" onClick={this.doGrantAccess} isDisabled={!this.state.isValid || isFetchingMappingRole}>Save</Button>,\n                    <Button key=\"cancel\" variant=\"link\" data-testid=\"modal-btn-cancel\" onClick={this.closeModal}>Cancel</Button>\n                ]}\n            >\n                <Form>\n                    {this.props.serviceRegistryInstance !== undefined ? (<DescriptionList>\n                        <DescriptionListGroup>\n                            <DescriptionListTerm>Service Registry instance</DescriptionListTerm>\n                            <DescriptionListDescription>{this.props.serviceRegistryInstance}</DescriptionListDescription>\n                        </DescriptionListGroup>\n                    </DescriptionList>\n                    ) : undefined}\n\n                    <FormGroup\n                        label=\"Account\"\n                        labelIcon={\n                            <Popover aria-label=\"Account help\"\n                                     headerContent={\n                                         <span>Account help</span>\n                                     }\n                                     bodyContent={\n                                         <div>A service account enables your application or tool to connect securely to\n                                             your resources. A user account enables users in your organization to access\n                                             resources.</div>\n                                     }\n                            >\n                                <OutlinedQuestionCircleIcon/>\n                            </Popover>\n                        }\n                        isRequired\n                        fieldId=\"grant-access-account-id\"\n                    >\n                         {principals ?\n                          <SelectPrincipalAccount\n                            id={this.state.accountId}\n                            onToggle={this.onAccountSelectToggle}\n                            onIdUpdate={(id: string) => {\n                                this.onAccountIDSelect(null, id, false);\n                            }}\n                            initialOptions={principals || []}\n                            isUpdateAccess={isUpdateAccess}\n                            defaultRole={defaultRole}\n                            />:\n                            <TextInput\n                                isRequired\n                                type=\"text\"\n                                id=\"grant-access-principal\"\n                                name=\"grant-access-principal\"\n                                aria-describedby=\"grant-access-principal-helper\"\n                                onChange={this.handlePrincipalChange}\n                                value={accountId}\n                                isDisabled={isUpdateAccess}\n                            />\n                        }\n                    </FormGroup>\n                    {accountId &&\n                    <FormGroup\n                        label=\"Role\"\n                        isRequired\n                        fieldId=\"grant-access-role\"\n                    >\n                        <Radio id=\"grant-access-role-admin\"\n                            className=\"grant-access-radio-button\"\n                            name=\"grant-access-role\"\n                            label={this.appendString(\"Administrator\",RoleTypes.ADMIN)}\n                            description=\"Assign roles to other accounts on this Service Registry instance, configure global rules, and access data import and export features.\"\n                            value={RoleTypes.ADMIN}\n                            onChange={this.handleRoleChange}\n                            isChecked={this.state.role == RoleTypes.ADMIN}\n                            isDisabled={isFetchingMappingRole}\n                        />\n\n                        <Radio id=\"grant-access-role-manager\"\n                            className=\"grant-access-radio-button\"\n                            name=\"grant-access-role\"\n                            label={this.appendString(\"Manager\",RoleTypes.DEVELOPER)}\n                            description=\"Read and write artifacts on this Service Registry instance.\"\n                            value={RoleTypes.DEVELOPER}\n                            onChange={this.handleRoleChange}\n                            isChecked={this.state.role == RoleTypes.DEVELOPER}\n                            isDisabled={isFetchingMappingRole}\n                            />\n\n                        <Radio id=\"grant-access-role-viewer\"\n                            className=\"grant-access-radio-button\"\n                            name=\"grant-access-role\"\n                            label={this.appendString(\"Viewer\",RoleTypes.READ_ONLY)}\n                            description=\"Read artifacts on this Service Registry instance.\"\n                            value={RoleTypes.READ_ONLY}\n                            onChange={this.handleRoleChange}\n                            isChecked={this.state.role == RoleTypes.READ_ONLY}\n                            isDisabled={isFetchingMappingRole}\n                            />\n                    </FormGroup>\n                   }\n                </Form>\n\n            </Modal>\n        );\n    }\n\n    protected initializeState(): GrantAccessModalState {\n        return {\n            accountId: \"\",\n            accountName: \"\",\n            currentRole: undefined,\n            escapeClosesModal: true,\n            isAccountIDSelectOpen: false,\n            isFetchingMappingRole: false,\n            isValid: false,\n            role: undefined\n        };\n    }\n\n    private closeModal = () => {\n        const {onClose} = this.props;\n        if (onClose) {\n            onClose();\n        }\n        this.reset();\n    }\n\n    private appendString(roleName: string, roleType: RoleTypes): string {\n        const {currentRole} = this.state;\n        if (currentRole === roleType) {\n            return `${roleName} (current role)`;\n        }\n        return roleName;\n    }\n\n    private reset(): void {\n        this.setMultiState(this.initializeState());\n    }\n\n    private onAccountIDClearSelection = () => {\n        this.setMultiState({\n          accountID: \"\",\n          isAccountIDSelectOpen: false,\n          role: undefined\n        });\n      };\n\n    private handlePrincipalChange = (value: string): void => {\n        this.setMultiState({\n            accountId: value,\n            isValid: this.checkValid(value, this.state.role)\n        })\n    };\n\n    private getRoleMapping = () => {\n        const {accountId} = this.state;\n        if (accountId) {\n            this.setSingleState(\"isFetchingMappingRole\", true);\n            Services.getAdminService().getRoleMapping(accountId).then(({role}) => {\n                this.setMultiState({\n                    role,\n                    isFetchingMappingRole: false,\n                    currentRole: role\n                });\n            }).catch((e) => {\n                this.setMultiState({\n                    role: RoleTypes.READ_ONLY,\n                    isFetchingMappingRole: false\n                });\n            });\n        }\n    };\n\n    private onAccountIDSelect = (_event: any, selection: string | SelectOptionObject, isPlaceholder: boolean | undefined) => {\n        if (isPlaceholder) {\n            this.onAccountIDClearSelection();\n        } else {\n            const newState: any = {\n                accountId: selection,\n                accountName: this.getAccountName(selection as string),\n                isAccountIDSelectOpen: false\n            };\n            this.setMultiState(newState, () => {\n                this.getRoleMapping();\n            });\n        }\n      };\n\n\n    private handleRoleChange = (isChecked: boolean, event: any): void => {\n        this.setMultiState({\n            isValid: this.checkValid(this.state.accountId, event.target.value),\n            role: event.target.value\n        });\n    };\n\n    private doGrantAccess = (): void => {\n        const principal: Principal = {\n            displayName: this.state.accountName,\n            id: this.state.accountId as string,\n            principalType: \"USER_ACCOUNT\"\n        };\n        this.props.onGrant(principal,\n            this.state.role as string,\n            this.props.roles?.find(role => role.principalId == this.state.accountId) !== undefined);\n        this.reset();\n    }\n\n    private checkValid(accountId: SelectOptionObject | string | undefined, role: string | undefined): boolean {\n        if (!accountId || !role) {\n            return false;\n        }\n        return true;\n    }\n\n    private getAccountName(accountId: string): string | undefined {\n        const principals: Principal[] | undefined = Services.getConfigService().principals();\n        if (principals) {\n            for (const principal of principals) {\n                if (principal.id === accountId) {\n                    return principal.displayName;\n                }\n            }\n        }\n        return undefined;\n    }\n\n    private modalDescription() {\n        if (Services.getConfigService().featureMultiTenant()) {\n            return \"Grant access to resources in this Service Registry instance by assigning a role to an account.\";\n        } else {\n            return \"Grant access to resources in the Registry by assigning permissions to an account\";\n        }\n    }\n\n    private escapePressed = (): void => {\n        if (this.state.escapeClosesModal) {\n           this.closeModal();\n        }\n    };\n\n    private onAccountSelectToggle = (isOpen: boolean): void => {\n        this.setSingleState(\"escapeClosesModal\", !isOpen);\n    };\n\n    private onKey = (event: any) => {\n        if (event.key === \"Enter\") {\n            event.stopPropagation();\n            event.preventDefault();\n        }\n    };\n\n}\n","/**\n * @license\n * Copyright 2020 JBoss Inc\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React from \"react\";\nimport \"./roleList.css\";\nimport { Button, Modal } from \"@patternfly/react-core\";\nimport { TableComposable, Tbody, Td, Th, Thead, Tr } from \"@patternfly/react-table\";\nimport { PureComponent, PureComponentProps, PureComponentState } from \"../../../../components\";\nimport { RoleMapping, RoleTypes } from \"../../../../../models\";\nimport { RoleMappingsEmptyState } from \"../empty\";\nimport { Services } from \"../../../../../services\";\n\n/**\n * Properties\n */\nexport interface RoleListProps extends PureComponentProps {\n    roles: RoleMapping[];\n    roleFilter: RoleMapping;\n    onRevoke: (principalId: string) => void;\n    onEditRoleMapping: (role: RoleMapping) => void;\n}\n\n/**\n * State\n */\n// tslint:disable-next-line:no-empty-interface\nexport interface RoleListState extends PureComponentState {\n    isRevokeModalOpen: boolean;\n    revokingPrincipalId: string;\n    currentRole: RoleMapping;\n}\n\n/**\n * Models the list of roles.\n */\nexport class RoleList extends PureComponent<RoleListProps, RoleListState> {\n\n    constructor(props: Readonly<RoleListProps>) {\n        super(props);\n    }\n\n    public render(): React.ReactElement {\n\n        const roleActions = (role: RoleMapping) => [\n            {\n                title: 'Edit',\n                onClick: () => { this.props.onEditRoleMapping(role)}\n            },\n            {\n                title: 'Remove',\n                onClick: () => {this.onRevokeRoleMapping(role.principalId)}\n            }\n        ];\n\n        let filteredRoles = this.props.roles.sort((rm1, rm2) => {\n            return rm1.principalId.localeCompare(rm2.principalId);\n        }).filter((role: RoleMapping)=>{\n            let match: boolean = false;\n            let mustMatch: boolean = false;\n            if(this.props.roleFilter.principalId.length > 0) {\n                mustMatch = true;\n                match = match || role.principalId.toLowerCase().includes(this.props.roleFilter.principalId.toLowerCase());\n            }\n            if(this.props.roleFilter.principalName.length > 0) {\n                mustMatch = true;\n                match = match || role.principalName.toLowerCase().includes(this.props.roleFilter.principalName.toLowerCase());\n            }\n            return mustMatch ? match : true;\n        }).filter((role: RoleMapping)=>{\n            if (this.props.roleFilter.role.length > 0) {\n                switch (role.role) {\n                    case RoleTypes.DEVELOPER:\n                        return \"Manager\" == this.props.roleFilter.role;\n                    case RoleTypes.ADMIN:\n                        return \"Administrator\" == this.props.roleFilter.role;\n                    case RoleTypes.READ_ONLY:\n                        return \"Viewer\" == this.props.roleFilter.role;\n                }\n            }\n            return true;\n        });\n        return (\n            filteredRoles.length === 0 ?\n                <RoleMappingsEmptyState isFiltered={true}/> :\n            <React.Fragment>\n                <TableComposable className=\"role-list\">\n                    <Thead>\n                        <Tr>\n                            {/* <Th\n                            /> */}\n                            <Th>Account</Th>\n                            <Th>Role</Th>\n                        </Tr>\n                    </Thead>\n                    <Tbody>\n                        {filteredRoles.map((role, rowIndex) =>\n\n                            <Tr key={rowIndex}>\n                                {/* Disable for now until we want to support multi-select.\n                                <Td\n                                    key={`${rowIndex}_0`}\n                                    select={{\n                                        rowIndex,\n                                        onSelect: this.onSelect,\n                                        isSelected: false,\n                                    }}\n                                /> */}\n                                <Td>\n                                    <div className=\"principal-id\">{ role.principalId }</div>\n                                    <div className=\"principal-name\">{ role.principalName }</div>\n                                </Td>\n                                <Td>{this.roleName(role.role)}</Td>\n                                <Td className = \"role-list-action-column\"\n                                    key={`${rowIndex}_2`}\n                                    actions={{\n                                        items: roleActions(role)\n                                    }}\n                                />\n                            </Tr>\n                        )\n                        }\n                    </Tbody>\n                </TableComposable>\n                <Modal\n                    title=\"Remove role?\"\n                    variant=\"small\"\n                    isOpen={this.state.isRevokeModalOpen}\n                    onClose={this.onRevokeModalClose}\n                    className=\"revoke-access-modal pf-m-redhat-font\"\n                    actions={[\n                        <Button key=\"revoke\" variant=\"primary\" data-testid=\"modal-btn-revoke\" onClick={this.doRevokeAccess}>Remove</Button>,\n                        <Button key=\"cancel\" variant=\"link\" data-testid=\"modal-btn-cancel\" onClick={this.onRevokeModalClose}>Cancel</Button>\n                    ]}\n                >\n                    <p>{ this.removeRoleConfirmModalBodyText() }</p>\n                </Modal>\n            </React.Fragment>\n        );\n    }\n\n    protected initializeState(): RoleListState {\n        return {\n            isRevokeModalOpen: false,\n            revokingPrincipalId: \"\",\n            currentRole: this.props.roles[0],\n        };\n    }\n\n    private roleName(role: string): string {\n        switch (role) {\n            case RoleTypes.DEVELOPER:\n                return \"Manager\";\n            case RoleTypes.ADMIN:\n                return \"Administrator\";\n            case RoleTypes.READ_ONLY:\n                return \"Viewer\";\n        }\n        return role;\n    }\n\n    private onRevokeRoleMapping = (principalId: string) => {\n        this.setMultiState({\n            isRevokeModalOpen: true,\n            revokingPrincipalId: principalId\n        });\n    };\n\n    private onRevokeModalClose = (): void => {\n        this.setSingleState(\"isRevokeModalOpen\", false);\n    };\n\n    private doRevokeAccess = (): void => {\n        this.onRevokeModalClose();\n        this.props.onRevoke(this.state.revokingPrincipalId);\n    }\n\n    private removeRoleConfirmModalBodyText() {\n        if (Services.getConfigService().featureMultiTenant()) {\n            return `Do you really want to revoke ${this.state.revokingPrincipalId}'s access?`;\n        } else {\n            return `${this.state.revokingPrincipalId} will no longer have access to this Service Registry instance.`;\n        }\n    }\n}\n"],"names":["props","render","this","accept","children","initializeState","condition","PageErrorType","navigateBack","window","history","back","PageSection","className","variant","PageSectionVariants","EmptyState","EmptyStateVariant","EmptyStateIcon","icon","LockedIcon","Title","headingLevel","size","EmptyStateBody","EmptyStateSecondaryActions","Button","onClick","ExclamationCircleIcon","setTimeout","loadPageData","initializePageState","isLoading","componentDidCatch","error","errorInfo","handleError","React","isError","is403Error","AccessErrorPage","state","is419Error","RateLimitErrorPage","isFilled","Flex","FlexItem","Spinner","renderPage","postConstruct","createLoaders","handleServerError","errorMessage","Server","getPathParam","paramName","paramValue","match","params","decodeURIComponent","loaders","Array","isArray","updateCurrentUser","length","setSingleState","Promise","all","then","catch","debug","retries","getRetries","incrementRetries","Math","pow","undefined","pageLoadRetries","status","errorType","setMultiState","type","PlusCircleIcon","If","isFiltered","emptyStateBodyText","onCreateRoleMapping","featureMultiTenant","onToggle","isOpen","clearSelection","id","onIdUpdate","onSelect","_event","selection","isPlaceholder","filter","event","criteria","principalToSelectOption","principal","index","SelectOption","key","value","description","displayName","filteredSAs","initialOptions","principalType","isUsersOnly","toLowerCase","includes","filteredUsers","rval","push","SelectGroup","label","sort","a","b","localeCompare","map","Divider","componentDidUpdate","prevProps","isUpdateAccess","defaultRole","Select","SelectVariant","typeAheadAriaLabel","createText","onClear","selections","isInputValuePersisted","placeholderText","principalId","isCreatable","menuAppendTo","maxHeight","isGrouped","onFilter","isDisabled","closeModal","onClose","reset","onAccountIDClearSelection","accountID","isAccountIDSelectOpen","role","handlePrincipalChange","accountId","isValid","checkValid","getRoleMapping","isFetchingMappingRole","currentRole","e","RoleTypes","onAccountIDSelect","newState","accountName","getAccountName","handleRoleChange","isChecked","target","doGrantAccess","onGrant","roles","find","escapePressed","escapeClosesModal","onAccountSelectToggle","onKey","stopPropagation","preventDefault","componentDidMount","prevState","principalName","principals","Modal","title","modalDescription","onEscapePress","onKeyPress","onKeyDown","onKeyUp","actions","Form","serviceRegistryInstance","DescriptionList","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","FormGroup","labelIcon","Popover","headerContent","bodyContent","OutlinedQuestionCircleIcon","isRequired","fieldId","SelectPrincipalAccount","TextInput","name","onChange","Radio","appendString","roleName","roleType","onRevokeRoleMapping","isRevokeModalOpen","revokingPrincipalId","onRevokeModalClose","doRevokeAccess","onRevoke","roleActions","onEditRoleMapping","filteredRoles","rm1","rm2","mustMatch","roleFilter","TableComposable","Thead","Tr","Th","Tbody","rowIndex","Td","items","removeRoleConfirmModalBodyText"],"sourceRoot":""}